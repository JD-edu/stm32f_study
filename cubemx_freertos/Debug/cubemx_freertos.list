
cubemx_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e8  080059e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f0  080059f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080059f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004a08  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a18  20004a18  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017033  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032b5  00000000  00000000  000370b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001440  00000000  00000000  0003a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fc4  00000000  00000000  0003b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002f8a  00000000  00000000  0003c774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016612  00000000  00000000  0003f6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d505f  00000000  00000000  00055d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005598  00000000  00000000  0012ad70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00130308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005940 	.word	0x08005940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005940 	.word	0x08005940

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa96 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f828 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8ba 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f88e 	bl	80005fc <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004e0:	f000 f880 	bl	80005e4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f002 fca0 	bl	8002e28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <main+0x44>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <main+0x48>)
 80004ee:	f002 fce5 	bl	8002ebc <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <main+0x4c>)
 80004f6:	6013      	str	r3, [r2, #0]
  gpio12TaskHandle = osThreadNew(StartGpio12Task, NULL, &gpio12Task_attributes);
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x50>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <main+0x54>)
 80004fe:	f002 fcdd 	bl	8002ebc <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <main+0x58>)
 8000506:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f002 fcb2 	bl	8002e70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x40>
 800050e:	bf00      	nop
 8000510:	08005988 	.word	0x08005988
 8000514:	080006f5 	.word	0x080006f5
 8000518:	20000074 	.word	0x20000074
 800051c:	080059ac 	.word	0x080059ac
 8000520:	08000705 	.word	0x08000705
 8000524:	20000078 	.word	0x20000078

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 f9c8 	bl	80058cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xb4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xb4>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xb4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <SystemClock_Config+0xb8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <SystemClock_Config+0xb8>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <SystemClock_Config+0xb8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fdb7 	bl	800110c <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a4:	f000 f8d0 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f81a 	bl	80015fc <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ce:	f000 f8bb 	bl	8000748 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2105      	movs	r1, #5
 80005ec:	2026      	movs	r0, #38	; 0x26
 80005ee:	f000 fb01 	bl	8000bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005f2:	2026      	movs	r0, #38	; 0x26
 80005f4:	f000 fb1a 	bl	8000c2c <HAL_NVIC_EnableIRQ>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART2_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000634:	f001 fc96 	bl	8001f64 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f883 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000002c 	.word	0x2000002c
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_GPIO_Init+0x9c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <MX_GPIO_Init+0x9c>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_GPIO_Init+0x9c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_GPIO_Init+0x9c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_GPIO_Init+0x9c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_GPIO_Init+0x9c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_GPIO_Init+0x9c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <MX_GPIO_Init+0x9c>)
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_GPIO_Init+0x9c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80006c0:	480b      	ldr	r0, [pc, #44]	; (80006f0 <MX_GPIO_Init+0xa0>)
 80006c2:	f000 fcef 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80006c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_GPIO_Init+0xa0>)
 80006e0:	f000 fb44 	bl	8000d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e4:	bf00      	nop
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020c00 	.word	0x40020c00

080006f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f002 fc6f 	bl	8002fe0 <osDelay>
 8000702:	e7fb      	b.n	80006fc <StartDefaultTask+0x8>

08000704 <StartGpio12Task>:
  }
  /* USER CODE END 5 */
}

void StartGpio12Task(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 800070c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000710:	f002 fc66 	bl	8002fe0 <osDelay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4801      	ldr	r0, [pc, #4]	; (8000720 <StartGpio12Task+0x1c>)
 800071a:	f000 fcdc 	bl	80010d6 <HAL_GPIO_TogglePin>
    osDelay(500);
 800071e:	e7f5      	b.n	800070c <StartGpio12Task+0x8>
 8000720:	40020c00 	.word	0x40020c00

08000724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000736:	f000 f985 	bl	8000a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40000800 	.word	0x40000800

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_MspInit+0x54>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <HAL_MspInit+0x54>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_MspInit+0x54>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_MspInit+0x54>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_MspInit+0x54>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_MspInit+0x54>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	210f      	movs	r1, #15
 8000796:	f06f 0001 	mvn.w	r0, #1
 800079a:	f000 fa2b 	bl	8000bf4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a19      	ldr	r2, [pc, #100]	; (8000830 <HAL_UART_MspInit+0x84>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d12b      	bne.n	8000826 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a17      	ldr	r2, [pc, #92]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_UART_MspInit+0x88>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000806:	230c      	movs	r3, #12
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000816:	2307      	movs	r3, #7
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_UART_MspInit+0x8c>)
 8000822:	f000 faa3 	bl	8000d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3728      	adds	r7, #40	; 0x28
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40004400 	.word	0x40004400
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000

0800083c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	; 0x38
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4b33      	ldr	r3, [pc, #204]	; (8000920 <HAL_InitTick+0xe4>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a32      	ldr	r2, [pc, #200]	; (8000920 <HAL_InitTick+0xe4>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b30      	ldr	r3, [pc, #192]	; (8000920 <HAL_InitTick+0xe4>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000868:	f107 0210 	add.w	r2, r7, #16
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f001 f8a2 	bl	80019bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000878:	6a3b      	ldr	r3, [r7, #32]
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087e:	2b00      	cmp	r3, #0
 8000880:	d103      	bne.n	800088a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000882:	f001 f873 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8000886:	6378      	str	r0, [r7, #52]	; 0x34
 8000888:	e004      	b.n	8000894 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800088a:	f001 f86f 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 800088e:	4603      	mov	r3, r0
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000896:	4a23      	ldr	r2, [pc, #140]	; (8000924 <HAL_InitTick+0xe8>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	0c9b      	lsrs	r3, r3, #18
 800089e:	3b01      	subs	r3, #1
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <HAL_InitTick+0xec>)
 80008a4:	4a21      	ldr	r2, [pc, #132]	; (800092c <HAL_InitTick+0xf0>)
 80008a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <HAL_InitTick+0xec>)
 80008aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ae:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <HAL_InitTick+0xec>)
 80008b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <HAL_InitTick+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <HAL_InitTick+0xec>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <HAL_InitTick+0xec>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008c8:	4817      	ldr	r0, [pc, #92]	; (8000928 <HAL_InitTick+0xec>)
 80008ca:	f001 f8a9 	bl	8001a20 <HAL_TIM_Base_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d11b      	bne.n	8000914 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80008dc:	4812      	ldr	r0, [pc, #72]	; (8000928 <HAL_InitTick+0xec>)
 80008de:	f001 f8f9 	bl	8001ad4 <HAL_TIM_Base_Start_IT>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d111      	bne.n	8000914 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008f0:	201e      	movs	r0, #30
 80008f2:	f000 f99b 	bl	8000c2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d808      	bhi.n	800090e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	201e      	movs	r0, #30
 8000902:	f000 f977 	bl	8000bf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_InitTick+0xf4>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	e002      	b.n	8000914 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000914:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000918:	4618      	mov	r0, r3
 800091a:	3738      	adds	r7, #56	; 0x38
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	431bde83 	.word	0x431bde83
 8000928:	2000007c 	.word	0x2000007c
 800092c:	40000800 	.word	0x40000800
 8000930:	20000004 	.word	0x20000004

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM4_IRQHandler+0x10>)
 8000966:	f001 f925 	bl	8001bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000007c 	.word	0x2000007c

08000974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <USART2_IRQHandler+0x10>)
 800097a:	f001 fb43 	bl	8002004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000002c 	.word	0x2000002c

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009b0:	f7ff ffea 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009b6:	490d      	ldr	r1, [pc, #52]	; (80009ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009cc:	4c0a      	ldr	r4, [pc, #40]	; (80009f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009da:	f004 ff7f 	bl	80058dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff fd75 	bl	80004cc <main>
  bx  lr    
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009f0:	080059f8 	.word	0x080059f8
  ldr r2, =_sbss
 80009f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009f8:	20004a18 	.word	0x20004a18

080009fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <HAL_Init+0x40>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_Init+0x40>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_Init+0x40>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f8d8 	bl	8000bde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f7ff ff04 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fe8e 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000c4 	.word	0x200000c4

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000c4 	.word	0x200000c4

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff4c 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c06:	f7ff ff61 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	6978      	ldr	r0, [r7, #20]
 8000c12:	f7ff ffb1 	bl	8000b78 <NVIC_EncodePriority>
 8000c16:	4602      	mov	r2, r0
 8000c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff80 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff54 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c56:	f7ff ff09 	bl	8000a6c <HAL_GetTick>
 8000c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d008      	beq.n	8000c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e052      	b.n	8000d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 0216 	bic.w	r2, r2, #22
 8000c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	695a      	ldr	r2, [r3, #20]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d103      	bne.n	8000caa <HAL_DMA_Abort+0x62>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0208 	bic.w	r2, r2, #8
 8000cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 0201 	bic.w	r2, r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cca:	e013      	b.n	8000cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ccc:	f7ff fece 	bl	8000a6c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d90c      	bls.n	8000cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2220      	movs	r2, #32
 8000cde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e015      	b.n	8000d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1e4      	bne.n	8000ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d06:	223f      	movs	r2, #63	; 0x3f
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d004      	beq.n	8000d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00c      	b.n	8000d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2205      	movs	r2, #5
 8000d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	e16b      	b.n	8001060 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	f040 815a 	bne.w	800105a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d005      	beq.n	8000dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d130      	bne.n	8000e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 0201 	and.w	r2, r3, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d017      	beq.n	8000e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d123      	bne.n	8000eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	69b9      	ldr	r1, [r7, #24]
 8000eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0203 	and.w	r2, r3, #3
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80b4 	beq.w	800105a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b60      	ldr	r3, [pc, #384]	; (8001078 <HAL_GPIO_Init+0x30c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a5f      	ldr	r2, [pc, #380]	; (8001078 <HAL_GPIO_Init+0x30c>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b5d      	ldr	r3, [pc, #372]	; (8001078 <HAL_GPIO_Init+0x30c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0e:	4a5b      	ldr	r2, [pc, #364]	; (800107c <HAL_GPIO_Init+0x310>)
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3302      	adds	r3, #2
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a52      	ldr	r2, [pc, #328]	; (8001080 <HAL_GPIO_Init+0x314>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d02b      	beq.n	8000f92 <HAL_GPIO_Init+0x226>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a51      	ldr	r2, [pc, #324]	; (8001084 <HAL_GPIO_Init+0x318>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d025      	beq.n	8000f8e <HAL_GPIO_Init+0x222>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a50      	ldr	r2, [pc, #320]	; (8001088 <HAL_GPIO_Init+0x31c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01f      	beq.n	8000f8a <HAL_GPIO_Init+0x21e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	; (800108c <HAL_GPIO_Init+0x320>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x21a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4e      	ldr	r2, [pc, #312]	; (8001090 <HAL_GPIO_Init+0x324>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x216>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <HAL_GPIO_Init+0x328>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x212>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4c      	ldr	r2, [pc, #304]	; (8001098 <HAL_GPIO_Init+0x32c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x20e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4b      	ldr	r2, [pc, #300]	; (800109c <HAL_GPIO_Init+0x330>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x20a>
 8000f72:	2307      	movs	r3, #7
 8000f74:	e00e      	b.n	8000f94 <HAL_GPIO_Init+0x228>
 8000f76:	2308      	movs	r3, #8
 8000f78:	e00c      	b.n	8000f94 <HAL_GPIO_Init+0x228>
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	e00a      	b.n	8000f94 <HAL_GPIO_Init+0x228>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x228>
 8000f82:	2304      	movs	r3, #4
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x228>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x228>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x228>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x228>
 8000f92:	2300      	movs	r3, #0
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	f002 0203 	and.w	r2, r2, #3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa4:	4935      	ldr	r1, [pc, #212]	; (800107c <HAL_GPIO_Init+0x310>)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <HAL_GPIO_Init+0x334>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd6:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <HAL_GPIO_Init+0x334>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <HAL_GPIO_Init+0x334>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <HAL_GPIO_Init+0x334>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <HAL_GPIO_Init+0x334>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <HAL_GPIO_Init+0x334>)
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_GPIO_Init+0x334>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <HAL_GPIO_Init+0x334>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3301      	adds	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	f67f ae90 	bls.w	8000d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800
 800107c:	40013800 	.word	0x40013800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400
 8001088:	40020800 	.word	0x40020800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	40021000 	.word	0x40021000
 8001094:	40021400 	.word	0x40021400
 8001098:	40021800 	.word	0x40021800
 800109c:	40021c00 	.word	0x40021c00
 80010a0:	40013c00 	.word	0x40013c00

080010a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c0:	e003      	b.n	80010ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010e8:	887a      	ldrh	r2, [r7, #2]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4013      	ands	r3, r2
 80010ee:	041a      	lsls	r2, r3, #16
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	400b      	ands	r3, r1
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	619a      	str	r2, [r3, #24]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e267      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d075      	beq.n	8001216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112a:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b04      	cmp	r3, #4
 8001134:	d00c      	beq.n	8001150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001136:	4b85      	ldr	r3, [pc, #532]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113e:	2b08      	cmp	r3, #8
 8001140:	d112      	bne.n	8001168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001142:	4b82      	ldr	r3, [pc, #520]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800114e:	d10b      	bne.n	8001168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001150:	4b7e      	ldr	r3, [pc, #504]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d05b      	beq.n	8001214 <HAL_RCC_OscConfig+0x108>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d157      	bne.n	8001214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e242      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d106      	bne.n	8001180 <HAL_RCC_OscConfig+0x74>
 8001172:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a75      	ldr	r2, [pc, #468]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e01d      	b.n	80011bc <HAL_RCC_OscConfig+0xb0>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x98>
 800118a:	4b70      	ldr	r3, [pc, #448]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6f      	ldr	r2, [pc, #444]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b6d      	ldr	r3, [pc, #436]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6c      	ldr	r2, [pc, #432]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0xb0>
 80011a4:	4b69      	ldr	r3, [pc, #420]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a68      	ldr	r2, [pc, #416]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b66      	ldr	r3, [pc, #408]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a65      	ldr	r2, [pc, #404]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d013      	beq.n	80011ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fc52 	bl	8000a6c <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fc4e 	bl	8000a6c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e207      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b5b      	ldr	r3, [pc, #364]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0xc0>
 80011ea:	e014      	b.n	8001216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc3e 	bl	8000a6c <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fc3a 	bl	8000a6c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1f3      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	4b51      	ldr	r3, [pc, #324]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0xe8>
 8001212:	e000      	b.n	8001216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d063      	beq.n	80012ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122e:	4b47      	ldr	r3, [pc, #284]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001236:	2b08      	cmp	r3, #8
 8001238:	d11c      	bne.n	8001274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d116      	bne.n	8001274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <HAL_RCC_OscConfig+0x152>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e1c7      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4937      	ldr	r1, [pc, #220]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	e03a      	b.n	80012ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d020      	beq.n	80012be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_RCC_OscConfig+0x244>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fbf3 	bl	8000a6c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fbef 	bl	8000a6c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e1a8      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_RCC_OscConfig+0x240>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4925      	ldr	r1, [pc, #148]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
 80012bc:	e015      	b.n	80012ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_RCC_OscConfig+0x244>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fbd2 	bl	8000a6c <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fbce 	bl	8000a6c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e187      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d036      	beq.n	8001364 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d016      	beq.n	800132c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_RCC_OscConfig+0x248>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fbb2 	bl	8000a6c <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fbae 	bl	8000a6c <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e167      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x240>)
 8001320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x200>
 800132a:	e01b      	b.n	8001364 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_RCC_OscConfig+0x248>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fb9b 	bl	8000a6c <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	e00e      	b.n	8001358 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133a:	f7ff fb97 	bl	8000a6c <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d907      	bls.n	8001358 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e150      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
 800134c:	40023800 	.word	0x40023800
 8001350:	42470000 	.word	0x42470000
 8001354:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001358:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800135a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ea      	bne.n	800133a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 8097 	beq.w	80014a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10f      	bne.n	80013a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b7d      	ldr	r3, [pc, #500]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a7c      	ldr	r2, [pc, #496]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b7a      	ldr	r3, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	4b77      	ldr	r3, [pc, #476]	; (8001580 <HAL_RCC_OscConfig+0x474>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d118      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ae:	4b74      	ldr	r3, [pc, #464]	; (8001580 <HAL_RCC_OscConfig+0x474>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a73      	ldr	r2, [pc, #460]	; (8001580 <HAL_RCC_OscConfig+0x474>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fb57 	bl	8000a6c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c2:	f7ff fb53 	bl	8000a6c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e10c      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <HAL_RCC_OscConfig+0x474>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2ea>
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_RCC_OscConfig+0x470>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	4a63      	ldr	r2, [pc, #396]	; (800157c <HAL_RCC_OscConfig+0x470>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6713      	str	r3, [r2, #112]	; 0x70
 80013f4:	e01c      	b.n	8001430 <HAL_RCC_OscConfig+0x324>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x30c>
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6713      	str	r3, [r2, #112]	; 0x70
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	4a5b      	ldr	r2, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6713      	str	r3, [r2, #112]	; 0x70
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0x324>
 8001418:	4b58      	ldr	r3, [pc, #352]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	4a57      	ldr	r2, [pc, #348]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	6713      	str	r3, [r2, #112]	; 0x70
 8001424:	4b55      	ldr	r3, [pc, #340]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a54      	ldr	r2, [pc, #336]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 0304 	bic.w	r3, r3, #4
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d015      	beq.n	8001464 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fb18 	bl	8000a6c <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143e:	e00a      	b.n	8001456 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001440:	f7ff fb14 	bl	8000a6c <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	f241 3288 	movw	r2, #5000	; 0x1388
 800144e:	4293      	cmp	r3, r2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e0cb      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001456:	4b49      	ldr	r3, [pc, #292]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0ee      	beq.n	8001440 <HAL_RCC_OscConfig+0x334>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fb02 	bl	8000a6c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fafe 	bl	8000a6c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e0b5      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ee      	bne.n	800146c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a38      	ldr	r2, [pc, #224]	; (800157c <HAL_RCC_OscConfig+0x470>)
 800149a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a1 	beq.w	80015ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x470>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d05c      	beq.n	8001570 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d141      	bne.n	8001542 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_RCC_OscConfig+0x478>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fad2 	bl	8000a6c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff face 	bl	8000a6c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e087      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x470>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69da      	ldr	r2, [r3, #28]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	3b01      	subs	r3, #1
 8001504:	041b      	lsls	r3, r3, #16
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	061b      	lsls	r3, r3, #24
 800150e:	491b      	ldr	r1, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001510:	4313      	orrs	r3, r2
 8001512:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_RCC_OscConfig+0x478>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff faa7 	bl	8000a6c <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff faa3 	bl	8000a6c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e05c      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x416>
 8001540:	e054      	b.n	80015ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_OscConfig+0x478>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fa90 	bl	8000a6c <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff fa8c 	bl	8000a6c <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e045      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_RCC_OscConfig+0x470>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x444>
 800156e:	e03d      	b.n	80015ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d107      	bne.n	8001588 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e038      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000
 8001584:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x4ec>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d028      	beq.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d121      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d11a      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015b8:	4013      	ands	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d111      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	3b01      	subs	r3, #1
 80015d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0cc      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001610:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0307 	and.w	r3, r3, #7
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d90c      	bls.n	8001638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161e:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b63      	ldr	r3, [pc, #396]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0b8      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001650:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4a58      	ldr	r2, [pc, #352]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800165a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001668:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001674:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	494d      	ldr	r1, [pc, #308]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d044      	beq.n	800171c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d119      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e07f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e06f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e067      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f023 0203 	bic.w	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4934      	ldr	r1, [pc, #208]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ec:	f7ff f9be 	bl	8000a6c <HAL_GetTick>
 80016f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	e00a      	b.n	800170a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f4:	f7ff f9ba 	bl	8000a6c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e04f      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 020c 	and.w	r2, r3, #12
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	429a      	cmp	r2, r3
 800171a:	d1eb      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d20c      	bcs.n	8001744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e032      	b.n	80017aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4916      	ldr	r1, [pc, #88]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	490e      	ldr	r1, [pc, #56]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001782:	f000 f821 	bl	80017c8 <HAL_RCC_GetSysClockFreq>
 8001786:	4602      	mov	r2, r0
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	490a      	ldr	r1, [pc, #40]	; (80017bc <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	5ccb      	ldrb	r3, [r1, r3]
 8001796:	fa22 f303 	lsr.w	r3, r2, r3
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_RCC_ClockConfig+0x1c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f84a 	bl	800083c <HAL_InitTick>

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00
 80017b8:	40023800 	.word	0x40023800
 80017bc:	080059d0 	.word	0x080059d0
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b090      	sub	sp, #64	; 0x40
 80017ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
 80017d4:	2300      	movs	r3, #0
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d8:	2300      	movs	r3, #0
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_GetSysClockFreq+0x180>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d00d      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x40>
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	f200 80a1 	bhi.w	8001934 <HAL_RCC_GetSysClockFreq+0x16c>
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x34>
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x3a>
 80017fa:	e09b      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_RCC_GetSysClockFreq+0x184>)
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001800:	e09b      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001802:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_GetSysClockFreq+0x188>)
 8001804:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001806:	e098      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <HAL_RCC_GetSysClockFreq+0x180>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001812:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_RCC_GetSysClockFreq+0x180>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d028      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_RCC_GetSysClockFreq+0x180>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	2200      	movs	r2, #0
 8001826:	623b      	str	r3, [r7, #32]
 8001828:	627a      	str	r2, [r7, #36]	; 0x24
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001830:	2100      	movs	r1, #0
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_GetSysClockFreq+0x188>)
 8001834:	fb03 f201 	mul.w	r2, r3, r1
 8001838:	2300      	movs	r3, #0
 800183a:	fb00 f303 	mul.w	r3, r0, r3
 800183e:	4413      	add	r3, r2
 8001840:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_RCC_GetSysClockFreq+0x188>)
 8001842:	fba0 1202 	umull	r1, r2, r0, r2
 8001846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001848:	460a      	mov	r2, r1
 800184a:	62ba      	str	r2, [r7, #40]	; 0x28
 800184c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184e:	4413      	add	r3, r2
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001854:	2200      	movs	r2, #0
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	61fa      	str	r2, [r7, #28]
 800185a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800185e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001862:	f7fe fcb5 	bl	80001d0 <__aeabi_uldivmod>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4613      	mov	r3, r2
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800186e:	e053      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001870:	4b35      	ldr	r3, [pc, #212]	; (8001948 <HAL_RCC_GetSysClockFreq+0x180>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	2200      	movs	r2, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	617a      	str	r2, [r7, #20]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001882:	f04f 0b00 	mov.w	fp, #0
 8001886:	4652      	mov	r2, sl
 8001888:	465b      	mov	r3, fp
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	0159      	lsls	r1, r3, #5
 8001894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001898:	0150      	lsls	r0, r2, #5
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	ebb2 080a 	subs.w	r8, r2, sl
 80018a2:	eb63 090b 	sbc.w	r9, r3, fp
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018ba:	ebb2 0408 	subs.w	r4, r2, r8
 80018be:	eb63 0509 	sbc.w	r5, r3, r9
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	00eb      	lsls	r3, r5, #3
 80018cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d0:	00e2      	lsls	r2, r4, #3
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	eb14 030a 	adds.w	r3, r4, sl
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	eb45 030b 	adc.w	r3, r5, fp
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ee:	4629      	mov	r1, r5
 80018f0:	028b      	lsls	r3, r1, #10
 80018f2:	4621      	mov	r1, r4
 80018f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f8:	4621      	mov	r1, r4
 80018fa:	028a      	lsls	r2, r1, #10
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001902:	2200      	movs	r2, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	60fa      	str	r2, [r7, #12]
 8001908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800190c:	f7fe fc60 	bl	80001d0 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_GetSysClockFreq+0x180>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	3301      	adds	r3, #1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001932:	e002      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetSysClockFreq+0x184>)
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800193c:	4618      	mov	r0, r3
 800193e:	3740      	adds	r7, #64	; 0x40
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	00f42400 	.word	0x00f42400
 8001950:	017d7840 	.word	0x017d7840

08001954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_RCC_GetHCLKFreq+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001970:	f7ff fff0 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4903      	ldr	r1, [pc, #12]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	080059e0 	.word	0x080059e0

08001994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001998:	f7ff ffdc 	bl	8001954 <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0b5b      	lsrs	r3, r3, #13
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	080059e0 	.word	0x080059e0

080019bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	220f      	movs	r2, #15
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_RCC_GetClockConfig+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e041      	b.n	8001ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f839 	bl	8001abe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f000 f9c0 	bl	8001de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d001      	beq.n	8001aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e04e      	b.n	8001b8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d022      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x80>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b16:	d01d      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x80>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d018      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x80>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d013      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x80>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d00e      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x80>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d009      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x80>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_TIM_Base_Start_IT+0xd8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d004      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x80>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d111      	bne.n	8001b78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d010      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b76:	e007      	b.n	8001b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40000800 	.word	0x40000800
 8001ba4:	40000c00 	.word	0x40000c00
 8001ba8:	40010400 	.word	0x40010400
 8001bac:	40014000 	.word	0x40014000
 8001bb0:	40001800 	.word	0x40001800

08001bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d020      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0202 	mvn.w	r2, #2
 8001be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f8d2 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8c4 	bl	8001d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8d5 	bl	8001dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d020      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01b      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0204 	mvn.w	r2, #4
 8001c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8ac 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f89e 	bl	8001d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f8af 	bl	8001dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d020      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01b      	beq.n	8001cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0208 	mvn.w	r2, #8
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2204      	movs	r2, #4
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f886 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f878 	bl	8001d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f889 	bl	8001dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d01b      	beq.n	8001cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0210 	mvn.w	r2, #16
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f860 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f852 	bl	8001d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f863 	bl	8001dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0201 	mvn.w	r2, #1
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe fd02 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00c      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f906 	bl	8001f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f834 	bl	8001dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00c      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0220 	mvn.w	r2, #32
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8d8 	bl	8001f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <TIM_Base_SetConfig+0x12c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <TIM_Base_SetConfig+0x40>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e02:	d00f      	beq.n	8001e24 <TIM_Base_SetConfig+0x40>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a43      	ldr	r2, [pc, #268]	; (8001f14 <TIM_Base_SetConfig+0x130>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00b      	beq.n	8001e24 <TIM_Base_SetConfig+0x40>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a42      	ldr	r2, [pc, #264]	; (8001f18 <TIM_Base_SetConfig+0x134>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d007      	beq.n	8001e24 <TIM_Base_SetConfig+0x40>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a41      	ldr	r2, [pc, #260]	; (8001f1c <TIM_Base_SetConfig+0x138>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d003      	beq.n	8001e24 <TIM_Base_SetConfig+0x40>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a40      	ldr	r2, [pc, #256]	; (8001f20 <TIM_Base_SetConfig+0x13c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d108      	bne.n	8001e36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a35      	ldr	r2, [pc, #212]	; (8001f10 <TIM_Base_SetConfig+0x12c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d02b      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e44:	d027      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a32      	ldr	r2, [pc, #200]	; (8001f14 <TIM_Base_SetConfig+0x130>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d023      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a31      	ldr	r2, [pc, #196]	; (8001f18 <TIM_Base_SetConfig+0x134>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01f      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a30      	ldr	r2, [pc, #192]	; (8001f1c <TIM_Base_SetConfig+0x138>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01b      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <TIM_Base_SetConfig+0x13c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d017      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <TIM_Base_SetConfig+0x140>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2d      	ldr	r2, [pc, #180]	; (8001f28 <TIM_Base_SetConfig+0x144>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00f      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <TIM_Base_SetConfig+0x148>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00b      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2b      	ldr	r2, [pc, #172]	; (8001f30 <TIM_Base_SetConfig+0x14c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <TIM_Base_SetConfig+0x150>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d003      	beq.n	8001e96 <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <TIM_Base_SetConfig+0x154>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d108      	bne.n	8001ea8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <TIM_Base_SetConfig+0x12c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d003      	beq.n	8001edc <TIM_Base_SetConfig+0xf8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <TIM_Base_SetConfig+0x13c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d103      	bne.n	8001ee4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d105      	bne.n	8001f02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f023 0201 	bic.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	611a      	str	r2, [r3, #16]
  }
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40010400 	.word	0x40010400
 8001f24:	40014000 	.word	0x40014000
 8001f28:	40014400 	.word	0x40014400
 8001f2c:	40014800 	.word	0x40014800
 8001f30:	40001800 	.word	0x40001800
 8001f34:	40001c00 	.word	0x40001c00
 8001f38:	40002000 	.word	0x40002000

08001f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e042      	b.n	8001ffc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fc0e 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2224      	movs	r2, #36	; 0x24
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fc85 	bl	80028b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b0ba      	sub	sp, #232	; 0xe8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10f      	bne.n	800206a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800204a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_UART_IRQHandler+0x66>
 8002056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fb69 	bl	800273a <UART_Receive_IT>
      return;
 8002068:	e25b      	b.n	8002522 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800206a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80de 	beq.w	8002230 <HAL_UART_IRQHandler+0x22c>
 8002074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002084:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80d1 	beq.w	8002230 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800208e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_UART_IRQHandler+0xae>
 800209a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_UART_IRQHandler+0xd2>
 80020be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f043 0202 	orr.w	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_UART_IRQHandler+0xf6>
 80020e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d011      	beq.n	800212a <HAL_UART_IRQHandler+0x126>
 8002106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d105      	bne.n	800211e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f043 0208 	orr.w	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 81f2 	beq.w	8002518 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_UART_IRQHandler+0x14e>
 8002140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 faf4 	bl	800273a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_UART_IRQHandler+0x17a>
 8002176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d04f      	beq.n	800221e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f9fc 	bl	800257c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218e:	2b40      	cmp	r3, #64	; 0x40
 8002190:	d141      	bne.n	8002216 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3314      	adds	r3, #20
 8002198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021a0:	e853 3f00 	ldrex	r3, [r3]
 80021a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80021a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3314      	adds	r3, #20
 80021ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021ce:	e841 2300 	strex	r3, r2, [r1]
 80021d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1d9      	bne.n	8002192 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d013      	beq.n	800220e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	4a7e      	ldr	r2, [pc, #504]	; (80023e4 <HAL_UART_IRQHandler+0x3e0>)
 80021ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fd98 	bl	8000d28 <HAL_DMA_Abort_IT>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002208:	4610      	mov	r0, r2
 800220a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800220c:	e00e      	b.n	800222c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f99e 	bl	8002550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002214:	e00a      	b.n	800222c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f99a 	bl	8002550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800221c:	e006      	b.n	800222c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f996 	bl	8002550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800222a:	e175      	b.n	8002518 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222c:	bf00      	nop
    return;
 800222e:	e173      	b.n	8002518 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	2b01      	cmp	r3, #1
 8002236:	f040 814f 	bne.w	80024d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800223a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8148 	beq.w	80024d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8141 	beq.w	80024d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	f040 80b6 	bne.w	80023e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002288:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8145 	beq.w	800251c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800229a:	429a      	cmp	r2, r3
 800229c:	f080 813e 	bcs.w	800251c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80022a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b2:	f000 8088 	beq.w	80023c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	330c      	adds	r3, #12
 80022bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022c4:	e853 3f00 	ldrex	r3, [r3]
 80022c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	330c      	adds	r3, #12
 80022de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022f2:	e841 2300 	strex	r3, r2, [r1]
 80022f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80022fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1d9      	bne.n	80022b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3314      	adds	r3, #20
 8002308:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800230a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800230c:	e853 3f00 	ldrex	r3, [r3]
 8002310:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3314      	adds	r3, #20
 8002322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002326:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800232a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800232e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002332:	e841 2300 	strex	r3, r2, [r1]
 8002336:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e1      	bne.n	8002302 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3314      	adds	r3, #20
 8002344:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002348:	e853 3f00 	ldrex	r3, [r3]
 800234c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800234e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3314      	adds	r3, #20
 800235e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002362:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002364:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800236a:	e841 2300 	strex	r3, r2, [r1]
 800236e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e3      	bne.n	800233e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238e:	e853 3f00 	ldrex	r3, [r3]
 8002392:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002396:	f023 0310 	bic.w	r3, r3, #16
 800239a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80023a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80023aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023b0:	e841 2300 	strex	r3, r2, [r1]
 80023b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1e3      	bne.n	8002384 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fc41 	bl	8000c48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f8c1 	bl	8002564 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023e2:	e09b      	b.n	800251c <HAL_UART_IRQHandler+0x518>
 80023e4:	08002643 	.word	0x08002643
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 808e 	beq.w	8002520 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002404:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8089 	beq.w	8002520 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002424:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	330c      	adds	r3, #12
 800242e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002432:	647a      	str	r2, [r7, #68]	; 0x44
 8002434:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800243a:	e841 2300 	strex	r3, r2, [r1]
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e3      	bne.n	800240e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	e853 3f00 	ldrex	r3, [r3]
 8002454:	623b      	str	r3, [r7, #32]
   return(result);
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3314      	adds	r3, #20
 8002466:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800246a:	633a      	str	r2, [r7, #48]	; 0x30
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002472:	e841 2300 	strex	r3, r2, [r1]
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1e3      	bne.n	8002446 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330c      	adds	r3, #12
 8002492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	e853 3f00 	ldrex	r3, [r3]
 800249a:	60fb      	str	r3, [r7, #12]
   return(result);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0310 	bic.w	r3, r3, #16
 80024a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80024b0:	61fa      	str	r2, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b4:	69b9      	ldr	r1, [r7, #24]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	e841 2300 	strex	r3, r2, [r1]
 80024bc:	617b      	str	r3, [r7, #20]
   return(result);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e3      	bne.n	800248c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f847 	bl	8002564 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024d6:	e023      	b.n	8002520 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <HAL_UART_IRQHandler+0x4f4>
 80024e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f8ba 	bl	800266a <UART_Transmit_IT>
    return;
 80024f6:	e014      	b.n	8002522 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00e      	beq.n	8002522 <HAL_UART_IRQHandler+0x51e>
 8002504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f8fa 	bl	800270a <UART_EndTransmit_IT>
    return;
 8002516:	e004      	b.n	8002522 <HAL_UART_IRQHandler+0x51e>
    return;
 8002518:	bf00      	nop
 800251a:	e002      	b.n	8002522 <HAL_UART_IRQHandler+0x51e>
      return;
 800251c:	bf00      	nop
 800251e:	e000      	b.n	8002522 <HAL_UART_IRQHandler+0x51e>
      return;
 8002520:	bf00      	nop
  }
}
 8002522:	37e8      	adds	r7, #232	; 0xe8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800257c:	b480      	push	{r7}
 800257e:	b095      	sub	sp, #84	; 0x54
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258e:	e853 3f00 	ldrex	r3, [r3]
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800259a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025a4:	643a      	str	r2, [r7, #64]	; 0x40
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025ac:	e841 2300 	strex	r3, r2, [r1]
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e5      	bne.n	8002584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3314      	adds	r3, #20
 80025be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	e853 3f00 	ldrex	r3, [r3]
 80025c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3314      	adds	r3, #20
 80025d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e0:	e841 2300 	strex	r3, r2, [r1]
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e5      	bne.n	80025b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d119      	bne.n	8002628 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	e853 3f00 	ldrex	r3, [r3]
 8002602:	60bb      	str	r3, [r7, #8]
   return(result);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f023 0310 	bic.w	r3, r3, #16
 800260a:	647b      	str	r3, [r7, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002614:	61ba      	str	r2, [r7, #24]
 8002616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	e841 2300 	strex	r3, r2, [r1]
 8002620:	613b      	str	r3, [r7, #16]
   return(result);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e5      	bne.n	80025f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002636:	bf00      	nop
 8002638:	3754      	adds	r7, #84	; 0x54
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff ff77 	bl	8002550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b21      	cmp	r3, #33	; 0x21
 800267c:	d13e      	bne.n	80026fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	d114      	bne.n	80026b2 <UART_Transmit_IT+0x48>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d110      	bne.n	80026b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	1c9a      	adds	r2, r3, #2
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	621a      	str	r2, [r3, #32]
 80026b0:	e008      	b.n	80026c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	1c59      	adds	r1, r3, #1
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6211      	str	r1, [r2, #32]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4619      	mov	r1, r3
 80026d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10f      	bne.n	80026f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026fc:	2302      	movs	r3, #2
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002720:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fefc 	bl	8002528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b08c      	sub	sp, #48	; 0x30
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b22      	cmp	r3, #34	; 0x22
 800274c:	f040 80ae 	bne.w	80028ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	d117      	bne.n	800278a <UART_Receive_IT+0x50>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d113      	bne.n	800278a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	b29a      	uxth	r2, r3
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	1c9a      	adds	r2, r3, #2
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
 8002788:	e026      	b.n	80027d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002790:	2300      	movs	r3, #0
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279c:	d007      	beq.n	80027ae <UART_Receive_IT+0x74>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <UART_Receive_IT+0x82>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e008      	b.n	80027ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4619      	mov	r1, r3
 80027e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d15d      	bne.n	80028a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0220 	bic.w	r2, r2, #32
 80027fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800280a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	2b01      	cmp	r3, #1
 8002830:	d135      	bne.n	800289e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	e853 3f00 	ldrex	r3, [r3]
 8002846:	613b      	str	r3, [r7, #16]
   return(result);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f023 0310 	bic.w	r3, r3, #16
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	623a      	str	r2, [r7, #32]
 800285a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	69f9      	ldr	r1, [r7, #28]
 800285e:	6a3a      	ldr	r2, [r7, #32]
 8002860:	e841 2300 	strex	r3, r2, [r1]
 8002864:	61bb      	str	r3, [r7, #24]
   return(result);
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e5      	bne.n	8002838 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b10      	cmp	r3, #16
 8002878:	d10a      	bne.n	8002890 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fe64 	bl	8002564 <HAL_UARTEx_RxEventCallback>
 800289c:	e002      	b.n	80028a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fe4c 	bl	800253c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e002      	b.n	80028ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3730      	adds	r7, #48	; 0x30
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028bc:	b0c0      	sub	sp, #256	; 0x100
 80028be:	af00      	add	r7, sp, #0
 80028c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	68d9      	ldr	r1, [r3, #12]
 80028d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	ea40 0301 	orr.w	r3, r0, r1
 80028e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002910:	f021 010c 	bic.w	r1, r1, #12
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800291e:	430b      	orrs	r3, r1
 8002920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002932:	6999      	ldr	r1, [r3, #24]
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	ea40 0301 	orr.w	r3, r0, r1
 800293e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b8f      	ldr	r3, [pc, #572]	; (8002b84 <UART_SetConfig+0x2cc>)
 8002948:	429a      	cmp	r2, r3
 800294a:	d005      	beq.n	8002958 <UART_SetConfig+0xa0>
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b8d      	ldr	r3, [pc, #564]	; (8002b88 <UART_SetConfig+0x2d0>)
 8002954:	429a      	cmp	r2, r3
 8002956:	d104      	bne.n	8002962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002958:	f7ff f81c 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 800295c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002960:	e003      	b.n	800296a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002962:	f7ff f803 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8002966:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002974:	f040 810c 	bne.w	8002b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800297c:	2200      	movs	r2, #0
 800297e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002982:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800298a:	4622      	mov	r2, r4
 800298c:	462b      	mov	r3, r5
 800298e:	1891      	adds	r1, r2, r2
 8002990:	65b9      	str	r1, [r7, #88]	; 0x58
 8002992:	415b      	adcs	r3, r3
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800299a:	4621      	mov	r1, r4
 800299c:	eb12 0801 	adds.w	r8, r2, r1
 80029a0:	4629      	mov	r1, r5
 80029a2:	eb43 0901 	adc.w	r9, r3, r1
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029ba:	4690      	mov	r8, r2
 80029bc:	4699      	mov	r9, r3
 80029be:	4623      	mov	r3, r4
 80029c0:	eb18 0303 	adds.w	r3, r8, r3
 80029c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029c8:	462b      	mov	r3, r5
 80029ca:	eb49 0303 	adc.w	r3, r9, r3
 80029ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029e6:	460b      	mov	r3, r1
 80029e8:	18db      	adds	r3, r3, r3
 80029ea:	653b      	str	r3, [r7, #80]	; 0x50
 80029ec:	4613      	mov	r3, r2
 80029ee:	eb42 0303 	adc.w	r3, r2, r3
 80029f2:	657b      	str	r3, [r7, #84]	; 0x54
 80029f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029fc:	f7fd fbe8 	bl	80001d0 <__aeabi_uldivmod>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <UART_SetConfig+0x2d4>)
 8002a06:	fba3 2302 	umull	r2, r3, r3, r2
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	011c      	lsls	r4, r3, #4
 8002a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a20:	4642      	mov	r2, r8
 8002a22:	464b      	mov	r3, r9
 8002a24:	1891      	adds	r1, r2, r2
 8002a26:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a28:	415b      	adcs	r3, r3
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a30:	4641      	mov	r1, r8
 8002a32:	eb12 0a01 	adds.w	sl, r2, r1
 8002a36:	4649      	mov	r1, r9
 8002a38:	eb43 0b01 	adc.w	fp, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a50:	4692      	mov	sl, r2
 8002a52:	469b      	mov	fp, r3
 8002a54:	4643      	mov	r3, r8
 8002a56:	eb1a 0303 	adds.w	r3, sl, r3
 8002a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a5e:	464b      	mov	r3, r9
 8002a60:	eb4b 0303 	adc.w	r3, fp, r3
 8002a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	18db      	adds	r3, r3, r3
 8002a80:	643b      	str	r3, [r7, #64]	; 0x40
 8002a82:	4613      	mov	r3, r2
 8002a84:	eb42 0303 	adc.w	r3, r2, r3
 8002a88:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a92:	f7fd fb9d 	bl	80001d0 <__aeabi_uldivmod>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <UART_SetConfig+0x2d4>)
 8002a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2264      	movs	r2, #100	; 0x64
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	1acb      	subs	r3, r1, r3
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <UART_SetConfig+0x2d4>)
 8002ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ac0:	441c      	add	r4, r3
 8002ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002acc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	464b      	mov	r3, r9
 8002ad8:	1891      	adds	r1, r2, r2
 8002ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8002adc:	415b      	adcs	r3, r3
 8002ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	1851      	adds	r1, r2, r1
 8002ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8002aea:	4649      	mov	r1, r9
 8002aec:	414b      	adcs	r3, r1
 8002aee:	637b      	str	r3, [r7, #52]	; 0x34
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002afc:	4659      	mov	r1, fp
 8002afe:	00cb      	lsls	r3, r1, #3
 8002b00:	4651      	mov	r1, sl
 8002b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b06:	4651      	mov	r1, sl
 8002b08:	00ca      	lsls	r2, r1, #3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4642      	mov	r2, r8
 8002b12:	189b      	adds	r3, r3, r2
 8002b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b18:	464b      	mov	r3, r9
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	eb42 0303 	adc.w	r3, r2, r3
 8002b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b38:	460b      	mov	r3, r1
 8002b3a:	18db      	adds	r3, r3, r3
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3e:	4613      	mov	r3, r2
 8002b40:	eb42 0303 	adc.w	r3, r2, r3
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b4e:	f7fd fb3f 	bl	80001d0 <__aeabi_uldivmod>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <UART_SetConfig+0x2d4>)
 8002b58:	fba3 1302 	umull	r1, r3, r3, r2
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	2164      	movs	r1, #100	; 0x64
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	3332      	adds	r3, #50	; 0x32
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <UART_SetConfig+0x2d4>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	f003 0207 	and.w	r2, r3, #7
 8002b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4422      	add	r2, r4
 8002b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b80:	e106      	b.n	8002d90 <UART_SetConfig+0x4d8>
 8002b82:	bf00      	nop
 8002b84:	40011000 	.word	0x40011000
 8002b88:	40011400 	.word	0x40011400
 8002b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ba2:	4642      	mov	r2, r8
 8002ba4:	464b      	mov	r3, r9
 8002ba6:	1891      	adds	r1, r2, r2
 8002ba8:	6239      	str	r1, [r7, #32]
 8002baa:	415b      	adcs	r3, r3
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bb2:	4641      	mov	r1, r8
 8002bb4:	1854      	adds	r4, r2, r1
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	eb43 0501 	adc.w	r5, r3, r1
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	00eb      	lsls	r3, r5, #3
 8002bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bca:	00e2      	lsls	r2, r4, #3
 8002bcc:	4614      	mov	r4, r2
 8002bce:	461d      	mov	r5, r3
 8002bd0:	4643      	mov	r3, r8
 8002bd2:	18e3      	adds	r3, r4, r3
 8002bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bd8:	464b      	mov	r3, r9
 8002bda:	eb45 0303 	adc.w	r3, r5, r3
 8002bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bfe:	4629      	mov	r1, r5
 8002c00:	008b      	lsls	r3, r1, #2
 8002c02:	4621      	mov	r1, r4
 8002c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c08:	4621      	mov	r1, r4
 8002c0a:	008a      	lsls	r2, r1, #2
 8002c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c10:	f7fd fade 	bl	80001d0 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4b60      	ldr	r3, [pc, #384]	; (8002d9c <UART_SetConfig+0x4e4>)
 8002c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	011c      	lsls	r4, r3, #4
 8002c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	1891      	adds	r1, r2, r2
 8002c3a:	61b9      	str	r1, [r7, #24]
 8002c3c:	415b      	adcs	r3, r3
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c44:	4641      	mov	r1, r8
 8002c46:	1851      	adds	r1, r2, r1
 8002c48:	6139      	str	r1, [r7, #16]
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	414b      	adcs	r3, r1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c5c:	4659      	mov	r1, fp
 8002c5e:	00cb      	lsls	r3, r1, #3
 8002c60:	4651      	mov	r1, sl
 8002c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c66:	4651      	mov	r1, sl
 8002c68:	00ca      	lsls	r2, r1, #3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4642      	mov	r2, r8
 8002c72:	189b      	adds	r3, r3, r2
 8002c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c78:	464b      	mov	r3, r9
 8002c7a:	460a      	mov	r2, r1
 8002c7c:	eb42 0303 	adc.w	r3, r2, r3
 8002c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c9c:	4649      	mov	r1, r9
 8002c9e:	008b      	lsls	r3, r1, #2
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	008a      	lsls	r2, r1, #2
 8002caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002cae:	f7fd fa8f 	bl	80001d0 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <UART_SetConfig+0x4e4>)
 8002cba:	fba3 2301 	umull	r2, r3, r3, r1
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2264      	movs	r2, #100	; 0x64
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	1acb      	subs	r3, r1, r3
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	3332      	adds	r3, #50	; 0x32
 8002ccc:	4a33      	ldr	r2, [pc, #204]	; (8002d9c <UART_SetConfig+0x4e4>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd8:	441c      	add	r4, r3
 8002cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cde:	2200      	movs	r2, #0
 8002ce0:	673b      	str	r3, [r7, #112]	; 0x70
 8002ce2:	677a      	str	r2, [r7, #116]	; 0x74
 8002ce4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ce8:	4642      	mov	r2, r8
 8002cea:	464b      	mov	r3, r9
 8002cec:	1891      	adds	r1, r2, r2
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	415b      	adcs	r3, r3
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	1851      	adds	r1, r2, r1
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	4649      	mov	r1, r9
 8002d00:	414b      	adcs	r3, r1
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d10:	4659      	mov	r1, fp
 8002d12:	00cb      	lsls	r3, r1, #3
 8002d14:	4651      	mov	r1, sl
 8002d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1a:	4651      	mov	r1, sl
 8002d1c:	00ca      	lsls	r2, r1, #3
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	4642      	mov	r2, r8
 8002d26:	189b      	adds	r3, r3, r2
 8002d28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	eb42 0303 	adc.w	r3, r2, r3
 8002d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d3e:	667a      	str	r2, [r7, #100]	; 0x64
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	008b      	lsls	r3, r1, #2
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d56:	4641      	mov	r1, r8
 8002d58:	008a      	lsls	r2, r1, #2
 8002d5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d5e:	f7fd fa37 	bl	80001d0 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <UART_SetConfig+0x4e4>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <UART_SetConfig+0x4e4>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 020f 	and.w	r2, r3, #15
 8002d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4422      	add	r2, r4
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	bf00      	nop
 8002d92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d96:	46bd      	mov	sp, r7
 8002d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9c:	51eb851f 	.word	0x51eb851f

08002da0 <__NVIC_SetPriority>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	; (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	; (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <SysTick_Handler+0x1c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002dfc:	f001 fcfe 	bl	80047fc <xTaskGetSchedulerState>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d001      	beq.n	8002e0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e06:	f002 fae7 	bl	80053d8 <xPortSysTickHandler>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	e000e010 	.word	0xe000e010

08002e14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e18:	2100      	movs	r1, #0
 8002e1a:	f06f 0004 	mvn.w	r0, #4
 8002e1e:	f7ff ffbf 	bl	8002da0 <__NVIC_SetPriority>
#endif
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e2e:	f3ef 8305 	mrs	r3, IPSR
 8002e32:	603b      	str	r3, [r7, #0]
  return(result);
 8002e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e3a:	f06f 0305 	mvn.w	r3, #5
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	e00c      	b.n	8002e5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <osKernelInitialize+0x44>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <osKernelInitialize+0x44>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	e002      	b.n	8002e5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e5c:	687b      	ldr	r3, [r7, #4]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	200000c8 	.word	0x200000c8

08002e70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e76:	f3ef 8305 	mrs	r3, IPSR
 8002e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002e82:	f06f 0305 	mvn.w	r3, #5
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	e010      	b.n	8002eac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <osKernelStart+0x48>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d109      	bne.n	8002ea6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e92:	f7ff ffbf 	bl	8002e14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <osKernelStart+0x48>)
 8002e98:	2202      	movs	r2, #2
 8002e9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e9c:	f001 f866 	bl	8003f6c <vTaskStartScheduler>
      stat = osOK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	e002      	b.n	8002eac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002eac:	687b      	ldr	r3, [r7, #4]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200000c8 	.word	0x200000c8

08002ebc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08e      	sub	sp, #56	; 0x38
 8002ec0:	af04      	add	r7, sp, #16
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ecc:	f3ef 8305 	mrs	r3, IPSR
 8002ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8002ed2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d17e      	bne.n	8002fd6 <osThreadNew+0x11a>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07b      	beq.n	8002fd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ee2:	2318      	movs	r3, #24
 8002ee4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
 8002eee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d045      	beq.n	8002f82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <osThreadNew+0x48>
        name = attr->name;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <osThreadNew+0x6e>
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b38      	cmp	r3, #56	; 0x38
 8002f1c:	d805      	bhi.n	8002f2a <osThreadNew+0x6e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <osThreadNew+0x72>
        return (NULL);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e054      	b.n	8002fd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <osThreadNew+0xa8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b5b      	cmp	r3, #91	; 0x5b
 8002f4c:	d90a      	bls.n	8002f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <osThreadNew+0xa8>
        mem = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	e010      	b.n	8002f86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10c      	bne.n	8002f86 <osThreadNew+0xca>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d108      	bne.n	8002f86 <osThreadNew+0xca>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <osThreadNew+0xca>
          mem = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e001      	b.n	8002f86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d110      	bne.n	8002fae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f94:	9202      	str	r2, [sp, #8]
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6a3a      	ldr	r2, [r7, #32]
 8002fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fe0c 	bl	8003bc0 <xTaskCreateStatic>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	e013      	b.n	8002fd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d110      	bne.n	8002fd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	f107 0310 	add.w	r3, r7, #16
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fe57 	bl	8003c7a <xTaskCreate>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <osThreadNew+0x11a>
            hTask = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002fd6:	693b      	ldr	r3, [r7, #16]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3728      	adds	r7, #40	; 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fe8:	f3ef 8305 	mrs	r3, IPSR
 8002fec:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <osDelay+0x1c>
    stat = osErrorISR;
 8002ff4:	f06f 0305 	mvn.w	r3, #5
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e007      	b.n	800300c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 ff7c 	bl	8003f04 <vTaskDelay>
    }
  }

  return (stat);
 800300c:	68fb      	ldr	r3, [r7, #12]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a07      	ldr	r2, [pc, #28]	; (8003044 <vApplicationGetIdleTaskMemory+0x2c>)
 8003028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <vApplicationGetIdleTaskMemory+0x30>)
 800302e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	601a      	str	r2, [r3, #0]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	200000cc 	.word	0x200000cc
 8003048:	20000128 	.word	0x20000128

0800304c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a07      	ldr	r2, [pc, #28]	; (8003078 <vApplicationGetTimerTaskMemory+0x2c>)
 800305c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <vApplicationGetTimerTaskMemory+0x30>)
 8003062:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800306a:	601a      	str	r2, [r3, #0]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	20000328 	.word	0x20000328
 800307c:	20000384 	.word	0x20000384

08003080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f103 0208 	add.w	r2, r3, #8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f04f 32ff 	mov.w	r2, #4294967295
 8003098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f103 0208 	add.w	r2, r3, #8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f103 0208 	add.w	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030da:	b480      	push	{r7}
 80030dc:	b085      	sub	sp, #20
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d103      	bne.n	8003142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e00c      	b.n	800315c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3308      	adds	r3, #8
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e002      	b.n	8003150 <vListInsert+0x2e>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	429a      	cmp	r2, r3
 800315a:	d2f6      	bcs.n	800314a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	601a      	str	r2, [r3, #0]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6892      	ldr	r2, [r2, #8]
 80031aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6852      	ldr	r2, [r2, #4]
 80031b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d103      	bne.n	80031c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	1e5a      	subs	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003212:	f002 f84f 	bl	80052b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	3b01      	subs	r3, #1
 8003244:	68f9      	ldr	r1, [r7, #12]
 8003246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	441a      	add	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	22ff      	movs	r2, #255	; 0xff
 8003256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	22ff      	movs	r2, #255	; 0xff
 800325e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d114      	bne.n	8003292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01a      	beq.n	80032a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3310      	adds	r3, #16
 8003274:	4618      	mov	r0, r3
 8003276:	f001 f903 	bl	8004480 <xTaskRemoveFromEventList>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d012      	beq.n	80032a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <xQueueGenericReset+0xcc>)
 8003282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	e009      	b.n	80032a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3310      	adds	r3, #16
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fef2 	bl	8003080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3324      	adds	r3, #36	; 0x24
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff feed 	bl	8003080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032a6:	f002 f835 	bl	8005314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032aa:	2301      	movs	r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	e000ed04 	.word	0xe000ed04

080032b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08e      	sub	sp, #56	; 0x38
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <xQueueGenericCreateStatic+0x52>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <xQueueGenericCreateStatic+0x56>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <xQueueGenericCreateStatic+0x58>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	623b      	str	r3, [r7, #32]
}
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <xQueueGenericCreateStatic+0x7e>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <xQueueGenericCreateStatic+0x82>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <xQueueGenericCreateStatic+0x84>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	61fb      	str	r3, [r7, #28]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003356:	2350      	movs	r3, #80	; 0x50
 8003358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b50      	cmp	r3, #80	; 0x50
 800335e:	d00a      	beq.n	8003376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	61bb      	str	r3, [r7, #24]
}
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003376:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800338a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f805 	bl	80033a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3730      	adds	r7, #48	; 0x30
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e002      	b.n	80033ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033d6:	2101      	movs	r1, #1
 80033d8:	69b8      	ldr	r0, [r7, #24]
 80033da:	f7ff ff05 	bl	80031e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08e      	sub	sp, #56	; 0x38
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033fe:	2300      	movs	r3, #0
 8003400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <xQueueGenericSend+0x32>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d103      	bne.n	8003430 <xQueueGenericSend+0x40>
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <xQueueGenericSend+0x44>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <xQueueGenericSend+0x46>
 8003434:	2300      	movs	r3, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <xQueueGenericSend+0x60>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800344c:	bf00      	nop
 800344e:	e7fe      	b.n	800344e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d103      	bne.n	800345e <xQueueGenericSend+0x6e>
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <xQueueGenericSend+0x72>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <xQueueGenericSend+0x74>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <xQueueGenericSend+0x8e>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	623b      	str	r3, [r7, #32]
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800347e:	f001 f9bd 	bl	80047fc <xTaskGetSchedulerState>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <xQueueGenericSend+0x9e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <xQueueGenericSend+0xa2>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <xQueueGenericSend+0xa4>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <xQueueGenericSend+0xbe>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	61fb      	str	r3, [r7, #28]
}
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034ae:	f001 ff01 	bl	80052b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <xQueueGenericSend+0xd4>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d129      	bne.n	8003518 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034ca:	f000 fa0b 	bl	80038e4 <prvCopyDataToQueue>
 80034ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d010      	beq.n	80034fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	3324      	adds	r3, #36	; 0x24
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 ffcf 	bl	8004480 <xTaskRemoveFromEventList>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034e8:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <xQueueGenericSend+0x1f8>)
 80034ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	e00a      	b.n	8003510 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003500:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <xQueueGenericSend+0x1f8>)
 8003502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003510:	f001 ff00 	bl	8005314 <vPortExitCritical>
				return pdPASS;
 8003514:	2301      	movs	r3, #1
 8003516:	e063      	b.n	80035e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d103      	bne.n	8003526 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800351e:	f001 fef9 	bl	8005314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003522:	2300      	movs	r3, #0
 8003524:	e05c      	b.n	80035e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4618      	mov	r0, r3
 8003532:	f001 f809 	bl	8004548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003536:	2301      	movs	r3, #1
 8003538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800353a:	f001 feeb 	bl	8005314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800353e:	f000 fd7b 	bl	8004038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003542:	f001 feb7 	bl	80052b4 <vPortEnterCritical>
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800354c:	b25b      	sxtb	r3, r3
 800354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003552:	d103      	bne.n	800355c <xQueueGenericSend+0x16c>
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003562:	b25b      	sxtb	r3, r3
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d103      	bne.n	8003572 <xQueueGenericSend+0x182>
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003572:	f001 fecf 	bl	8005314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003576:	1d3a      	adds	r2, r7, #4
 8003578:	f107 0314 	add.w	r3, r7, #20
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fff8 	bl	8004574 <xTaskCheckForTimeOut>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d124      	bne.n	80035d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800358a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358c:	f000 faa2 	bl	8003ad4 <prvIsQueueFull>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d018      	beq.n	80035c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	3310      	adds	r3, #16
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 ff1e 	bl	80043e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035a6:	f000 fa2d 	bl	8003a04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035aa:	f000 fd53 	bl	8004054 <xTaskResumeAll>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f af7c 	bne.w	80034ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <xQueueGenericSend+0x1f8>)
 80035b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	e772      	b.n	80034ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ca:	f000 fa1b 	bl	8003a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035ce:	f000 fd41 	bl	8004054 <xTaskResumeAll>
 80035d2:	e76c      	b.n	80034ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035d6:	f000 fa15 	bl	8003a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035da:	f000 fd3b 	bl	8004054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3738      	adds	r7, #56	; 0x38
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b090      	sub	sp, #64	; 0x40
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <xQueueGenericSendFromISR+0x3c>
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <xQueueGenericSendFromISR+0x40>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <xQueueGenericSendFromISR+0x42>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d103      	bne.n	8003656 <xQueueGenericSendFromISR+0x6a>
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <xQueueGenericSendFromISR+0x6e>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <xQueueGenericSendFromISR+0x70>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	623b      	str	r3, [r7, #32]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003676:	f001 feff 	bl	8005478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800367a:	f3ef 8211 	mrs	r2, BASEPRI
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	61fa      	str	r2, [r7, #28]
 8003690:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003692:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003694:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	429a      	cmp	r2, r3
 80036a0:	d302      	bcc.n	80036a8 <xQueueGenericSendFromISR+0xbc>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d12f      	bne.n	8003708 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036be:	f000 f911 	bl	80038e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d112      	bne.n	80036f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d016      	beq.n	8003702 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fed1 	bl	8004480 <xTaskRemoveFromEventList>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00e      	beq.n	8003702 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e007      	b.n	8003702 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036f6:	3301      	adds	r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	b25a      	sxtb	r2, r3
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003702:	2301      	movs	r3, #1
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003706:	e001      	b.n	800370c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003708:	2300      	movs	r3, #0
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003716:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800371a:	4618      	mov	r0, r3
 800371c:	3740      	adds	r7, #64	; 0x40
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08c      	sub	sp, #48	; 0x30
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003730:	2300      	movs	r3, #0
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <xQueueReceive+0x30>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	623b      	str	r3, [r7, #32]
}
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <xQueueReceive+0x3e>
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <xQueueReceive+0x42>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <xQueueReceive+0x44>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xQueueReceive+0x5e>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	61fb      	str	r3, [r7, #28]
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003782:	f001 f83b 	bl	80047fc <xTaskGetSchedulerState>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <xQueueReceive+0x6e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <xQueueReceive+0x72>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <xQueueReceive+0x74>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xQueueReceive+0x8e>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	61bb      	str	r3, [r7, #24]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037b2:	f001 fd7f 	bl	80052b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01f      	beq.n	8003802 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037c6:	f000 f8f7 	bl	80039b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00f      	beq.n	80037fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	3310      	adds	r3, #16
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe4e 	bl	8004480 <xTaskRemoveFromEventList>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037ea:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <xQueueReceive+0x1bc>)
 80037ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037fa:	f001 fd8b 	bl	8005314 <vPortExitCritical>
				return pdPASS;
 80037fe:	2301      	movs	r3, #1
 8003800:	e069      	b.n	80038d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003808:	f001 fd84 	bl	8005314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800380c:	2300      	movs	r3, #0
 800380e:	e062      	b.n	80038d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003816:	f107 0310 	add.w	r3, r7, #16
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fe94 	bl	8004548 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003820:	2301      	movs	r3, #1
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003824:	f001 fd76 	bl	8005314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003828:	f000 fc06 	bl	8004038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800382c:	f001 fd42 	bl	80052b4 <vPortEnterCritical>
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003836:	b25b      	sxtb	r3, r3
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d103      	bne.n	8003846 <xQueueReceive+0x122>
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800384c:	b25b      	sxtb	r3, r3
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d103      	bne.n	800385c <xQueueReceive+0x138>
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800385c:	f001 fd5a 	bl	8005314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003860:	1d3a      	adds	r2, r7, #4
 8003862:	f107 0310 	add.w	r3, r7, #16
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fe83 	bl	8004574 <xTaskCheckForTimeOut>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d123      	bne.n	80038bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003876:	f000 f917 	bl	8003aa8 <prvIsQueueEmpty>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d017      	beq.n	80038b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	3324      	adds	r3, #36	; 0x24
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fda9 	bl	80043e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800388e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003890:	f000 f8b8 	bl	8003a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003894:	f000 fbde 	bl	8004054 <xTaskResumeAll>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d189      	bne.n	80037b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <xQueueReceive+0x1bc>)
 80038a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	e780      	b.n	80037b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b2:	f000 f8a7 	bl	8003a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038b6:	f000 fbcd 	bl	8004054 <xTaskResumeAll>
 80038ba:	e77a      	b.n	80037b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038be:	f000 f8a1 	bl	8003a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038c2:	f000 fbc7 	bl	8004054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c8:	f000 f8ee 	bl	8003aa8 <prvIsQueueEmpty>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f43f af6f 	beq.w	80037b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3730      	adds	r7, #48	; 0x30
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d14d      	bne.n	80039a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 ff92 	bl	8004838 <xTaskPriorityDisinherit>
 8003914:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	e043      	b.n	80039a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d119      	bne.n	8003958 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6858      	ldr	r0, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	461a      	mov	r2, r3
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	f001 fff8 	bl	8005924 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	441a      	add	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	d32b      	bcc.n	80039a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e026      	b.n	80039a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68d8      	ldr	r0, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	461a      	mov	r2, r3
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	f001 ffde 	bl	8005924 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	425b      	negs	r3, r3
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d207      	bcs.n	8003994 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	425b      	negs	r3, r3
 800398e:	441a      	add	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d105      	bne.n	80039a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039ae:	697b      	ldr	r3, [r7, #20]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d303      	bcc.n	80039ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68d9      	ldr	r1, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	461a      	mov	r2, r3
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	f001 ff94 	bl	8005924 <memcpy>
	}
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a0c:	f001 fc52 	bl	80052b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a18:	e011      	b.n	8003a3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3324      	adds	r3, #36	; 0x24
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fd2a 	bl	8004480 <xTaskRemoveFromEventList>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a32:	f000 fe01 	bl	8004638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dce9      	bgt.n	8003a1a <prvUnlockQueue+0x16>
 8003a46:	e000      	b.n	8003a4a <prvUnlockQueue+0x46>
					break;
 8003a48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	22ff      	movs	r2, #255	; 0xff
 8003a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a52:	f001 fc5f 	bl	8005314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a56:	f001 fc2d 	bl	80052b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a62:	e011      	b.n	8003a88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3310      	adds	r3, #16
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fd05 	bl	8004480 <xTaskRemoveFromEventList>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a7c:	f000 fddc 	bl	8004638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	dce9      	bgt.n	8003a64 <prvUnlockQueue+0x60>
 8003a90:	e000      	b.n	8003a94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a9c:	f001 fc3a 	bl	8005314 <vPortExitCritical>
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ab0:	f001 fc00 	bl	80052b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e001      	b.n	8003ac6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ac6:	f001 fc25 	bl	8005314 <vPortExitCritical>

	return xReturn;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003adc:	f001 fbea 	bl	80052b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d102      	bne.n	8003af2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003aec:	2301      	movs	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e001      	b.n	8003af6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003af6:	f001 fc0d 	bl	8005314 <vPortExitCritical>

	return xReturn;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e014      	b.n	8003b3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b14:	4a0f      	ldr	r2, [pc, #60]	; (8003b54 <vQueueAddToRegistry+0x50>)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b20:	490c      	ldr	r1, [pc, #48]	; (8003b54 <vQueueAddToRegistry+0x50>)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <vQueueAddToRegistry+0x50>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b36:	e006      	b.n	8003b46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b07      	cmp	r3, #7
 8003b42:	d9e7      	bls.n	8003b14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000784 	.word	0x20000784

08003b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b68:	f001 fba4 	bl	80052b4 <vPortEnterCritical>
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d103      	bne.n	8003b82 <vQueueWaitForMessageRestricted+0x2a>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d103      	bne.n	8003b98 <vQueueWaitForMessageRestricted+0x40>
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b98:	f001 fbbc 	bl	8005314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3324      	adds	r3, #36	; 0x24
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fc3b 	bl	8004428 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bb2:	6978      	ldr	r0, [r7, #20]
 8003bb4:	f7ff ff26 	bl	8003a04 <prvUnlockQueue>
	}
 8003bb8:	bf00      	nop
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08e      	sub	sp, #56	; 0x38
 8003bc4:	af04      	add	r7, sp, #16
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <xTaskCreateStatic+0x2a>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	623b      	str	r3, [r7, #32]
}
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <xTaskCreateStatic+0x46>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	61fb      	str	r3, [r7, #28]
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c06:	235c      	movs	r3, #92	; 0x5c
 8003c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c0e:	d00a      	beq.n	8003c26 <xTaskCreateStatic+0x66>
	__asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	61bb      	str	r3, [r7, #24]
}
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01e      	beq.n	8003c6c <xTaskCreateStatic+0xac>
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01b      	beq.n	8003c6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c46:	2300      	movs	r3, #0
 8003c48:	9303      	str	r3, [sp, #12]
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	9302      	str	r3, [sp, #8]
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f850 	bl	8003d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c66:	f000 f8dd 	bl	8003e24 <prvAddNewTaskToReadyList>
 8003c6a:	e001      	b.n	8003c70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c70:	697b      	ldr	r3, [r7, #20]
	}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3728      	adds	r7, #40	; 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b08c      	sub	sp, #48	; 0x30
 8003c7e:	af04      	add	r7, sp, #16
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fc32 	bl	80054f8 <pvPortMalloc>
 8003c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c9c:	205c      	movs	r0, #92	; 0x5c
 8003c9e:	f001 fc2b 	bl	80054f8 <pvPortMalloc>
 8003ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb0:	e005      	b.n	8003cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f001 fcec 	bl	8005690 <vPortFree>
 8003cb8:	e001      	b.n	8003cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9303      	str	r3, [sp, #12]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	9302      	str	r3, [sp, #8]
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f80e 	bl	8003d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ce8:	69f8      	ldr	r0, [r7, #28]
 8003cea:	f000 f89b 	bl	8003e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e002      	b.n	8003cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	21a5      	movs	r1, #165	; 0xa5
 8003d1e:	f001 fdd5 	bl	80058cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f023 0307 	bic.w	r3, r3, #7
 8003d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	617b      	str	r3, [r7, #20]
}
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01f      	beq.n	8003da2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	e012      	b.n	8003d8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	7819      	ldrb	r1, [r3, #0]
 8003d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	3334      	adds	r3, #52	; 0x34
 8003d78:	460a      	mov	r2, r1
 8003d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	2b0f      	cmp	r3, #15
 8003d92:	d9e9      	bls.n	8003d68 <prvInitialiseNewTask+0x64>
 8003d94:	e000      	b.n	8003d98 <prvInitialiseNewTask+0x94>
			{
				break;
 8003d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da0:	e003      	b.n	8003daa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	2b37      	cmp	r3, #55	; 0x37
 8003dae:	d901      	bls.n	8003db4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003db0:	2337      	movs	r3, #55	; 0x37
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f978 	bl	80030c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff f973 	bl	80030c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	68f9      	ldr	r1, [r7, #12]
 8003e02:	69b8      	ldr	r0, [r7, #24]
 8003e04:	f001 f928 	bl	8005058 <pxPortInitialiseStack>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e1a:	bf00      	nop
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e2c:	f001 fa42 	bl	80052b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e30:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <prvAddNewTaskToReadyList+0xc4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	4a2c      	ldr	r2, [pc, #176]	; (8003ee8 <prvAddNewTaskToReadyList+0xc4>)
 8003e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <prvAddNewTaskToReadyList+0xc8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e42:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <prvAddNewTaskToReadyList+0xc8>)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e48:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <prvAddNewTaskToReadyList+0xc4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d110      	bne.n	8003e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e50:	f000 fc16 	bl	8004680 <prvInitialiseTaskLists>
 8003e54:	e00d      	b.n	8003e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e56:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <prvAddNewTaskToReadyList+0xcc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e5e:	4b23      	ldr	r3, [pc, #140]	; (8003eec <prvAddNewTaskToReadyList+0xc8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d802      	bhi.n	8003e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <prvAddNewTaskToReadyList+0xc8>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e72:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <prvAddNewTaskToReadyList+0xd0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <prvAddNewTaskToReadyList+0xd0>)
 8003e7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <prvAddNewTaskToReadyList+0xd0>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <prvAddNewTaskToReadyList+0xd4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d903      	bls.n	8003e98 <prvAddNewTaskToReadyList+0x74>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <prvAddNewTaskToReadyList+0xd4>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4a15      	ldr	r2, [pc, #84]	; (8003efc <prvAddNewTaskToReadyList+0xd8>)
 8003ea6:	441a      	add	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f7ff f913 	bl	80030da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003eb4:	f001 fa2e 	bl	8005314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003eb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <prvAddNewTaskToReadyList+0xcc>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00e      	beq.n	8003ede <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <prvAddNewTaskToReadyList+0xc8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d207      	bcs.n	8003ede <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <prvAddNewTaskToReadyList+0xdc>)
 8003ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000c98 	.word	0x20000c98
 8003eec:	200007c4 	.word	0x200007c4
 8003ef0:	20000ca4 	.word	0x20000ca4
 8003ef4:	20000cb4 	.word	0x20000cb4
 8003ef8:	20000ca0 	.word	0x20000ca0
 8003efc:	200007c8 	.word	0x200007c8
 8003f00:	e000ed04 	.word	0xe000ed04

08003f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <vTaskDelay+0x60>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <vTaskDelay+0x30>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60bb      	str	r3, [r7, #8]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f34:	f000 f880 	bl	8004038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f38:	2100      	movs	r1, #0
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fcea 	bl	8004914 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f40:	f000 f888 	bl	8004054 <xTaskResumeAll>
 8003f44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d107      	bne.n	8003f5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <vTaskDelay+0x64>)
 8003f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000cc0 	.word	0x20000cc0
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f7a:	463a      	mov	r2, r7
 8003f7c:	1d39      	adds	r1, r7, #4
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f848 	bl	8003018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f88:	6839      	ldr	r1, [r7, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	9202      	str	r2, [sp, #8]
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	2300      	movs	r3, #0
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2300      	movs	r3, #0
 8003f98:	460a      	mov	r2, r1
 8003f9a:	4921      	ldr	r1, [pc, #132]	; (8004020 <vTaskStartScheduler+0xb4>)
 8003f9c:	4821      	ldr	r0, [pc, #132]	; (8004024 <vTaskStartScheduler+0xb8>)
 8003f9e:	f7ff fe0f 	bl	8003bc0 <xTaskCreateStatic>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a20      	ldr	r2, [pc, #128]	; (8004028 <vTaskStartScheduler+0xbc>)
 8003fa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <vTaskStartScheduler+0xbc>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e001      	b.n	8003fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d102      	bne.n	8003fc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fc0:	f000 fcfc 	bl	80049bc <xTimerCreateTimerTask>
 8003fc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d116      	bne.n	8003ffa <vTaskStartScheduler+0x8e>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	613b      	str	r3, [r7, #16]
}
 8003fde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <vTaskStartScheduler+0xc0>)
 8003fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <vTaskStartScheduler+0xc4>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <vTaskStartScheduler+0xc8>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ff4:	f001 f8bc 	bl	8005170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ff8:	e00e      	b.n	8004018 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d10a      	bne.n	8004018 <vTaskStartScheduler+0xac>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	60fb      	str	r3, [r7, #12]
}
 8004014:	bf00      	nop
 8004016:	e7fe      	b.n	8004016 <vTaskStartScheduler+0xaa>
}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	08005970 	.word	0x08005970
 8004024:	08004651 	.word	0x08004651
 8004028:	20000cbc 	.word	0x20000cbc
 800402c:	20000cb8 	.word	0x20000cb8
 8004030:	20000ca4 	.word	0x20000ca4
 8004034:	20000c9c 	.word	0x20000c9c

08004038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <vTaskSuspendAll+0x18>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	4a03      	ldr	r2, [pc, #12]	; (8004050 <vTaskSuspendAll+0x18>)
 8004044:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004046:	bf00      	nop
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	20000cc0 	.word	0x20000cc0

08004054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004062:	4b42      	ldr	r3, [pc, #264]	; (800416c <xTaskResumeAll+0x118>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <xTaskResumeAll+0x2c>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	603b      	str	r3, [r7, #0]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004080:	f001 f918 	bl	80052b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004084:	4b39      	ldr	r3, [pc, #228]	; (800416c <xTaskResumeAll+0x118>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3b01      	subs	r3, #1
 800408a:	4a38      	ldr	r2, [pc, #224]	; (800416c <xTaskResumeAll+0x118>)
 800408c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800408e:	4b37      	ldr	r3, [pc, #220]	; (800416c <xTaskResumeAll+0x118>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d162      	bne.n	800415c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004096:	4b36      	ldr	r3, [pc, #216]	; (8004170 <xTaskResumeAll+0x11c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d05e      	beq.n	800415c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800409e:	e02f      	b.n	8004100 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a0:	4b34      	ldr	r3, [pc, #208]	; (8004174 <xTaskResumeAll+0x120>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3318      	adds	r3, #24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff f871 	bl	8003194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff f86c 	bl	8003194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <xTaskResumeAll+0x124>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d903      	bls.n	80040d0 <xTaskResumeAll+0x7c>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	4a2a      	ldr	r2, [pc, #168]	; (8004178 <xTaskResumeAll+0x124>)
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4a27      	ldr	r2, [pc, #156]	; (800417c <xTaskResumeAll+0x128>)
 80040de:	441a      	add	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7fe fff7 	bl	80030da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <xTaskResumeAll+0x12c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80040fa:	4b22      	ldr	r3, [pc, #136]	; (8004184 <xTaskResumeAll+0x130>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004100:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <xTaskResumeAll+0x120>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1cb      	bne.n	80040a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800410e:	f000 fb55 	bl	80047bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <xTaskResumeAll+0x134>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800411e:	f000 f847 	bl	80041b0 <xTaskIncrementTick>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004128:	4b16      	ldr	r3, [pc, #88]	; (8004184 <xTaskResumeAll+0x130>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3b01      	subs	r3, #1
 8004132:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f1      	bne.n	800411e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <xTaskResumeAll+0x134>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004140:	4b10      	ldr	r3, [pc, #64]	; (8004184 <xTaskResumeAll+0x130>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <xTaskResumeAll+0x138>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800415c:	f001 f8da 	bl	8005314 <vPortExitCritical>

	return xAlreadyYielded;
 8004160:	68bb      	ldr	r3, [r7, #8]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000cc0 	.word	0x20000cc0
 8004170:	20000c98 	.word	0x20000c98
 8004174:	20000c58 	.word	0x20000c58
 8004178:	20000ca0 	.word	0x20000ca0
 800417c:	200007c8 	.word	0x200007c8
 8004180:	200007c4 	.word	0x200007c4
 8004184:	20000cac 	.word	0x20000cac
 8004188:	20000ca8 	.word	0x20000ca8
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <xTaskGetTickCount+0x1c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800419c:	687b      	ldr	r3, [r7, #4]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000c9c 	.word	0x20000c9c

080041b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ba:	4b4f      	ldr	r3, [pc, #316]	; (80042f8 <xTaskIncrementTick+0x148>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 808f 	bne.w	80042e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041c4:	4b4d      	ldr	r3, [pc, #308]	; (80042fc <xTaskIncrementTick+0x14c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041cc:	4a4b      	ldr	r2, [pc, #300]	; (80042fc <xTaskIncrementTick+0x14c>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d120      	bne.n	800421a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041d8:	4b49      	ldr	r3, [pc, #292]	; (8004300 <xTaskIncrementTick+0x150>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	603b      	str	r3, [r7, #0]
}
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <xTaskIncrementTick+0x46>
 80041f8:	4b41      	ldr	r3, [pc, #260]	; (8004300 <xTaskIncrementTick+0x150>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b41      	ldr	r3, [pc, #260]	; (8004304 <xTaskIncrementTick+0x154>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3f      	ldr	r2, [pc, #252]	; (8004300 <xTaskIncrementTick+0x150>)
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4a3f      	ldr	r2, [pc, #252]	; (8004304 <xTaskIncrementTick+0x154>)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <xTaskIncrementTick+0x158>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3301      	adds	r3, #1
 8004212:	4a3d      	ldr	r2, [pc, #244]	; (8004308 <xTaskIncrementTick+0x158>)
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	f000 fad1 	bl	80047bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800421a:	4b3c      	ldr	r3, [pc, #240]	; (800430c <xTaskIncrementTick+0x15c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d349      	bcc.n	80042b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004224:	4b36      	ldr	r3, [pc, #216]	; (8004300 <xTaskIncrementTick+0x150>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <xTaskIncrementTick+0x15c>)
 8004230:	f04f 32ff 	mov.w	r2, #4294967295
 8004234:	601a      	str	r2, [r3, #0]
					break;
 8004236:	e03f      	b.n	80042b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004238:	4b31      	ldr	r3, [pc, #196]	; (8004300 <xTaskIncrementTick+0x150>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d203      	bcs.n	8004258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004250:	4a2e      	ldr	r2, [pc, #184]	; (800430c <xTaskIncrementTick+0x15c>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004256:	e02f      	b.n	80042b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3304      	adds	r3, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe ff99 	bl	8003194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3318      	adds	r3, #24
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe ff90 	bl	8003194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	4b25      	ldr	r3, [pc, #148]	; (8004310 <xTaskIncrementTick+0x160>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <xTaskIncrementTick+0xd8>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4a22      	ldr	r2, [pc, #136]	; (8004310 <xTaskIncrementTick+0x160>)
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <xTaskIncrementTick+0x164>)
 8004296:	441a      	add	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3304      	adds	r3, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7fe ff1b 	bl	80030da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <xTaskIncrementTick+0x168>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d3b8      	bcc.n	8004224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042b6:	e7b5      	b.n	8004224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042b8:	4b17      	ldr	r3, [pc, #92]	; (8004318 <xTaskIncrementTick+0x168>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	4915      	ldr	r1, [pc, #84]	; (8004314 <xTaskIncrementTick+0x164>)
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d901      	bls.n	80042d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <xTaskIncrementTick+0x16c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e004      	b.n	80042ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042e2:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <xTaskIncrementTick+0x170>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <xTaskIncrementTick+0x170>)
 80042ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042ec:	697b      	ldr	r3, [r7, #20]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000cc0 	.word	0x20000cc0
 80042fc:	20000c9c 	.word	0x20000c9c
 8004300:	20000c50 	.word	0x20000c50
 8004304:	20000c54 	.word	0x20000c54
 8004308:	20000cb0 	.word	0x20000cb0
 800430c:	20000cb8 	.word	0x20000cb8
 8004310:	20000ca0 	.word	0x20000ca0
 8004314:	200007c8 	.word	0x200007c8
 8004318:	200007c4 	.word	0x200007c4
 800431c:	20000cac 	.word	0x20000cac
 8004320:	20000ca8 	.word	0x20000ca8

08004324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800432a:	4b28      	ldr	r3, [pc, #160]	; (80043cc <vTaskSwitchContext+0xa8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004332:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <vTaskSwitchContext+0xac>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004338:	e041      	b.n	80043be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800433a:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <vTaskSwitchContext+0xac>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004340:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <vTaskSwitchContext+0xb0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	e010      	b.n	800436a <vTaskSwitchContext+0x46>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <vTaskSwitchContext+0x40>
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	607b      	str	r3, [r7, #4]
}
 8004360:	bf00      	nop
 8004362:	e7fe      	b.n	8004362 <vTaskSwitchContext+0x3e>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3b01      	subs	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	491b      	ldr	r1, [pc, #108]	; (80043d8 <vTaskSwitchContext+0xb4>)
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0e4      	beq.n	8004348 <vTaskSwitchContext+0x24>
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <vTaskSwitchContext+0xb4>)
 800438a:	4413      	add	r3, r2
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	3308      	adds	r3, #8
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d104      	bne.n	80043ae <vTaskSwitchContext+0x8a>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a09      	ldr	r2, [pc, #36]	; (80043dc <vTaskSwitchContext+0xb8>)
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <vTaskSwitchContext+0xb0>)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6013      	str	r3, [r2, #0]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000cc0 	.word	0x20000cc0
 80043d0:	20000cac 	.word	0x20000cac
 80043d4:	20000ca0 	.word	0x20000ca0
 80043d8:	200007c8 	.word	0x200007c8
 80043dc:	200007c4 	.word	0x200007c4

080043e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	60fb      	str	r3, [r7, #12]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <vTaskPlaceOnEventList+0x44>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3318      	adds	r3, #24
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fe fe87 	bl	8003122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004414:	2101      	movs	r1, #1
 8004416:	6838      	ldr	r0, [r7, #0]
 8004418:	f000 fa7c 	bl	8004914 <prvAddCurrentTaskToDelayedList>
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200007c4 	.word	0x200007c4

08004428 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	617b      	str	r3, [r7, #20]
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <vTaskPlaceOnEventListRestricted+0x54>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3318      	adds	r3, #24
 8004456:	4619      	mov	r1, r3
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7fe fe3e 	bl	80030da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	68b8      	ldr	r0, [r7, #8]
 800446e:	f000 fa51 	bl	8004914 <prvAddCurrentTaskToDelayedList>
	}
 8004472:	bf00      	nop
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	200007c4 	.word	0x200007c4

08004480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60fb      	str	r3, [r7, #12]
}
 80044a8:	bf00      	nop
 80044aa:	e7fe      	b.n	80044aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3318      	adds	r3, #24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fe6f 	bl	8003194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b6:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <xTaskRemoveFromEventList+0xb0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d11d      	bne.n	80044fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fe66 	bl	8003194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <xTaskRemoveFromEventList+0xb4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d903      	bls.n	80044dc <xTaskRemoveFromEventList+0x5c>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a16      	ldr	r2, [pc, #88]	; (8004534 <xTaskRemoveFromEventList+0xb4>)
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4a13      	ldr	r2, [pc, #76]	; (8004538 <xTaskRemoveFromEventList+0xb8>)
 80044ea:	441a      	add	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f7fe fdf1 	bl	80030da <vListInsertEnd>
 80044f8:	e005      	b.n	8004506 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3318      	adds	r3, #24
 80044fe:	4619      	mov	r1, r3
 8004500:	480e      	ldr	r0, [pc, #56]	; (800453c <xTaskRemoveFromEventList+0xbc>)
 8004502:	f7fe fdea 	bl	80030da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <xTaskRemoveFromEventList+0xc0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	429a      	cmp	r2, r3
 8004512:	d905      	bls.n	8004520 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <xTaskRemoveFromEventList+0xc4>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e001      	b.n	8004524 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004524:	697b      	ldr	r3, [r7, #20]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000cc0 	.word	0x20000cc0
 8004534:	20000ca0 	.word	0x20000ca0
 8004538:	200007c8 	.word	0x200007c8
 800453c:	20000c58 	.word	0x20000c58
 8004540:	200007c4 	.word	0x200007c4
 8004544:	20000cac 	.word	0x20000cac

08004548 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <vTaskInternalSetTimeOutState+0x24>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <vTaskInternalSetTimeOutState+0x28>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	605a      	str	r2, [r3, #4]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20000cb0 	.word	0x20000cb0
 8004570:	20000c9c 	.word	0x20000c9c

08004574 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	613b      	str	r3, [r7, #16]
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045b6:	f000 fe7d 	bl	80052b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <xTaskCheckForTimeOut+0xbc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d102      	bne.n	80045da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	e023      	b.n	8004622 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <xTaskCheckForTimeOut+0xc0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d007      	beq.n	80045f6 <xTaskCheckForTimeOut+0x82>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d302      	bcc.n	80045f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e015      	b.n	8004622 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d20b      	bcs.n	8004618 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ff9b 	bl	8004548 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
 8004616:	e004      	b.n	8004622 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800461e:	2301      	movs	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004622:	f000 fe77 	bl	8005314 <vPortExitCritical>

	return xReturn;
 8004626:	69fb      	ldr	r3, [r7, #28]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000c9c 	.word	0x20000c9c
 8004634:	20000cb0 	.word	0x20000cb0

08004638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <vTaskMissedYield+0x14>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]
}
 8004642:	bf00      	nop
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000cac 	.word	0x20000cac

08004650 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004658:	f000 f852 	bl	8004700 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <prvIdleTask+0x28>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d9f9      	bls.n	8004658 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <prvIdleTask+0x2c>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004674:	e7f0      	b.n	8004658 <prvIdleTask+0x8>
 8004676:	bf00      	nop
 8004678:	200007c8 	.word	0x200007c8
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	e00c      	b.n	80046a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <prvInitialiseTaskLists+0x60>)
 8004698:	4413      	add	r3, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fcf0 	bl	8003080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3301      	adds	r3, #1
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b37      	cmp	r3, #55	; 0x37
 80046aa:	d9ef      	bls.n	800468c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046ac:	480d      	ldr	r0, [pc, #52]	; (80046e4 <prvInitialiseTaskLists+0x64>)
 80046ae:	f7fe fce7 	bl	8003080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046b2:	480d      	ldr	r0, [pc, #52]	; (80046e8 <prvInitialiseTaskLists+0x68>)
 80046b4:	f7fe fce4 	bl	8003080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046b8:	480c      	ldr	r0, [pc, #48]	; (80046ec <prvInitialiseTaskLists+0x6c>)
 80046ba:	f7fe fce1 	bl	8003080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046be:	480c      	ldr	r0, [pc, #48]	; (80046f0 <prvInitialiseTaskLists+0x70>)
 80046c0:	f7fe fcde 	bl	8003080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046c4:	480b      	ldr	r0, [pc, #44]	; (80046f4 <prvInitialiseTaskLists+0x74>)
 80046c6:	f7fe fcdb 	bl	8003080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <prvInitialiseTaskLists+0x78>)
 80046cc:	4a05      	ldr	r2, [pc, #20]	; (80046e4 <prvInitialiseTaskLists+0x64>)
 80046ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvInitialiseTaskLists+0x7c>)
 80046d2:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <prvInitialiseTaskLists+0x68>)
 80046d4:	601a      	str	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	200007c8 	.word	0x200007c8
 80046e4:	20000c28 	.word	0x20000c28
 80046e8:	20000c3c 	.word	0x20000c3c
 80046ec:	20000c58 	.word	0x20000c58
 80046f0:	20000c6c 	.word	0x20000c6c
 80046f4:	20000c84 	.word	0x20000c84
 80046f8:	20000c50 	.word	0x20000c50
 80046fc:	20000c54 	.word	0x20000c54

08004700 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004706:	e019      	b.n	800473c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004708:	f000 fdd4 	bl	80052b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <prvCheckTasksWaitingTermination+0x50>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	4618      	mov	r0, r3
 800471a:	f7fe fd3b 	bl	8003194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <prvCheckTasksWaitingTermination+0x54>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3b01      	subs	r3, #1
 8004724:	4a0b      	ldr	r2, [pc, #44]	; (8004754 <prvCheckTasksWaitingTermination+0x54>)
 8004726:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004728:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <prvCheckTasksWaitingTermination+0x58>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <prvCheckTasksWaitingTermination+0x58>)
 8004730:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004732:	f000 fdef 	bl	8005314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f810 	bl	800475c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <prvCheckTasksWaitingTermination+0x58>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e1      	bne.n	8004708 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000c6c 	.word	0x20000c6c
 8004754:	20000c98 	.word	0x20000c98
 8004758:	20000c80 	.word	0x20000c80

0800475c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800476a:	2b00      	cmp	r3, #0
 800476c:	d108      	bne.n	8004780 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	4618      	mov	r0, r3
 8004774:	f000 ff8c 	bl	8005690 <vPortFree>
				vPortFree( pxTCB );
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 ff89 	bl	8005690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800477e:	e018      	b.n	80047b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004786:	2b01      	cmp	r3, #1
 8004788:	d103      	bne.n	8004792 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 ff80 	bl	8005690 <vPortFree>
	}
 8004790:	e00f      	b.n	80047b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004798:	2b02      	cmp	r3, #2
 800479a:	d00a      	beq.n	80047b2 <prvDeleteTCB+0x56>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	60fb      	str	r3, [r7, #12]
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <prvDeleteTCB+0x54>
	}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <prvResetNextTaskUnblockTime+0x38>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <prvResetNextTaskUnblockTime+0x3c>)
 80047ce:	f04f 32ff 	mov.w	r2, #4294967295
 80047d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047d4:	e008      	b.n	80047e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d6:	4b07      	ldr	r3, [pc, #28]	; (80047f4 <prvResetNextTaskUnblockTime+0x38>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <prvResetNextTaskUnblockTime+0x3c>)
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	20000c50 	.word	0x20000c50
 80047f8:	20000cb8 	.word	0x20000cb8

080047fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <xTaskGetSchedulerState+0x34>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800480a:	2301      	movs	r3, #1
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	e008      	b.n	8004822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <xTaskGetSchedulerState+0x38>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004818:	2302      	movs	r3, #2
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e001      	b.n	8004822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800481e:	2300      	movs	r3, #0
 8004820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004822:	687b      	ldr	r3, [r7, #4]
	}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	20000ca4 	.word	0x20000ca4
 8004834:	20000cc0 	.word	0x20000cc0

08004838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d056      	beq.n	80048fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800484e:	4b2e      	ldr	r3, [pc, #184]	; (8004908 <xTaskPriorityDisinherit+0xd0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	429a      	cmp	r2, r3
 8004856:	d00a      	beq.n	800486e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60fb      	str	r3, [r7, #12]
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	60bb      	str	r3, [r7, #8]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	1e5a      	subs	r2, r3, #1
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d02c      	beq.n	80048fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d128      	bne.n	80048fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	3304      	adds	r3, #4
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fc70 	bl	8003194 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <xTaskPriorityDisinherit+0xd4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d903      	bls.n	80048dc <xTaskPriorityDisinherit+0xa4>
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4a0c      	ldr	r2, [pc, #48]	; (800490c <xTaskPriorityDisinherit+0xd4>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4a09      	ldr	r2, [pc, #36]	; (8004910 <xTaskPriorityDisinherit+0xd8>)
 80048ea:	441a      	add	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fe fbf1 	bl	80030da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048fc:	697b      	ldr	r3, [r7, #20]
	}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200007c4 	.word	0x200007c4
 800490c:	20000ca0 	.word	0x20000ca0
 8004910:	200007c8 	.word	0x200007c8

08004914 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004924:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3304      	adds	r3, #4
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fc32 	bl	8003194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d10a      	bne.n	800494e <prvAddCurrentTaskToDelayedList+0x3a>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493e:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4819      	ldr	r0, [pc, #100]	; (80049ac <prvAddCurrentTaskToDelayedList+0x98>)
 8004948:	f7fe fbc7 	bl	80030da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800494c:	e026      	b.n	800499c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4413      	add	r3, r2
 8004954:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	429a      	cmp	r2, r3
 8004964:	d209      	bcs.n	800497a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7fe fbd5 	bl	8003122 <vListInsert>
}
 8004978:	e010      	b.n	800499c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800497a:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f7fe fbcb 	bl	8003122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	429a      	cmp	r2, r3
 8004994:	d202      	bcs.n	800499c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004996:	4a08      	ldr	r2, [pc, #32]	; (80049b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6013      	str	r3, [r2, #0]
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000c9c 	.word	0x20000c9c
 80049a8:	200007c4 	.word	0x200007c4
 80049ac:	20000c84 	.word	0x20000c84
 80049b0:	20000c54 	.word	0x20000c54
 80049b4:	20000c50 	.word	0x20000c50
 80049b8:	20000cb8 	.word	0x20000cb8

080049bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	; 0x28
 80049c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049c6:	f000 fb07 	bl	8004fd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049ca:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <xTimerCreateTimerTask+0x80>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d021      	beq.n	8004a16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049da:	1d3a      	adds	r2, r7, #4
 80049dc:	f107 0108 	add.w	r1, r7, #8
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe fb31 	bl	800304c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	9202      	str	r2, [sp, #8]
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	2302      	movs	r3, #2
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	460a      	mov	r2, r1
 80049fc:	4910      	ldr	r1, [pc, #64]	; (8004a40 <xTimerCreateTimerTask+0x84>)
 80049fe:	4811      	ldr	r0, [pc, #68]	; (8004a44 <xTimerCreateTimerTask+0x88>)
 8004a00:	f7ff f8de 	bl	8003bc0 <xTaskCreateStatic>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4a10      	ldr	r2, [pc, #64]	; (8004a48 <xTimerCreateTimerTask+0x8c>)
 8004a08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a0a:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <xTimerCreateTimerTask+0x8c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a12:	2301      	movs	r3, #1
 8004a14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	613b      	str	r3, [r7, #16]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a32:	697b      	ldr	r3, [r7, #20]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000cf4 	.word	0x20000cf4
 8004a40:	08005978 	.word	0x08005978
 8004a44:	08004b81 	.word	0x08004b81
 8004a48:	20000cf8 	.word	0x20000cf8

08004a4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	623b      	str	r3, [r7, #32]
}
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <xTimerGenericCommand+0x98>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d02a      	beq.n	8004ad8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b05      	cmp	r3, #5
 8004a92:	dc18      	bgt.n	8004ac6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a94:	f7ff feb2 	bl	80047fc <xTaskGetSchedulerState>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d109      	bne.n	8004ab2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <xTimerGenericCommand+0x98>)
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	f107 0110 	add.w	r1, r7, #16
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aaa:	f7fe fca1 	bl	80033f0 <xQueueGenericSend>
 8004aae:	6278      	str	r0, [r7, #36]	; 0x24
 8004ab0:	e012      	b.n	8004ad8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <xTimerGenericCommand+0x98>)
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	f107 0110 	add.w	r1, r7, #16
 8004aba:	2300      	movs	r3, #0
 8004abc:	2200      	movs	r2, #0
 8004abe:	f7fe fc97 	bl	80033f0 <xQueueGenericSend>
 8004ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ac4:	e008      	b.n	8004ad8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <xTimerGenericCommand+0x98>)
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	f107 0110 	add.w	r1, r7, #16
 8004ace:	2300      	movs	r3, #0
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	f7fe fd8b 	bl	80035ec <xQueueGenericSendFromISR>
 8004ad6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3728      	adds	r7, #40	; 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000cf4 	.word	0x20000cf4

08004ae8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <prvProcessExpiredTimer+0x94>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fe fb47 	bl	8003194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d022      	beq.n	8004b5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	18d1      	adds	r1, r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	6978      	ldr	r0, [r7, #20]
 8004b22:	f000 f8d1 	bl	8004cc8 <prvInsertTimerInActiveList>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01f      	beq.n	8004b6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2300      	movs	r3, #0
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	2100      	movs	r1, #0
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f7ff ff88 	bl	8004a4c <xTimerGenericCommand>
 8004b3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d113      	bne.n	8004b6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	60fb      	str	r3, [r7, #12]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	6978      	ldr	r0, [r7, #20]
 8004b72:	4798      	blx	r3
}
 8004b74:	bf00      	nop
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000cec 	.word	0x20000cec

08004b80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b88:	f107 0308 	add.w	r3, r7, #8
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f857 	bl	8004c40 <prvGetNextExpireTime>
 8004b92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4619      	mov	r1, r3
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f803 	bl	8004ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b9e:	f000 f8d5 	bl	8004d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ba2:	e7f1      	b.n	8004b88 <prvTimerTask+0x8>

08004ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bae:	f7ff fa43 	bl	8004038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f866 	bl	8004c88 <prvSampleTimeNow>
 8004bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d130      	bne.n	8004c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10a      	bne.n	8004be0 <prvProcessTimerOrBlockTask+0x3c>
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d806      	bhi.n	8004be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bd2:	f7ff fa3f 	bl	8004054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff85 	bl	8004ae8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bde:	e024      	b.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <prvProcessTimerOrBlockTask+0x90>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <prvProcessTimerOrBlockTask+0x50>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <prvProcessTimerOrBlockTask+0x52>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <prvProcessTimerOrBlockTask+0x94>)
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	4619      	mov	r1, r3
 8004c06:	f7fe ffa7 	bl	8003b58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c0a:	f7ff fa23 	bl	8004054 <xTaskResumeAll>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <prvProcessTimerOrBlockTask+0x98>)
 8004c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
}
 8004c24:	e001      	b.n	8004c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c26:	f7ff fa15 	bl	8004054 <xTaskResumeAll>
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000cf0 	.word	0x20000cf0
 8004c38:	20000cf4 	.word	0x20000cf4
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <prvGetNextExpireTime+0x44>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <prvGetNextExpireTime+0x16>
 8004c52:	2201      	movs	r2, #1
 8004c54:	e000      	b.n	8004c58 <prvGetNextExpireTime+0x18>
 8004c56:	2200      	movs	r2, #0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <prvGetNextExpireTime+0x44>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e001      	b.n	8004c74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c74:	68fb      	ldr	r3, [r7, #12]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000cec 	.word	0x20000cec

08004c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c90:	f7ff fa7e 	bl	8004190 <xTaskGetTickCount>
 8004c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <prvSampleTimeNow+0x3c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d205      	bcs.n	8004cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ca0:	f000 f936 	bl	8004f10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cb2:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <prvSampleTimeNow+0x3c>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000cfc 	.word	0x20000cfc

08004cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d812      	bhi.n	8004d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e01b      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <prvInsertTimerInActiveList+0x7c>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fe fa08 	bl	8003122 <vListInsert>
 8004d12:	e012      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d206      	bcs.n	8004d2a <prvInsertTimerInActiveList+0x62>
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e007      	b.n	8004d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <prvInsertTimerInActiveList+0x80>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7fe f9f4 	bl	8003122 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d3a:	697b      	ldr	r3, [r7, #20]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000cf0 	.word	0x20000cf0
 8004d48:	20000cec 	.word	0x20000cec

08004d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	; 0x38
 8004d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d52:	e0ca      	b.n	8004eea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da18      	bge.n	8004d8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d5a:	1d3b      	adds	r3, r7, #4
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	61fb      	str	r3, [r7, #28]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d82:	6850      	ldr	r0, [r2, #4]
 8004d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d86:	6892      	ldr	r2, [r2, #8]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f2c0 80ab 	blt.w	8004eea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	3304      	adds	r3, #4
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe f9f5 	bl	8003194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004daa:	463b      	mov	r3, r7
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff ff6b 	bl	8004c88 <prvSampleTimeNow>
 8004db2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b09      	cmp	r3, #9
 8004db8:	f200 8096 	bhi.w	8004ee8 <prvProcessReceivedCommands+0x19c>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <prvProcessReceivedCommands+0x78>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004ded 	.word	0x08004ded
 8004dd0:	08004e61 	.word	0x08004e61
 8004dd4:	08004e75 	.word	0x08004e75
 8004dd8:	08004ebf 	.word	0x08004ebf
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004ded 	.word	0x08004ded
 8004de4:	08004e61 	.word	0x08004e61
 8004de8:	08004e75 	.word	0x08004e75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	18d1      	adds	r1, r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0c:	f7ff ff5c 	bl	8004cc8 <prvInsertTimerInActiveList>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d069      	beq.n	8004eea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d05e      	beq.n	8004eea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	441a      	add	r2, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e3e:	f7ff fe05 	bl	8004a4c <xTimerGenericCommand>
 8004e42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d14f      	bne.n	8004eea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	61bb      	str	r3, [r7, #24]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e66:	f023 0301 	bic.w	r3, r3, #1
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e72:	e03a      	b.n	8004eea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	617b      	str	r3, [r7, #20]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	18d1      	adds	r1, r2, r3
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb8:	f7ff ff06 	bl	8004cc8 <prvInsertTimerInActiveList>
					break;
 8004ebc:	e015      	b.n	8004eea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d103      	bne.n	8004ed4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ece:	f000 fbdf 	bl	8005690 <vPortFree>
 8004ed2:	e00a      	b.n	8004eea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ee6:	e000      	b.n	8004eea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004ee8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <prvProcessReceivedCommands+0x1c0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	1d39      	adds	r1, r7, #4
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fc16 	bl	8003724 <xQueueReceive>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f47f af2a 	bne.w	8004d54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	3730      	adds	r7, #48	; 0x30
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000cf4 	.word	0x20000cf4

08004f10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f16:	e048      	b.n	8004faa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f18:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <prvSwitchTimerLists+0xc0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f22:	4b2b      	ldr	r3, [pc, #172]	; (8004fd0 <prvSwitchTimerLists+0xc0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe f92f 	bl	8003194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02e      	beq.n	8004faa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d90e      	bls.n	8004f7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f6a:	4b19      	ldr	r3, [pc, #100]	; (8004fd0 <prvSwitchTimerLists+0xc0>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f7fe f8d4 	bl	8003122 <vListInsert>
 8004f7a:	e016      	b.n	8004faa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	2100      	movs	r1, #0
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7ff fd60 	bl	8004a4c <xTimerGenericCommand>
 8004f8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	603b      	str	r3, [r7, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004faa:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <prvSwitchTimerLists+0xc0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1b1      	bne.n	8004f18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fb4:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <prvSwitchTimerLists+0xc0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <prvSwitchTimerLists+0xc4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <prvSwitchTimerLists+0xc0>)
 8004fc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fc2:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <prvSwitchTimerLists+0xc4>)
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6013      	str	r3, [r2, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000cec 	.word	0x20000cec
 8004fd4:	20000cf0 	.word	0x20000cf0

08004fd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fde:	f000 f969 	bl	80052b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <prvCheckForValidListAndQueue+0x60>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d120      	bne.n	800502c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fea:	4814      	ldr	r0, [pc, #80]	; (800503c <prvCheckForValidListAndQueue+0x64>)
 8004fec:	f7fe f848 	bl	8003080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ff0:	4813      	ldr	r0, [pc, #76]	; (8005040 <prvCheckForValidListAndQueue+0x68>)
 8004ff2:	f7fe f845 	bl	8003080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ff6:	4b13      	ldr	r3, [pc, #76]	; (8005044 <prvCheckForValidListAndQueue+0x6c>)
 8004ff8:	4a10      	ldr	r2, [pc, #64]	; (800503c <prvCheckForValidListAndQueue+0x64>)
 8004ffa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ffc:	4b12      	ldr	r3, [pc, #72]	; (8005048 <prvCheckForValidListAndQueue+0x70>)
 8004ffe:	4a10      	ldr	r2, [pc, #64]	; (8005040 <prvCheckForValidListAndQueue+0x68>)
 8005000:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005002:	2300      	movs	r3, #0
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	4b11      	ldr	r3, [pc, #68]	; (800504c <prvCheckForValidListAndQueue+0x74>)
 8005008:	4a11      	ldr	r2, [pc, #68]	; (8005050 <prvCheckForValidListAndQueue+0x78>)
 800500a:	2110      	movs	r1, #16
 800500c:	200a      	movs	r0, #10
 800500e:	f7fe f953 	bl	80032b8 <xQueueGenericCreateStatic>
 8005012:	4603      	mov	r3, r0
 8005014:	4a08      	ldr	r2, [pc, #32]	; (8005038 <prvCheckForValidListAndQueue+0x60>)
 8005016:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005018:	4b07      	ldr	r3, [pc, #28]	; (8005038 <prvCheckForValidListAndQueue+0x60>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <prvCheckForValidListAndQueue+0x60>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	490b      	ldr	r1, [pc, #44]	; (8005054 <prvCheckForValidListAndQueue+0x7c>)
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fd6c 	bl	8003b04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800502c:	f000 f972 	bl	8005314 <vPortExitCritical>
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000cf4 	.word	0x20000cf4
 800503c:	20000cc4 	.word	0x20000cc4
 8005040:	20000cd8 	.word	0x20000cd8
 8005044:	20000cec 	.word	0x20000cec
 8005048:	20000cf0 	.word	0x20000cf0
 800504c:	20000da0 	.word	0x20000da0
 8005050:	20000d00 	.word	0x20000d00
 8005054:	08005980 	.word	0x08005980

08005058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3b04      	subs	r3, #4
 8005068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3b04      	subs	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f023 0201 	bic.w	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3b04      	subs	r3, #4
 8005086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005088:	4a0c      	ldr	r2, [pc, #48]	; (80050bc <pxPortInitialiseStack+0x64>)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b14      	subs	r3, #20
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b04      	subs	r3, #4
 800509e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f06f 0202 	mvn.w	r2, #2
 80050a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3b20      	subs	r3, #32
 80050ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050ae:	68fb      	ldr	r3, [r7, #12]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	080050c1 	.word	0x080050c1

080050c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <prvTaskExitError+0x54>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d00a      	beq.n	80050ea <prvTaskExitError+0x2a>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	60fb      	str	r3, [r7, #12]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <prvTaskExitError+0x28>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	60bb      	str	r3, [r7, #8]
}
 80050fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050fe:	bf00      	nop
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0fc      	beq.n	8005100 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	2000000c 	.word	0x2000000c
	...

08005120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <pxCurrentTCBConst2>)
 8005122:	6819      	ldr	r1, [r3, #0]
 8005124:	6808      	ldr	r0, [r1, #0]
 8005126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512a:	f380 8809 	msr	PSP, r0
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f380 8811 	msr	BASEPRI, r0
 800513a:	4770      	bx	lr
 800513c:	f3af 8000 	nop.w

08005140 <pxCurrentTCBConst2>:
 8005140:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005148:	4808      	ldr	r0, [pc, #32]	; (800516c <prvPortStartFirstTask+0x24>)
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	6800      	ldr	r0, [r0, #0]
 800514e:	f380 8808 	msr	MSP, r0
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f380 8814 	msr	CONTROL, r0
 800515a:	b662      	cpsie	i
 800515c:	b661      	cpsie	f
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	df00      	svc	0
 8005168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800516a:	bf00      	nop
 800516c:	e000ed08 	.word	0xe000ed08

08005170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005176:	4b46      	ldr	r3, [pc, #280]	; (8005290 <xPortStartScheduler+0x120>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a46      	ldr	r2, [pc, #280]	; (8005294 <xPortStartScheduler+0x124>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10a      	bne.n	8005196 <xPortStartScheduler+0x26>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	613b      	str	r3, [r7, #16]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005196:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <xPortStartScheduler+0x120>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3f      	ldr	r2, [pc, #252]	; (8005298 <xPortStartScheduler+0x128>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10a      	bne.n	80051b6 <xPortStartScheduler+0x46>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	60fb      	str	r3, [r7, #12]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051b6:	4b39      	ldr	r3, [pc, #228]	; (800529c <xPortStartScheduler+0x12c>)
 80051b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	22ff      	movs	r2, #255	; 0xff
 80051c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <xPortStartScheduler+0x130>)
 80051dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051de:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <xPortStartScheduler+0x134>)
 80051e0:	2207      	movs	r2, #7
 80051e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051e4:	e009      	b.n	80051fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80051e6:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <xPortStartScheduler+0x134>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	4a2d      	ldr	r2, [pc, #180]	; (80052a4 <xPortStartScheduler+0x134>)
 80051ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005202:	2b80      	cmp	r3, #128	; 0x80
 8005204:	d0ef      	beq.n	80051e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005206:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <xPortStartScheduler+0x134>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1c3 0307 	rsb	r3, r3, #7
 800520e:	2b04      	cmp	r3, #4
 8005210:	d00a      	beq.n	8005228 <xPortStartScheduler+0xb8>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60bb      	str	r3, [r7, #8]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005228:	4b1e      	ldr	r3, [pc, #120]	; (80052a4 <xPortStartScheduler+0x134>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <xPortStartScheduler+0x134>)
 8005230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005232:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <xPortStartScheduler+0x134>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800523a:	4a1a      	ldr	r2, [pc, #104]	; (80052a4 <xPortStartScheduler+0x134>)
 800523c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005246:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <xPortStartScheduler+0x138>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <xPortStartScheduler+0x138>)
 800524c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <xPortStartScheduler+0x138>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <xPortStartScheduler+0x138>)
 8005258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800525c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800525e:	f000 f8dd 	bl	800541c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <xPortStartScheduler+0x13c>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005268:	f000 f8fc 	bl	8005464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800526c:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <xPortStartScheduler+0x140>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0f      	ldr	r2, [pc, #60]	; (80052b0 <xPortStartScheduler+0x140>)
 8005272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005278:	f7ff ff66 	bl	8005148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800527c:	f7ff f852 	bl	8004324 <vTaskSwitchContext>
	prvTaskExitError();
 8005280:	f7ff ff1e 	bl	80050c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	e000ed00 	.word	0xe000ed00
 8005294:	410fc271 	.word	0x410fc271
 8005298:	410fc270 	.word	0x410fc270
 800529c:	e000e400 	.word	0xe000e400
 80052a0:	20000df0 	.word	0x20000df0
 80052a4:	20000df4 	.word	0x20000df4
 80052a8:	e000ed20 	.word	0xe000ed20
 80052ac:	2000000c 	.word	0x2000000c
 80052b0:	e000ef34 	.word	0xe000ef34

080052b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	607b      	str	r3, [r7, #4]
}
 80052cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <vPortEnterCritical+0x58>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a0d      	ldr	r2, [pc, #52]	; (800530c <vPortEnterCritical+0x58>)
 80052d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <vPortEnterCritical+0x58>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10f      	bne.n	8005300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <vPortEnterCritical+0x5c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <vPortEnterCritical+0x4c>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	603b      	str	r3, [r7, #0]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <vPortEnterCritical+0x4a>
	}
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	2000000c 	.word	0x2000000c
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800531a:	4b12      	ldr	r3, [pc, #72]	; (8005364 <vPortExitCritical+0x50>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <vPortExitCritical+0x24>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	607b      	str	r3, [r7, #4]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <vPortExitCritical+0x50>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3b01      	subs	r3, #1
 800533e:	4a09      	ldr	r2, [pc, #36]	; (8005364 <vPortExitCritical+0x50>)
 8005340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <vPortExitCritical+0x50>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <vPortExitCritical+0x42>
 800534a:	2300      	movs	r3, #0
 800534c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	f383 8811 	msr	BASEPRI, r3
}
 8005354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	2000000c 	.word	0x2000000c
	...

08005370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005370:	f3ef 8009 	mrs	r0, PSP
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <pxCurrentTCBConst>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	f01e 0f10 	tst.w	lr, #16
 8005380:	bf08      	it	eq
 8005382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538a:	6010      	str	r0, [r2, #0]
 800538c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005394:	f380 8811 	msr	BASEPRI, r0
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f7fe ffc0 	bl	8004324 <vTaskSwitchContext>
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	f380 8811 	msr	BASEPRI, r0
 80053ac:	bc09      	pop	{r0, r3}
 80053ae:	6819      	ldr	r1, [r3, #0]
 80053b0:	6808      	ldr	r0, [r1, #0]
 80053b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b6:	f01e 0f10 	tst.w	lr, #16
 80053ba:	bf08      	it	eq
 80053bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053c0:	f380 8809 	msr	PSP, r0
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w

080053d0 <pxCurrentTCBConst>:
 80053d0:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
}
 80053f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053f2:	f7fe fedd 	bl	80041b0 <xTaskIncrementTick>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <xPortSysTickHandler+0x40>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	2300      	movs	r3, #0
 8005406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f383 8811 	msr	BASEPRI, r3
}
 800540e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <vPortSetupTimerInterrupt+0x34>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <vPortSetupTimerInterrupt+0x38>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <vPortSetupTimerInterrupt+0x3c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0a      	ldr	r2, [pc, #40]	; (800545c <vPortSetupTimerInterrupt+0x40>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	099b      	lsrs	r3, r3, #6
 8005438:	4a09      	ldr	r2, [pc, #36]	; (8005460 <vPortSetupTimerInterrupt+0x44>)
 800543a:	3b01      	subs	r3, #1
 800543c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800543e:	4b04      	ldr	r3, [pc, #16]	; (8005450 <vPortSetupTimerInterrupt+0x34>)
 8005440:	2207      	movs	r2, #7
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	e000e010 	.word	0xe000e010
 8005454:	e000e018 	.word	0xe000e018
 8005458:	20000000 	.word	0x20000000
 800545c:	10624dd3 	.word	0x10624dd3
 8005460:	e000e014 	.word	0xe000e014

08005464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005474 <vPortEnableVFP+0x10>
 8005468:	6801      	ldr	r1, [r0, #0]
 800546a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800546e:	6001      	str	r1, [r0, #0]
 8005470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005472:	bf00      	nop
 8005474:	e000ed88 	.word	0xe000ed88

08005478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800547e:	f3ef 8305 	mrs	r3, IPSR
 8005482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b0f      	cmp	r3, #15
 8005488:	d914      	bls.n	80054b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800548a:	4a17      	ldr	r2, [pc, #92]	; (80054e8 <vPortValidateInterruptPriority+0x70>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <vPortValidateInterruptPriority+0x74>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	7afa      	ldrb	r2, [r7, #11]
 800549a:	429a      	cmp	r2, r3
 800549c:	d20a      	bcs.n	80054b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <vPortValidateInterruptPriority+0x78>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054bc:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <vPortValidateInterruptPriority+0x7c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d90a      	bls.n	80054da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	603b      	str	r3, [r7, #0]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <vPortValidateInterruptPriority+0x60>
	}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	e000e3f0 	.word	0xe000e3f0
 80054ec:	20000df0 	.word	0x20000df0
 80054f0:	e000ed0c 	.word	0xe000ed0c
 80054f4:	20000df4 	.word	0x20000df4

080054f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005504:	f7fe fd98 	bl	8004038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005508:	4b5b      	ldr	r3, [pc, #364]	; (8005678 <pvPortMalloc+0x180>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005510:	f000 f920 	bl	8005754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005514:	4b59      	ldr	r3, [pc, #356]	; (800567c <pvPortMalloc+0x184>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	f040 8093 	bne.w	8005648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01d      	beq.n	8005564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005528:	2208      	movs	r2, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	2b00      	cmp	r3, #0
 8005538:	d014      	beq.n	8005564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f023 0307 	bic.w	r3, r3, #7
 8005540:	3308      	adds	r3, #8
 8005542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <pvPortMalloc+0x6c>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	617b      	str	r3, [r7, #20]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d06e      	beq.n	8005648 <pvPortMalloc+0x150>
 800556a:	4b45      	ldr	r3, [pc, #276]	; (8005680 <pvPortMalloc+0x188>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d869      	bhi.n	8005648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005574:	4b43      	ldr	r3, [pc, #268]	; (8005684 <pvPortMalloc+0x18c>)
 8005576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005578:	4b42      	ldr	r3, [pc, #264]	; (8005684 <pvPortMalloc+0x18c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800557e:	e004      	b.n	800558a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d903      	bls.n	800559c <pvPortMalloc+0xa4>
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f1      	bne.n	8005580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800559c:	4b36      	ldr	r3, [pc, #216]	; (8005678 <pvPortMalloc+0x180>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d050      	beq.n	8005648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2208      	movs	r2, #8
 80055ac:	4413      	add	r3, r2
 80055ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	2308      	movs	r3, #8
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d91f      	bls.n	8005608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <pvPortMalloc+0xf8>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	613b      	str	r3, [r7, #16]
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005602:	69b8      	ldr	r0, [r7, #24]
 8005604:	f000 f908 	bl	8005818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005608:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <pvPortMalloc+0x188>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <pvPortMalloc+0x188>)
 8005614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005616:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <pvPortMalloc+0x188>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <pvPortMalloc+0x190>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d203      	bcs.n	800562a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <pvPortMalloc+0x188>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <pvPortMalloc+0x190>)
 8005628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <pvPortMalloc+0x184>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	431a      	orrs	r2, r3
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800563e:	4b13      	ldr	r3, [pc, #76]	; (800568c <pvPortMalloc+0x194>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a11      	ldr	r2, [pc, #68]	; (800568c <pvPortMalloc+0x194>)
 8005646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005648:	f7fe fd04 	bl	8004054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <pvPortMalloc+0x174>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60fb      	str	r3, [r7, #12]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <pvPortMalloc+0x172>
	return pvReturn;
 800566c:	69fb      	ldr	r3, [r7, #28]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3728      	adds	r7, #40	; 0x28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20004a00 	.word	0x20004a00
 800567c:	20004a14 	.word	0x20004a14
 8005680:	20004a04 	.word	0x20004a04
 8005684:	200049f8 	.word	0x200049f8
 8005688:	20004a08 	.word	0x20004a08
 800568c:	20004a0c 	.word	0x20004a0c

08005690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d04d      	beq.n	800573e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056a2:	2308      	movs	r3, #8
 80056a4:	425b      	negs	r3, r3
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	4b24      	ldr	r3, [pc, #144]	; (8005748 <vPortFree+0xb8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <vPortFree+0x44>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60fb      	str	r3, [r7, #12]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <vPortFree+0x62>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60bb      	str	r3, [r7, #8]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <vPortFree+0xb8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01e      	beq.n	800573e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11a      	bne.n	800573e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <vPortFree+0xb8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	43db      	mvns	r3, r3
 8005712:	401a      	ands	r2, r3
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005718:	f7fe fc8e 	bl	8004038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <vPortFree+0xbc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4413      	add	r3, r2
 8005726:	4a09      	ldr	r2, [pc, #36]	; (800574c <vPortFree+0xbc>)
 8005728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800572a:	6938      	ldr	r0, [r7, #16]
 800572c:	f000 f874 	bl	8005818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <vPortFree+0xc0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	4a06      	ldr	r2, [pc, #24]	; (8005750 <vPortFree+0xc0>)
 8005738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800573a:	f7fe fc8b 	bl	8004054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20004a14 	.word	0x20004a14
 800574c:	20004a04 	.word	0x20004a04
 8005750:	20004a10 	.word	0x20004a10

08005754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800575a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800575e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <prvHeapInit+0xac>)
 8005762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00c      	beq.n	8005788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3307      	adds	r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0307 	bic.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <prvHeapInit+0xac>)
 8005784:	4413      	add	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <prvHeapInit+0xb0>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005792:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <prvHeapInit+0xb0>)
 8005794:	2200      	movs	r2, #0
 8005796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4413      	add	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057a0:	2208      	movs	r2, #8
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <prvHeapInit+0xb4>)
 80057b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <prvHeapInit+0xb4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <prvHeapInit+0xb4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <prvHeapInit+0xb4>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4a0a      	ldr	r2, [pc, #40]	; (800580c <prvHeapInit+0xb8>)
 80057e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4a09      	ldr	r2, [pc, #36]	; (8005810 <prvHeapInit+0xbc>)
 80057ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <prvHeapInit+0xc0>)
 80057ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000df8 	.word	0x20000df8
 8005804:	200049f8 	.word	0x200049f8
 8005808:	20004a00 	.word	0x20004a00
 800580c:	20004a08 	.word	0x20004a08
 8005810:	20004a04 	.word	0x20004a04
 8005814:	20004a14 	.word	0x20004a14

08005818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005820:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <prvInsertBlockIntoFreeList+0xac>)
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e002      	b.n	800582c <prvInsertBlockIntoFreeList+0x14>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d8f7      	bhi.n	8005826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d108      	bne.n	800585a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	441a      	add	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d118      	bne.n	80058a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d00d      	beq.n	8005896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	441a      	add	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e008      	b.n	80058a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e003      	b.n	80058a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d002      	beq.n	80058b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	200049f8 	.word	0x200049f8
 80058c8:	20004a00 	.word	0x20004a00

080058cc <memset>:
 80058cc:	4402      	add	r2, r0
 80058ce:	4603      	mov	r3, r0
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d100      	bne.n	80058d6 <memset+0xa>
 80058d4:	4770      	bx	lr
 80058d6:	f803 1b01 	strb.w	r1, [r3], #1
 80058da:	e7f9      	b.n	80058d0 <memset+0x4>

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4d0d      	ldr	r5, [pc, #52]	; (8005914 <__libc_init_array+0x38>)
 80058e0:	4c0d      	ldr	r4, [pc, #52]	; (8005918 <__libc_init_array+0x3c>)
 80058e2:	1b64      	subs	r4, r4, r5
 80058e4:	10a4      	asrs	r4, r4, #2
 80058e6:	2600      	movs	r6, #0
 80058e8:	42a6      	cmp	r6, r4
 80058ea:	d109      	bne.n	8005900 <__libc_init_array+0x24>
 80058ec:	4d0b      	ldr	r5, [pc, #44]	; (800591c <__libc_init_array+0x40>)
 80058ee:	4c0c      	ldr	r4, [pc, #48]	; (8005920 <__libc_init_array+0x44>)
 80058f0:	f000 f826 	bl	8005940 <_init>
 80058f4:	1b64      	subs	r4, r4, r5
 80058f6:	10a4      	asrs	r4, r4, #2
 80058f8:	2600      	movs	r6, #0
 80058fa:	42a6      	cmp	r6, r4
 80058fc:	d105      	bne.n	800590a <__libc_init_array+0x2e>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	f855 3b04 	ldr.w	r3, [r5], #4
 8005904:	4798      	blx	r3
 8005906:	3601      	adds	r6, #1
 8005908:	e7ee      	b.n	80058e8 <__libc_init_array+0xc>
 800590a:	f855 3b04 	ldr.w	r3, [r5], #4
 800590e:	4798      	blx	r3
 8005910:	3601      	adds	r6, #1
 8005912:	e7f2      	b.n	80058fa <__libc_init_array+0x1e>
 8005914:	080059f0 	.word	0x080059f0
 8005918:	080059f0 	.word	0x080059f0
 800591c:	080059f0 	.word	0x080059f0
 8005920:	080059f4 	.word	0x080059f4

08005924 <memcpy>:
 8005924:	440a      	add	r2, r1
 8005926:	4291      	cmp	r1, r2
 8005928:	f100 33ff 	add.w	r3, r0, #4294967295
 800592c:	d100      	bne.n	8005930 <memcpy+0xc>
 800592e:	4770      	bx	lr
 8005930:	b510      	push	{r4, lr}
 8005932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800593a:	4291      	cmp	r1, r2
 800593c:	d1f9      	bne.n	8005932 <memcpy+0xe>
 800593e:	bd10      	pop	{r4, pc}

08005940 <_init>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	bf00      	nop
 8005944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005946:	bc08      	pop	{r3}
 8005948:	469e      	mov	lr, r3
 800594a:	4770      	bx	lr

0800594c <_fini>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr
