
cubemx_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08009f48  08009f48  00019f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a368  0800a368  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a368  0800a368  0001a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a370  0800a370  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a370  0800a370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800a378  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c0  2**0
                  CONTENTS
 10 .bss          00000258  200002c0  200002c0  000202c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  000202c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010dfb  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023a7  00000000  00000000  0003112e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001000  00000000  00000000  000334d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ca2  00000000  00000000  000344d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000229fa  00000000  00000000  0003517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001360a  00000000  00000000  00057b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0845  00000000  00000000  0006b17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055f8  00000000  00000000  0013b9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00140fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f2c 	.word	0x08009f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	08009f2c 	.word	0x08009f2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MPU9250_Init>:
        .R_measure = 0.03f
};


uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af04      	add	r7, sp, #16
 8000eaa:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDR, WHO_AM_I_MPU9250, 1, &check, 1, i2c_timeout);
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	f107 030f 	add.w	r3, r7, #15
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	2275      	movs	r2, #117	; 0x75
 8000ebe:	21d0      	movs	r1, #208	; 0xd0
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f001 fdef 	bl	8002aa4 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b68      	cmp	r3, #104	; 0x68
 8000eca:	d14f      	bne.n	8000f6c <MPU9250_Init+0xc8>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f107 030e 	add.w	r3, r7, #14
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	226b      	movs	r2, #107	; 0x6b
 8000ee2:	21d0      	movs	r1, #208	; 0xd0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 fce3 	bl	80028b0 <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f000 fffa 	bl	8001ee4 <HAL_Delay>


        Data = 0x01;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73bb      	strb	r3, [r7, #14]
	    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	f107 030e 	add.w	r3, r7, #14
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	226b      	movs	r2, #107	; 0x6b
 8000f06:	21d0      	movs	r1, #208	; 0xd0
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f001 fcd1 	bl	80028b0 <HAL_I2C_Mem_Write>
        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, SMPLRT_DIV, 1, &Data, 1, i2c_timeout);
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	f107 030e 	add.w	r3, r7, #14
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	2219      	movs	r2, #25
 8000f24:	21d0      	movs	r1, #208	; 0xd0
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f001 fcc2 	bl	80028b0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 8000f30:	2364      	movs	r3, #100	; 0x64
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	f107 030e 	add.w	r3, r7, #14
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	221c      	movs	r2, #28
 8000f42:	21d0      	movs	r1, #208	; 0xd0
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f001 fcb3 	bl	80028b0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
 8000f4e:	2364      	movs	r3, #100	; 0x64
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	f107 030e 	add.w	r3, r7, #14
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	221b      	movs	r2, #27
 8000f60:	21d0      	movs	r1, #208	; 0xd0
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f001 fca4 	bl	80028b0 <HAL_I2C_Mem_Write>
        return 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <MPU9250_Init+0xca>
    }
    return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <MPU9250_Read_All>:
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
}

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f7c:	b094      	sub	sp, #80	; 0x50
 8000f7e:	af04      	add	r7, sp, #16
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	double yaw;
	double pitch;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 14, i2c_timeout);
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	230e      	movs	r3, #14
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	223b      	movs	r2, #59	; 0x3b
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f001 fd83 	bl	8002aa4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000f9e:	7a3b      	ldrb	r3, [r7, #8]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	7a7b      	ldrb	r3, [r7, #9]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000fb0:	7abb      	ldrb	r3, [r7, #10]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000fc2:	7b3b      	ldrb	r3, [r7, #12]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	7b7b      	ldrb	r3, [r7, #13]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	809a      	strh	r2, [r3, #4]

    //temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);

    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8000fd4:	7c3b      	ldrb	r3, [r7, #16]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	7c7b      	ldrb	r3, [r7, #17]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8000fe6:	7cbb      	ldrb	r3, [r7, #18]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7cfb      	ldrb	r3, [r7, #19]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8000ff8:	7d3b      	ldrb	r3, [r7, #20]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21a      	sxth	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	849a      	strh	r2, [r3, #36]	; 0x24
    	Ayaver = Axsum/500.;
    	flag = 1;
    	DataStruct->Accel_X_RAW  = DataStruct->Accel_X_RAW  - Axaver;
    	DataStruct->Accel_Y_RAW  = DataStruct->Accel_Y_RAW  - Ayaver;
    }*/
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa87 	bl	8000524 <__aeabi_i2d>
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4bb9      	ldr	r3, [pc, #740]	; (8001300 <MPU9250_Read_All+0x388>)
 800101c:	f7ff fc16 	bl	800084c <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa77 	bl	8000524 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4bb1      	ldr	r3, [pc, #708]	; (8001300 <MPU9250_Read_All+0x388>)
 800103c:	f7ff fc06 	bl	800084c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	6839      	ldr	r1, [r7, #0]
 8001046:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa67 	bl	8000524 <__aeabi_i2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4ba9      	ldr	r3, [pc, #676]	; (8001300 <MPU9250_Read_All+0x388>)
 800105c:	f7ff fbf6 	bl	800084c <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	6839      	ldr	r1, [r7, #0]
 8001066:	e9c1 2306 	strd	r2, r3, [r1, #24]

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa57 	bl	8000524 <__aeabi_i2d>
 8001076:	a39e      	add	r3, pc, #632	; (adr r3, 80012f0 <MPU9250_Read_All+0x378>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fbe6 	bl	800084c <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa47 	bl	8000524 <__aeabi_i2d>
 8001096:	a396      	add	r3, pc, #600	; (adr r3, 80012f0 <MPU9250_Read_All+0x378>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fbd6 	bl	800084c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa37 	bl	8000524 <__aeabi_i2d>
 80010b6:	a38e      	add	r3, pc, #568	; (adr r3, 80012f0 <MPU9250_Read_All+0x378>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fbc6 	bl	800084c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	6839      	ldr	r1, [r7, #0]
 80010c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    // DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
    // Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer_1) / 1000;
 80010ca:	f000 feff 	bl	8001ecc <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b8c      	ldr	r3, [pc, #560]	; (8001304 <MPU9250_Read_All+0x38c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa14 	bl	8000504 <__aeabi_ui2d>
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b89      	ldr	r3, [pc, #548]	; (8001308 <MPU9250_Read_All+0x390>)
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer_1 = HAL_GetTick();
 80010ee:	f000 feed 	bl	8001ecc <HAL_GetTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a83      	ldr	r2, [pc, #524]	; (8001304 <MPU9250_Read_All+0x38c>)
 80010f6:	6013      	str	r3, [r2, #0]
	DataStruct->sdt = dt;
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010fe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	double roll_sqrt = sqrt(DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001110:	fb03 f202 	mul.w	r2, r3, r2
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800111a:	4619      	mov	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001122:	fb01 f303 	mul.w	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9fb 	bl	8000524 <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	ec43 2b10 	vmov	d0, r2, r3
 8001136:	f008 fb7f 	bl	8009838 <sqrt>
 800113a:	ed87 0b08 	vstr	d0, [r7, #32]
	//double roll_sqrt_cal =  sqrt(0.2*(DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW) + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
	pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	425b      	negs	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9ec 	bl	8000524 <__aeabi_i2d>
 800114c:	4682      	mov	sl, r0
 800114e:	468b      	mov	fp, r1
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9e4 	bl	8000524 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	ec43 2b11 	vmov	d1, r2, r3
 8001164:	ec4b ab10 	vmov	d0, sl, fp
 8001168:	f008 fb64 	bl	8009834 <atan2>
 800116c:	ec51 0b10 	vmov	r0, r1, d0
 8001170:	a361      	add	r3, pc, #388	; (adr r3, 80012f8 <MPU9250_Read_All+0x380>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa3f 	bl	80005f8 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	if (roll_sqrt != 0.0)
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800118e:	f7ff fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d119      	bne.n	80011cc <MPU9250_Read_All+0x254>
	{
		roll = atan2(DataStruct->Accel_Y_RAW , roll_sqrt) * RAD_TO_DEG;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c0 	bl	8000524 <__aeabi_i2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ed97 1b08 	vldr	d1, [r7, #32]
 80011ac:	ec43 2b10 	vmov	d0, r2, r3
 80011b0:	f008 fb40 	bl	8009834 <atan2>
 80011b4:	ec51 0b10 	vmov	r0, r1, d0
 80011b8:	a34f      	add	r3, pc, #316	; (adr r3, 80012f8 <MPU9250_Read_All+0x380>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa1b 	bl	80005f8 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80011ca:	e005      	b.n	80011d8 <MPU9250_Read_All+0x260>
	}
	else
	{
		roll = 0.0;
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}


	if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <MPU9250_Read_All+0x394>)
 80011de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011e2:	f7ff fc7b 	bl	8000adc <__aeabi_dcmplt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00a      	beq.n	8001202 <MPU9250_Read_All+0x28a>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b46      	ldr	r3, [pc, #280]	; (8001310 <MPU9250_Read_All+0x398>)
 80011f8:	f7ff fc8e 	bl	8000b18 <__aeabi_dcmpgt>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d114      	bne.n	800122c <MPU9250_Read_All+0x2b4>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MPU9250_Read_All+0x398>)
 8001208:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800120c:	f7ff fc84 	bl	8000b18 <__aeabi_dcmpgt>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d015      	beq.n	8001242 <MPU9250_Read_All+0x2ca>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b3a      	ldr	r3, [pc, #232]	; (800130c <MPU9250_Read_All+0x394>)
 8001222:	f7ff fc5b 	bl	8000adc <__aeabi_dcmplt>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00a      	beq.n	8001242 <MPU9250_Read_All+0x2ca>
	{
		KalmanY_1.angle = pitch;
 800122c:	4939      	ldr	r1, [pc, #228]	; (8001314 <MPU9250_Read_All+0x39c>)
 800122e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001232:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800123c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8001240:	e014      	b.n	800126c <MPU9250_Read_All+0x2f4>
	}
	else
	{
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY_1, pitch, DataStruct->Gy, dt);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001248:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800124c:	eeb0 1a47 	vmov.f32	s2, s14
 8001250:	eef0 1a67 	vmov.f32	s3, s15
 8001254:	ed97 0b06 	vldr	d0, [r7, #24]
 8001258:	482e      	ldr	r0, [pc, #184]	; (8001314 <MPU9250_Read_All+0x39c>)
 800125a:	f000 f897 	bl	800138c <Kalman_getAngle>
 800125e:	eeb0 7a40 	vmov.f32	s14, s0
 8001262:	eef0 7a60 	vmov.f32	s15, s1
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001272:	4690      	mov	r8, r2
 8001274:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MPU9250_Read_All+0x398>)
 800127e:	4640      	mov	r0, r8
 8001280:	4649      	mov	r1, r9
 8001282:	f7ff fc49 	bl	8000b18 <__aeabi_dcmpgt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <MPU9250_Read_All+0x326>
		DataStruct->Gx = -DataStruct->Gx;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001292:	4614      	mov	r4, r2
 8001294:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	if(DataStruct->Accel_Z_RAW != 0)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d037      	beq.n	8001318 <MPU9250_Read_All+0x3a0>
	{
		yaw = atan2(DataStruct->Accel_Z_RAW, DataStruct->Accel_X_RAW) * RAD_TO_DEG;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f938 	bl	8000524 <__aeabi_i2d>
 80012b4:	4604      	mov	r4, r0
 80012b6:	460d      	mov	r5, r1
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f930 	bl	8000524 <__aeabi_i2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	ec43 2b11 	vmov	d1, r2, r3
 80012cc:	ec45 4b10 	vmov	d0, r4, r5
 80012d0:	f008 fab0 	bl	8009834 <atan2>
 80012d4:	ec51 0b10 	vmov	r0, r1, d0
 80012d8:	a307      	add	r3, pc, #28	; (adr r3, 80012f8 <MPU9250_Read_All+0x380>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f98b 	bl	80005f8 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80012ea:	e01b      	b.n	8001324 <MPU9250_Read_All+0x3ac>
 80012ec:	f3af 8000 	nop.w
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40606000 	.word	0x40606000
 80012f8:	1a63c1f8 	.word	0x1a63c1f8
 80012fc:	404ca5dc 	.word	0x404ca5dc
 8001300:	40d00000 	.word	0x40d00000
 8001304:	200002dc 	.word	0x200002dc
 8001308:	408f4000 	.word	0x408f4000
 800130c:	c0568000 	.word	0xc0568000
 8001310:	40568000 	.word	0x40568000
 8001314:	20000048 	.word	0x20000048
	}
	else
	{
		yaw = 0.0;
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX_1, roll, DataStruct->Gx, dt);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800132a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800132e:	eeb0 1a47 	vmov.f32	s2, s14
 8001332:	eef0 1a67 	vmov.f32	s3, s15
 8001336:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800133a:	4812      	ldr	r0, [pc, #72]	; (8001384 <MPU9250_Read_All+0x40c>)
 800133c:	f000 f826 	bl	800138c <Kalman_getAngle>
 8001340:	eeb0 7a40 	vmov.f32	s14, s0
 8001344:	eef0 7a60 	vmov.f32	s15, s1
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	DataStruct->KalmanAngleZ = Kalman_getAngle(&KalmanZ_1, yaw, DataStruct->Gz, dt);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001354:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001358:	eeb0 1a47 	vmov.f32	s2, s14
 800135c:	eef0 1a67 	vmov.f32	s3, s15
 8001360:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <MPU9250_Read_All+0x410>)
 8001366:	f000 f811 	bl	800138c <Kalman_getAngle>
 800136a:	eeb0 7a40 	vmov.f32	s14, s0
 800136e:	eef0 7a60 	vmov.f32	s15, s1
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
}
 8001378:	bf00      	nop
 800137a:	3740      	adds	r7, #64	; 0x40
 800137c:	46bd      	mov	sp, r7
 800137e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	20000090 	.word	0x20000090

0800138c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b096      	sub	sp, #88	; 0x58
 8001390:	af00      	add	r7, sp, #0
 8001392:	61f8      	str	r0, [r7, #28]
 8001394:	ed87 0b04 	vstr	d0, [r7, #16]
 8001398:	ed87 1b02 	vstr	d1, [r7, #8]
 800139c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013aa:	f7fe ff6d 	bl	8000288 <__aeabi_dsub>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80013c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c4:	f7ff f918 	bl	80005f8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7fe ff5c 	bl	800028c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	69f9      	ldr	r1, [r7, #28]
 80013da:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80013ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ee:	f7ff f903 	bl	80005f8 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001400:	f7fe ff42 	bl	8000288 <__aeabi_dsub>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001412:	f7fe ff39 	bl	8000288 <__aeabi_dsub>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7fe ff32 	bl	800028c <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001434:	f7ff f8e0 	bl	80005f8 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe ff24 	bl	800028c <__adddf3>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	69f9      	ldr	r1, [r7, #28]
 800144a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800145a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800145e:	f7ff f8cb 	bl	80005f8 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7fe ff0d 	bl	8000288 <__aeabi_dsub>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	69f9      	ldr	r1, [r7, #28]
 8001474:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001488:	f7ff f8b6 	bl	80005f8 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7fe fef8 	bl	8000288 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	69f9      	ldr	r1, [r7, #28]
 800149e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b2:	f7ff f8a1 	bl	80005f8 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4620      	mov	r0, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	f7fe fee5 	bl	800028c <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	69f9      	ldr	r1, [r7, #28]
 80014c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014d8:	f7fe fed8 	bl	800028c <__adddf3>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014ee:	f7ff f9ad 	bl	800084c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001504:	f7ff f9a2 	bl	800084c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800151a:	f7fe feb5 	bl	8000288 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800152c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001530:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001534:	f7ff f860 	bl	80005f8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7fe fea4 	bl	800028c <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	69f9      	ldr	r1, [r7, #28]
 800154a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001554:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001558:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800155c:	f7ff f84c 	bl	80005f8 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4620      	mov	r0, r4
 8001566:	4629      	mov	r1, r5
 8001568:	f7fe fe90 	bl	800028c <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	69f9      	ldr	r1, [r7, #28]
 8001572:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800157c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001586:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001598:	f7ff f82e 	bl	80005f8 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fe70 	bl	8000288 <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	69f9      	ldr	r1, [r7, #28]
 80015ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015c0:	f7ff f81a 	bl	80005f8 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4620      	mov	r0, r4
 80015ca:	4629      	mov	r1, r5
 80015cc:	f7fe fe5c 	bl	8000288 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	69f9      	ldr	r1, [r7, #28]
 80015d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80015e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015e8:	f7ff f806 	bl	80005f8 <__aeabi_dmul>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7fe fe48 	bl	8000288 <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	69f9      	ldr	r1, [r7, #28]
 80015fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001608:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800160c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001610:	f7fe fff2 	bl	80005f8 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7fe fe34 	bl	8000288 <__aeabi_dsub>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	69f9      	ldr	r1, [r7, #28]
 8001626:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001630:	ec43 2b17 	vmov	d7, r2, r3
};
 8001634:	eeb0 0a47 	vmov.f32	s0, s14
 8001638:	eef0 0a67 	vmov.f32	s1, s15
 800163c:	3758      	adds	r7, #88	; 0x58
 800163e:	46bd      	mov	sp, r7
 8001640:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001644 <MX_I2C1_Init>:

extern I2C_HandleTypeDef hi2c1;
static void MX_I2C1_Init(void);

static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2C1_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C1_Init+0x50>)
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_I2C1_Init+0x58>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2C1_Init+0x50>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C1_Init+0x50>)
 8001682:	f000 ffbb 	bl	80025fc <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 f984 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002e0 	.word	0x200002e0
 8001698:	40005400 	.word	0x40005400
 800169c:	000186a0 	.word	0x000186a0

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b09e      	sub	sp, #120	; 0x78
 80016a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a6:	f000 fbab 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016aa:	f000 f82b 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ae:	f000 f927 	bl	8001900 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b2:	f7ff ffc7 	bl	8001644 <MX_I2C1_Init>
  MX_TIM7_Init();
 80016b6:	f000 f8b1 	bl	800181c <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80016ba:	f000 f8e5 	bl	8001888 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80016be:	f000 f889 	bl	80017d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_t mpu9250;
  MPU9250_Init(&hi2c1);
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <main+0x5c>)
 80016c4:	f7ff fbee 	bl	8000ea4 <MPU9250_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU9250_Read_All(&hi2c1, &mpu9250);
 80016c8:	463b      	mov	r3, r7
 80016ca:	4619      	mov	r1, r3
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <main+0x5c>)
 80016ce:	f7ff fc53 	bl	8000f78 <MPU9250_Read_All>
	 	  HAL_Delay(500);
 80016d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d6:	f000 fc05 	bl	8001ee4 <HAL_Delay>
	 	  printf("pitch: %lf roll: %lf yaw: %lf \r\n", mpu9250.KalmanAngleX, mpu9250.KalmanAngleY, mpu9250.KalmanAngleZ);
 80016da:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80016de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016ea:	e9cd 2300 	strd	r2, r3, [sp]
 80016ee:	4622      	mov	r2, r4
 80016f0:	462b      	mov	r3, r5
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <main+0x60>)
 80016f4:	f006 f8f6 	bl	80078e4 <iprintf>
	  MPU9250_Read_All(&hi2c1, &mpu9250);
 80016f8:	e7e6      	b.n	80016c8 <main+0x28>
 80016fa:	bf00      	nop
 80016fc:	200002e0 	.word	0x200002e0
 8001700:	08009f48 	.word	0x08009f48

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	; 0x50
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	2230      	movs	r2, #48	; 0x30
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f006 f93b 	bl	800798e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <SystemClock_Config+0xc8>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a26      	ldr	r2, [pc, #152]	; (80017cc <SystemClock_Config+0xc8>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <SystemClock_Config+0xc8>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001744:	2300      	movs	r3, #0
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <SystemClock_Config+0xcc>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <SystemClock_Config+0xcc>)
 800174e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <SystemClock_Config+0xcc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001774:	2304      	movs	r3, #4
 8001776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001778:	2332      	movs	r3, #50	; 0x32
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177c:	2302      	movs	r3, #2
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001780:	2304      	movs	r3, #4
 8001782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fc45 	bl	8005018 <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001794:	f000 f900 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2302      	movs	r3, #2
 800179e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2101      	movs	r1, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fea7 	bl	8005508 <HAL_RCC_ClockConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017c0:	f000 f8ea 	bl	8001998 <Error_Handler>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3750      	adds	r7, #80	; 0x50
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000

080017d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2037      	movs	r0, #55	; 0x37
 80017de:	f000 fc80 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017e2:	2037      	movs	r0, #55	; 0x37
 80017e4:	f000 fc99 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2020      	movs	r0, #32
 80017ee:	f000 fc78 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017f2:	2020      	movs	r0, #32
 80017f4:	f000 fc91 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	201f      	movs	r0, #31
 80017fe:	f000 fc70 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001802:	201f      	movs	r0, #31
 8001804:	f000 fc89 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2026      	movs	r0, #38	; 0x26
 800180e:	f000 fc68 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001812:	2026      	movs	r0, #38	; 0x26
 8001814:	f000 fc81 	bl	800211a <HAL_NVIC_EnableIRQ>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001822:	463b      	mov	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_TIM7_Init+0x64>)
 800182c:	4a15      	ldr	r2, [pc, #84]	; (8001884 <MX_TIM7_Init+0x68>)
 800182e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_TIM7_Init+0x64>)
 8001832:	f242 3228 	movw	r2, #9000	; 0x2328
 8001836:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_TIM7_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 300;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_TIM7_Init+0x64>)
 8001840:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001844:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_TIM7_Init+0x64>)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_TIM7_Init+0x64>)
 800184e:	f004 f87b 	bl	8005948 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001858:	f000 f89e 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM7_Init+0x64>)
 800186a:	f004 fa81 	bl	8005d70 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001874:	f000 f890 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000334 	.word	0x20000334
 8001884:	40001400 	.word	0x40001400

08001888 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <MX_USART2_UART_Init+0x50>)
 8001890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_USART2_UART_Init+0x4c>)
 80018c0:	f004 fae6 	bl	8005e90 <HAL_UART_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ca:	f000 f865 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000037c 	.word	0x2000037c
 80018d8:	40004400 	.word	0x40004400

080018dc <__io_putchar>:

int __io_putchar (int ch)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 80018e4:	1d39      	adds	r1, r7, #4
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <__io_putchar+0x20>)
 80018ec:	f004 fb20 	bl	8005f30 <HAL_UART_Transmit>
  return ch;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000037c 	.word	0x2000037c

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_GPIO_Init+0x68>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <MX_GPIO_Init+0x68>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_GPIO_Init+0x68>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_GPIO_Init+0x68>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <MX_GPIO_Init+0x68>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <MX_GPIO_Init+0x68>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_GPIO_Init+0x68>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <MX_GPIO_Init+0x68>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_GPIO_Init+0x68>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if (htim == &htim7) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d104      	bne.n	8001986 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800197c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001982:	f000 fe21 	bl	80025c8 <HAL_GPIO_TogglePin>
  }
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000334 	.word	0x20000334
 8001994:	40020c00 	.word	0x40020c00

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>
	...

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_I2C_MspInit+0x84>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d12b      	bne.n	8001a6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a36:	2312      	movs	r3, #18
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a42:	2304      	movs	r3, #4
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <HAL_I2C_MspInit+0x8c>)
 8001a4e:	f000 fc1f 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3728      	adds	r7, #40	; 0x28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020400 	.word	0x40020400

08001a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <HAL_TIM_Base_MspInit+0x3c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d10d      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_TIM_Base_MspInit+0x40>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_TIM_Base_MspInit+0x40>)
 8001aa0:	f043 0320 	orr.w	r3, r3, #32
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_TIM_Base_MspInit+0x40>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 0320 	and.w	r3, r3, #32
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40001400 	.word	0x40001400
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <HAL_UART_MspInit+0x84>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d12b      	bne.n	8001b42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_UART_MspInit+0x88>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_UART_MspInit+0x88>)
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_UART_MspInit+0x88>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_UART_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_UART_MspInit+0x88>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_UART_MspInit+0x88>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b22:	230c      	movs	r3, #12
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b32:	2307      	movs	r3, #7
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_UART_MspInit+0x8c>)
 8001b3e:	f000 fba7 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40004400 	.word	0x40004400
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f97e 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <I2C1_EV_IRQHandler+0x10>)
 8001bb2:	f001 f9a9 	bl	8002f08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200002e0 	.word	0x200002e0

08001bc0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <I2C1_ER_IRQHandler+0x10>)
 8001bc6:	f001 faf2 	bl	80031ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200002e0 	.word	0x200002e0

08001bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <USART2_IRQHandler+0x10>)
 8001bda:	f004 fa35 	bl	8006048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000037c 	.word	0x2000037c

08001be8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM7_IRQHandler+0x10>)
 8001bee:	f003 fefa 	bl	80059e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000334 	.word	0x20000334

08001bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_kill>:

int _kill(int pid, int sig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c16:	f005 ff0d 	bl	8007a34 <__errno>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2216      	movs	r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_exit>:

void _exit (int status)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe7 	bl	8001c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c3e:	e7fe      	b.n	8001c3e <_exit+0x12>

08001c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e00a      	b.n	8001c68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c52:	f3af 8000 	nop.w
 8001c56:	4601      	mov	r1, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf0      	blt.n	8001c52 <_read+0x12>
  }

  return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e009      	b.n	8001ca0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe21 	bl	80018dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dbf1      	blt.n	8001c8c <_write+0x12>
  }
  return len;
 8001ca8:	687b      	ldr	r3, [r7, #4]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_close>:

int _close(int file)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cda:	605a      	str	r2, [r3, #4]
  return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_isatty>:

int _isatty(int file)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d4c:	f005 fe72 	bl	8007a34 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20020000 	.word	0x20020000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	200003c4 	.word	0x200003c4
 8001d84:	20000518 	.word	0x20000518

08001d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <SystemInit+0x20>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <SystemInit+0x20>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001db0:	f7ff ffea 	bl	8001d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db6:	490d      	ldr	r1, [pc, #52]	; (8001dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db8:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	; (8001df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dda:	f005 fe31 	bl	8007a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dde:	f7ff fc5f 	bl	80016a0 <main>
  bx  lr    
 8001de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8001df0:	0800a378 	.word	0x0800a378
  ldr r2, =_sbss
 8001df4:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8001df8:	20000518 	.word	0x20000518

08001dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_Init+0x40>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_Init+0x40>)
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x40>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 f94f 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fdb6 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f967 	bl	8002136 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 f92f 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200000d8 	.word	0x200000d8
 8001e9c:	200000e0 	.word	0x200000e0
 8001ea0:	200000dc 	.word	0x200000dc

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	200000e0 	.word	0x200000e0
 8001ec8:	200003c8 	.word	0x200003c8

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200003c8 	.word	0x200003c8

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200000e0 	.word	0x200000e0

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <__NVIC_EnableIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff29 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff3e 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff31 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff feb6 	bl	8001ecc <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d008      	beq.n	8002180 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e052      	b.n	8002226 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0216 	bic.w	r2, r2, #22
 800218e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <HAL_DMA_Abort+0x62>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0208 	bic.w	r2, r2, #8
 80021be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d0:	e013      	b.n	80021fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d2:	f7ff fe7b 	bl	8001ecc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d90c      	bls.n	80021fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e015      	b.n	8002226 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e4      	bne.n	80021d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	223f      	movs	r2, #63	; 0x3f
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d004      	beq.n	800224c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00c      	b.n	8002266 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2205      	movs	r2, #5
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002280:	b2db      	uxtb	r3, r3
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e16b      	b.n	8002584 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f040 815a 	bne.w	800257e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d005      	beq.n	80022e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b03      	cmp	r3, #3
 800234e:	d017      	beq.n	8002380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d123      	bne.n	80023d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80b4 	beq.w	800257e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_GPIO_Init+0x30c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a5f      	ldr	r2, [pc, #380]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_GPIO_Init+0x30c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002432:	4a5b      	ldr	r2, [pc, #364]	; (80025a0 <HAL_GPIO_Init+0x310>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_GPIO_Init+0x314>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02b      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_GPIO_Init+0x318>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_GPIO_Init+0x31c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_GPIO_Init+0x320>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4e      	ldr	r2, [pc, #312]	; (80025b4 <HAL_GPIO_Init+0x324>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4d      	ldr	r2, [pc, #308]	; (80025b8 <HAL_GPIO_Init+0x328>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4c      	ldr	r2, [pc, #304]	; (80025bc <HAL_GPIO_Init+0x32c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4b      	ldr	r2, [pc, #300]	; (80025c0 <HAL_GPIO_Init+0x330>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x20a>
 8002496:	2307      	movs	r3, #7
 8002498:	e00e      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249a:	2308      	movs	r3, #8
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 800249e:	2306      	movs	r3, #6
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x228>
 80024b6:	2300      	movs	r3, #0
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c8:	4935      	ldr	r1, [pc, #212]	; (80025a0 <HAL_GPIO_Init+0x310>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x334>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_GPIO_Init+0x334>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x334>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_GPIO_Init+0x334>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	f67f ae90 	bls.w	80022ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40021400 	.word	0x40021400
 80025bc:	40021800 	.word	0x40021800
 80025c0:	40021c00 	.word	0x40021c00
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43d9      	mvns	r1, r3
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	400b      	ands	r3, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	619a      	str	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e12b      	b.n	8002866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff f9e6 	bl	80019f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2224      	movs	r2, #36	; 0x24
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800265e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002660:	f003 f94a 	bl	80058f8 <HAL_RCC_GetPCLK1Freq>
 8002664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a81      	ldr	r2, [pc, #516]	; (8002870 <HAL_I2C_Init+0x274>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d807      	bhi.n	8002680 <HAL_I2C_Init+0x84>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a80      	ldr	r2, [pc, #512]	; (8002874 <HAL_I2C_Init+0x278>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e006      	b.n	800268e <HAL_I2C_Init+0x92>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a7d      	ldr	r2, [pc, #500]	; (8002878 <HAL_I2C_Init+0x27c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	bf94      	ite	ls
 8002688:	2301      	movls	r3, #1
 800268a:	2300      	movhi	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0e7      	b.n	8002866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a78      	ldr	r2, [pc, #480]	; (800287c <HAL_I2C_Init+0x280>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_I2C_Init+0x274>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d802      	bhi.n	80026d0 <HAL_I2C_Init+0xd4>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	e009      	b.n	80026e4 <HAL_I2C_Init+0xe8>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_I2C_Init+0x284>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	3301      	adds	r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	495c      	ldr	r1, [pc, #368]	; (8002870 <HAL_I2C_Init+0x274>)
 8002700:	428b      	cmp	r3, r1
 8002702:	d819      	bhi.n	8002738 <HAL_I2C_Init+0x13c>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e59      	subs	r1, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002712:	1c59      	adds	r1, r3, #1
 8002714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002718:	400b      	ands	r3, r1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_I2C_Init+0x138>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e59      	subs	r1, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fbb1 f3f3 	udiv	r3, r1, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	e051      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002734:	2304      	movs	r3, #4
 8002736:	e04f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d111      	bne.n	8002764 <HAL_I2C_Init+0x168>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e012      	b.n	800278a <HAL_I2C_Init+0x18e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1e58      	subs	r0, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	0099      	lsls	r1, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	fbb0 f3f3 	udiv	r3, r0, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Init+0x196>
 800278e:	2301      	movs	r3, #1
 8002790:	e022      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10e      	bne.n	80027b8 <HAL_I2C_Init+0x1bc>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1e58      	subs	r0, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	440b      	add	r3, r1
 80027a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b6:	e00f      	b.n	80027d8 <HAL_I2C_Init+0x1dc>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	6809      	ldr	r1, [r1, #0]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6911      	ldr	r1, [r2, #16]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	4311      	orrs	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	430b      	orrs	r3, r1
 800281a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	000186a0 	.word	0x000186a0
 8002874:	001e847f 	.word	0x001e847f
 8002878:	003d08ff 	.word	0x003d08ff
 800287c:	431bde83 	.word	0x431bde83
 8002880:	10624dd3 	.word	0x10624dd3

08002884 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	d103      	bne.n	80028a2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	4608      	mov	r0, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	461a      	mov	r2, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	817b      	strh	r3, [r7, #10]
 80028c2:	460b      	mov	r3, r1
 80028c4:	813b      	strh	r3, [r7, #8]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ca:	f7ff faff 	bl	8001ecc <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b20      	cmp	r3, #32
 80028da:	f040 80d9 	bne.w	8002a90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2319      	movs	r3, #25
 80028e4:	2201      	movs	r2, #1
 80028e6:	496d      	ldr	r1, [pc, #436]	; (8002a9c <HAL_I2C_Mem_Write+0x1ec>)
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f002 f911 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	e0cc      	b.n	8002a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_I2C_Mem_Write+0x56>
 8002902:	2302      	movs	r3, #2
 8002904:	e0c5      	b.n	8002a92 <HAL_I2C_Mem_Write+0x1e2>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d007      	beq.n	800292c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2221      	movs	r2, #33	; 0x21
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2240      	movs	r2, #64	; 0x40
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a4d      	ldr	r2, [pc, #308]	; (8002aa0 <HAL_I2C_Mem_Write+0x1f0>)
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800296e:	88f8      	ldrh	r0, [r7, #6]
 8002970:	893a      	ldrh	r2, [r7, #8]
 8002972:	8979      	ldrh	r1, [r7, #10]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	4603      	mov	r3, r0
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f001 fea0 	bl	80046c4 <I2C_RequestMemoryWrite>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d052      	beq.n	8002a30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e081      	b.n	8002a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f002 f9d6 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d107      	bne.n	80029b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06b      	b.n	8002a92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d11b      	bne.n	8002a30 <HAL_I2C_Mem_Write+0x180>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d017      	beq.n	8002a30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1aa      	bne.n	800298e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f002 f9c9 	bl	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00d      	beq.n	8002a64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d107      	bne.n	8002a60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e016      	b.n	8002a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	00100002 	.word	0x00100002
 8002aa0:	ffff0000 	.word	0xffff0000

08002aa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	; 0x30
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	813b      	strh	r3, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002abe:	f7ff fa05 	bl	8001ecc <HAL_GetTick>
 8002ac2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	f040 8214 	bne.w	8002efa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2319      	movs	r3, #25
 8002ad8:	2201      	movs	r2, #1
 8002ada:	497b      	ldr	r1, [pc, #492]	; (8002cc8 <HAL_I2C_Mem_Read+0x224>)
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f002 f817 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e207      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_I2C_Mem_Read+0x56>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e200      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d007      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2222      	movs	r2, #34	; 0x22
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2240      	movs	r2, #64	; 0x40
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ccc <HAL_I2C_Mem_Read+0x228>)
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b62:	88f8      	ldrh	r0, [r7, #6]
 8002b64:	893a      	ldrh	r2, [r7, #8]
 8002b66:	8979      	ldrh	r1, [r7, #10]
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	4603      	mov	r3, r0
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f001 fe3c 	bl	80047f0 <I2C_RequestMemoryRead>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1bc      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d113      	bne.n	8002bb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	623b      	str	r3, [r7, #32]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	623b      	str	r3, [r7, #32]
 8002b9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e190      	b.n	8002ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d11b      	bne.n	8002bf2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e170      	b.n	8002ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d11b      	bne.n	8002c32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	e150      	b.n	8002ed4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c48:	e144      	b.n	8002ed4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	f200 80f1 	bhi.w	8002e36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d123      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f002 f931 	bl	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e145      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ca2:	e117      	b.n	8002ed4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d14e      	bne.n	8002d4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4906      	ldr	r1, [pc, #24]	; (8002cd0 <HAL_I2C_Mem_Read+0x22c>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f001 ff2a 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e11a      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
 8002cc6:	bf00      	nop
 8002cc8:	00100002 	.word	0x00100002
 8002ccc:	ffff0000 	.word	0xffff0000
 8002cd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d48:	e0c4      	b.n	8002ed4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	2200      	movs	r2, #0
 8002d52:	496c      	ldr	r1, [pc, #432]	; (8002f04 <HAL_I2C_Mem_Read+0x460>)
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f001 fedb 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0cb      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	2200      	movs	r2, #0
 8002dae:	4955      	ldr	r1, [pc, #340]	; (8002f04 <HAL_I2C_Mem_Read+0x460>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f001 fead 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e09d      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e34:	e04e      	b.n	8002ed4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f002 f844 	bl	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e058      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d124      	bne.n	8002ed4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d107      	bne.n	8002ea2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f47f aeb6 	bne.w	8002c4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	00010004 	.word	0x00010004

08002f08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d003      	beq.n	8002f40 <HAL_I2C_EV_IRQHandler+0x38>
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	f040 80b1 	bne.w	80030a2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10d      	bne.n	8002f76 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f60:	d003      	beq.n	8002f6a <HAL_I2C_EV_IRQHandler+0x62>
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f68:	d101      	bne.n	8002f6e <HAL_I2C_EV_IRQHandler+0x66>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_I2C_EV_IRQHandler+0x68>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f000 8114 	beq.w	800319e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00b      	beq.n	8002f98 <HAL_I2C_EV_IRQHandler+0x90>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f002 f828 	bl	8004fe0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fd7a 	bl	8003a8a <I2C_Master_SB>
 8002f96:	e083      	b.n	80030a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_I2C_EV_IRQHandler+0xac>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fdf2 	bl	8003b96 <I2C_Master_ADD10>
 8002fb2:	e075      	b.n	80030a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_I2C_EV_IRQHandler+0xc8>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fe0e 	bl	8003bea <I2C_Master_ADDR>
 8002fce:	e067      	b.n	80030a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d036      	beq.n	8003048 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe8:	f000 80db 	beq.w	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0x10a>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0x10a>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d103      	bne.n	8003012 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9d6 	bl	80033bc <I2C_MasterTransmit_TXE>
 8003010:	e046      	b.n	80030a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80c2 	beq.w	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80bc 	beq.w	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800302a:	7bbb      	ldrb	r3, [r7, #14]
 800302c:	2b21      	cmp	r3, #33	; 0x21
 800302e:	d103      	bne.n	8003038 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa5f 	bl	80034f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003036:	e0b4      	b.n	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	f040 80b1 	bne.w	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 facd 	bl	80035e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003046:	e0ac      	b.n	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003056:	f000 80a4 	beq.w	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <HAL_I2C_EV_IRQHandler+0x178>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_I2C_EV_IRQHandler+0x178>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fb49 	bl	8003710 <I2C_MasterReceive_RXNE>
 800307e:	e00f      	b.n	80030a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 808b 	beq.w	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8085 	beq.w	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fc01 	bl	80038a0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800309e:	e080      	b.n	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
 80030a0:	e07f      	b.n	80031a2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	e007      	b.n	80030c4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d011      	beq.n	80030f2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80030e8:	69b9      	ldr	r1, [r7, #24]
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 ffcc 	bl	8004088 <I2C_Slave_ADDR>
 80030f0:	e05a      	b.n	80031a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0x206>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f001 f806 	bl	8004118 <I2C_Slave_STOPF>
 800310c:	e04c      	b.n	80031a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800310e:	7bbb      	ldrb	r3, [r7, #14]
 8003110:	2b21      	cmp	r3, #33	; 0x21
 8003112:	d002      	beq.n	800311a <HAL_I2C_EV_IRQHandler+0x212>
 8003114:	7bbb      	ldrb	r3, [r7, #14]
 8003116:	2b29      	cmp	r3, #41	; 0x29
 8003118:	d120      	bne.n	800315c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00d      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x238>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x238>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fee7 	bl	8003f0c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800313e:	e032      	b.n	80031a6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d02d      	beq.n	80031a6 <HAL_I2C_EV_IRQHandler+0x29e>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003150:	2b00      	cmp	r3, #0
 8003152:	d028      	beq.n	80031a6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 ff16 	bl	8003f86 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800315a:	e024      	b.n	80031a6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x27a>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x27a>
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 ff24 	bl	8003fc8 <I2C_SlaveReceive_RXNE>
 8003180:	e012      	b.n	80031a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 ff54 	bl	8004044 <I2C_SlaveReceive_BTF>
 800319c:	e004      	b.n	80031a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800319e:	bf00      	nop
 80031a0:	e002      	b.n	80031a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b08a      	sub	sp, #40	; 0x28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00d      	beq.n	80031f8 <HAL_I2C_ER_IRQHandler+0x4a>
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <HAL_I2C_ER_IRQHandler+0x70>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	f043 0302 	orr.w	r3, r3, #2
 8003212:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800321c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03e      	beq.n	80032a6 <HAL_I2C_ER_IRQHandler+0xf8>
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d039      	beq.n	80032a6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003232:	7efb      	ldrb	r3, [r7, #27]
 8003234:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800324c:	7ebb      	ldrb	r3, [r7, #26]
 800324e:	2b20      	cmp	r3, #32
 8003250:	d112      	bne.n	8003278 <HAL_I2C_ER_IRQHandler+0xca>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <HAL_I2C_ER_IRQHandler+0xca>
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	2b21      	cmp	r3, #33	; 0x21
 800325c:	d008      	beq.n	8003270 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	2b29      	cmp	r3, #41	; 0x29
 8003262:	d005      	beq.n	8003270 <HAL_I2C_ER_IRQHandler+0xc2>
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b28      	cmp	r3, #40	; 0x28
 8003268:	d106      	bne.n	8003278 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b21      	cmp	r3, #33	; 0x21
 800326e:	d103      	bne.n	8003278 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f001 f881 	bl	8004378 <I2C_Slave_AF>
 8003276:	e016      	b.n	80032a6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003280:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800328a:	7efb      	ldrb	r3, [r7, #27]
 800328c:	2b10      	cmp	r3, #16
 800328e:	d002      	beq.n	8003296 <HAL_I2C_ER_IRQHandler+0xe8>
 8003290:	7efb      	ldrb	r3, [r7, #27]
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d107      	bne.n	80032a6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <HAL_I2C_ER_IRQHandler+0x11e>
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80032ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f001 f8be 	bl	8004460 <I2C_ITError>
  }
}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
 8003348:	4613      	mov	r3, r2
 800334a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d150      	bne.n	8003484 <I2C_MasterTransmit_TXE+0xc8>
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b21      	cmp	r3, #33	; 0x21
 80033e6:	d14d      	bne.n	8003484 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d01d      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d01a      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033fa:	d016      	beq.n	800342a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2211      	movs	r2, #17
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ff62 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003428:	e060      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003438:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d107      	bne.n	8003474 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff7d 	bl	800336c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003472:	e03b      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff35 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003482:	e033      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b21      	cmp	r3, #33	; 0x21
 8003488:	d005      	beq.n	8003496 <I2C_MasterTransmit_TXE+0xda>
 800348a:	7bbb      	ldrb	r3, [r7, #14]
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d12d      	bne.n	80034ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b22      	cmp	r3, #34	; 0x22
 8003494:	d12a      	bne.n	80034ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d108      	bne.n	80034b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034b0:	e01c      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d103      	bne.n	80034c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f88e 	bl	80035e0 <I2C_MemoryTransmit_TXE_BTF>
}
 80034c4:	e012      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034ea:	e7ff      	b.n	80034ec <I2C_MasterTransmit_TXE+0x130>
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b21      	cmp	r3, #33	; 0x21
 800350c:	d164      	bne.n	80035d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d012      	beq.n	800353e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	781a      	ldrb	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800353c:	e04c      	b.n	80035d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d01d      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d01a      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003550:	d016      	beq.n	8003580 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003560:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2211      	movs	r2, #17
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff feb7 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
}
 800357e:	e02b      	b.n	80035d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800358e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d107      	bne.n	80035ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fed2 	bl	800336c <HAL_I2C_MemTxCpltCallback>
}
 80035c8:	e006      	b.n	80035d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fe8a 	bl	80032ec <HAL_I2C_MasterTxCpltCallback>
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11d      	bne.n	8003634 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d10b      	bne.n	8003618 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	b2da      	uxtb	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003616:	e077      	b.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	b29b      	uxth	r3, r3
 800361e:	121b      	asrs	r3, r3, #8
 8003620:	b2da      	uxtb	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003632:	e069      	b.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10b      	bne.n	8003654 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	b2da      	uxtb	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003652:	e059      	b.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	2b02      	cmp	r3, #2
 800365a:	d152      	bne.n	8003702 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b22      	cmp	r3, #34	; 0x22
 8003660:	d10d      	bne.n	800367e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003670:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800367c:	e044      	b.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b21      	cmp	r3, #33	; 0x21
 800368c:	d112      	bne.n	80036b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036b2:	e029      	b.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d124      	bne.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b21      	cmp	r3, #33	; 0x21
 80036c2:	d121      	bne.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff fe36 	bl	800336c <HAL_I2C_MemTxCpltCallback>
}
 8003700:	e002      	b.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff f8be 	bl	8002884 <I2C_Flush_DR>
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b22      	cmp	r3, #34	; 0x22
 8003722:	f040 80b9 	bne.w	8003898 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d921      	bls.n	800377e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b03      	cmp	r3, #3
 8003768:	f040 8096 	bne.w	8003898 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800377c:	e08c      	b.n	8003898 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	2b02      	cmp	r3, #2
 8003784:	d07f      	beq.n	8003886 <I2C_MasterReceive_RXNE+0x176>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d002      	beq.n	8003792 <I2C_MasterReceive_RXNE+0x82>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d179      	bne.n	8003886 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f001 fb66 	bl	8004e64 <I2C_WaitOnSTOPRequestThroughIT>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d14c      	bne.n	8003838 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d10a      	bne.n	800380e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fdba 	bl	8003380 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800380c:	e044      	b.n	8003898 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d002      	beq.n	8003822 <I2C_MasterReceive_RXNE+0x112>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b20      	cmp	r3, #32
 8003820:	d103      	bne.n	800382a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
 8003828:	e002      	b.n	8003830 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2212      	movs	r2, #18
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff fd65 	bl	8003300 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003836:	e02f      	b.n	8003898 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003846:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fd88 	bl	8003394 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003884:	e008      	b.n	8003898 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003894:	605a      	str	r2, [r3, #4]
}
 8003896:	e7ff      	b.n	8003898 <I2C_MasterReceive_RXNE+0x188>
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d11b      	bne.n	80038f0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80038ee:	e0c8      	b.n	8003a82 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d129      	bne.n	800394e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003908:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b04      	cmp	r3, #4
 800390e:	d00a      	beq.n	8003926 <I2C_MasterReceive_BTF+0x86>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d007      	beq.n	8003926 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003924:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800394c:	e099      	b.n	8003a82 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	f040 8081 	bne.w	8003a5c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d002      	beq.n	8003966 <I2C_MasterReceive_BTF+0xc6>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b10      	cmp	r3, #16
 8003964:	d108      	bne.n	8003978 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e019      	b.n	80039ac <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d002      	beq.n	8003984 <I2C_MasterReceive_BTF+0xe4>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d108      	bne.n	8003996 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e00a      	b.n	80039ac <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b10      	cmp	r3, #16
 800399a:	d007      	beq.n	80039ac <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a06:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d10a      	bne.n	8003a32 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fca8 	bl	8003380 <HAL_I2C_MemRxCpltCallback>
}
 8003a30:	e027      	b.n	8003a82 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d002      	beq.n	8003a46 <I2C_MasterReceive_BTF+0x1a6>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d103      	bne.n	8003a4e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4c:	e002      	b.n	8003a54 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2212      	movs	r2, #18
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fc53 	bl	8003300 <HAL_I2C_MasterRxCpltCallback>
}
 8003a5a:	e012      	b.n	8003a82 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d117      	bne.n	8003ace <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ab6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ab8:	e067      	b.n	8003b8a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]
}
 8003acc:	e05d      	b.n	8003b8a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad6:	d133      	bne.n	8003b40 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b21      	cmp	r3, #33	; 0x21
 8003ae2:	d109      	bne.n	8003af8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003af4:	611a      	str	r2, [r3, #16]
 8003af6:	e008      	b.n	8003b0a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <I2C_Master_SB+0x92>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d032      	beq.n	8003b8a <I2C_Master_SB+0x100>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d02d      	beq.n	8003b8a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b3c:	605a      	str	r2, [r3, #4]
}
 8003b3e:	e024      	b.n	8003b8a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10e      	bne.n	8003b66 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	11db      	asrs	r3, r3, #7
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f063 030f 	orn	r3, r3, #15
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]
}
 8003b64:	e011      	b.n	8003b8a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10d      	bne.n	8003b8a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	11db      	asrs	r3, r3, #7
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0306 	and.w	r3, r3, #6
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f063 030e 	orn	r3, r3, #14
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	611a      	str	r2, [r3, #16]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <I2C_Master_ADD10+0x26>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00c      	beq.n	8003bde <I2C_Master_ADD10+0x48>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bdc:	605a      	str	r2, [r3, #4]
  }
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b091      	sub	sp, #68	; 0x44
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b22      	cmp	r3, #34	; 0x22
 8003c12:	f040 8169 	bne.w	8003ee8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <I2C_Master_ADDR+0x54>
 8003c1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d10b      	bne.n	8003c3e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	633b      	str	r3, [r7, #48]	; 0x30
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	633b      	str	r3, [r7, #48]	; 0x30
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	e160      	b.n	8003f00 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11d      	bne.n	8003c82 <I2C_Master_ADDR+0x98>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c4e:	d118      	bne.n	8003c82 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c50:	2300      	movs	r3, #0
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c74:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	651a      	str	r2, [r3, #80]	; 0x50
 8003c80:	e13e      	b.n	8003f00 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d113      	bne.n	8003cb4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e115      	b.n	8003ee0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	f040 808a 	bne.w	8003dd4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cc6:	d137      	bne.n	8003d38 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce6:	d113      	bne.n	8003d10 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	e0e7      	b.n	8003ee0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	623b      	str	r3, [r7, #32]
 8003d24:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e0d3      	b.n	8003ee0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d02e      	beq.n	8003d9c <I2C_Master_ADDR+0x1b2>
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d02b      	beq.n	8003d9c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	2b12      	cmp	r3, #18
 8003d48:	d102      	bne.n	8003d50 <I2C_Master_ADDR+0x166>
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d125      	bne.n	8003d9c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d00e      	beq.n	8003d74 <I2C_Master_ADDR+0x18a>
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d00b      	beq.n	8003d74 <I2C_Master_ADDR+0x18a>
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d008      	beq.n	8003d74 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	e007      	b.n	8003d84 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d82:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	e0a1      	b.n	8003ee0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003daa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dac:	2300      	movs	r3, #0
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e085      	b.n	8003ee0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d14d      	bne.n	8003e7a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d016      	beq.n	8003e12 <I2C_Master_ADDR+0x228>
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d013      	beq.n	8003e12 <I2C_Master_ADDR+0x228>
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d010      	beq.n	8003e12 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e007      	b.n	8003e22 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e30:	d117      	bne.n	8003e62 <I2C_Master_ADDR+0x278>
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e38:	d00b      	beq.n	8003e52 <I2C_Master_ADDR+0x268>
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d008      	beq.n	8003e52 <I2C_Master_ADDR+0x268>
 8003e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d005      	beq.n	8003e52 <I2C_Master_ADDR+0x268>
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d002      	beq.n	8003e52 <I2C_Master_ADDR+0x268>
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d107      	bne.n	8003e62 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e60:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	e032      	b.n	8003ee0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e88:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e98:	d117      	bne.n	8003eca <I2C_Master_ADDR+0x2e0>
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea0:	d00b      	beq.n	8003eba <I2C_Master_ADDR+0x2d0>
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d008      	beq.n	8003eba <I2C_Master_ADDR+0x2d0>
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d005      	beq.n	8003eba <I2C_Master_ADDR+0x2d0>
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d002      	beq.n	8003eba <I2C_Master_ADDR+0x2d0>
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d107      	bne.n	8003eca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ee6:	e00b      	b.n	8003f00 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
}
 8003efe:	e7ff      	b.n	8003f00 <I2C_Master_ADDR+0x316>
 8003f00:	bf00      	nop
 8003f02:	3744      	adds	r7, #68	; 0x44
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02b      	beq.n	8003f7e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d114      	bne.n	8003f7e <I2C_SlaveTransmit_TXE+0x72>
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b29      	cmp	r3, #41	; 0x29
 8003f58:	d111      	bne.n	8003f7e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2221      	movs	r2, #33	; 0x21
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2228      	movs	r2, #40	; 0x28
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff f9cb 	bl	8003314 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d011      	beq.n	8003fbc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d02c      	beq.n	800403c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d114      	bne.n	800403c <I2C_SlaveReceive_RXNE+0x74>
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b2a      	cmp	r3, #42	; 0x2a
 8004016:	d111      	bne.n	800403c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2222      	movs	r2, #34	; 0x22
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2228      	movs	r2, #40	; 0x28
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff f976 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800403c:	bf00      	nop
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d012      	beq.n	800407c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040a2:	2b28      	cmp	r3, #40	; 0x28
 80040a4:	d125      	bne.n	80040f2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	81bb      	strh	r3, [r7, #12]
 80040d4:	e002      	b.n	80040dc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040e4:	89ba      	ldrh	r2, [r7, #12]
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff f926 	bl	800333c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80040f0:	e00e      	b.n	8004110 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004126:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004136:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004164:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004174:	d172      	bne.n	800425c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b22      	cmp	r3, #34	; 0x22
 800417a:	d002      	beq.n	8004182 <I2C_Slave_STOPF+0x6a>
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b2a      	cmp	r3, #42	; 0x2a
 8004180:	d135      	bne.n	80041ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f043 0204 	orr.w	r2, r3, #4
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe f859 	bl	8002272 <HAL_DMA_GetState>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d049      	beq.n	800425a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	4a69      	ldr	r2, [pc, #420]	; (8004370 <I2C_Slave_STOPF+0x258>)
 80041cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe f82b 	bl	800222e <HAL_DMA_Abort_IT>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03d      	beq.n	800425a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041e8:	4610      	mov	r0, r2
 80041ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041ec:	e035      	b.n	800425a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f043 0204 	orr.w	r2, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004220:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe f823 	bl	8002272 <HAL_DMA_GetState>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d014      	beq.n	800425c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	4a4e      	ldr	r2, [pc, #312]	; (8004370 <I2C_Slave_STOPF+0x258>)
 8004238:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	4618      	mov	r0, r3
 8004240:	f7fd fff5 	bl	800222e <HAL_DMA_Abort_IT>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004254:	4610      	mov	r0, r2
 8004256:	4798      	blx	r3
 8004258:	e000      	b.n	800425c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800425a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d03e      	beq.n	80042e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b04      	cmp	r3, #4
 8004272:	d112      	bne.n	800429a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d112      	bne.n	80042ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f043 0204 	orr.w	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f8b7 	bl	8004460 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80042f2:	e039      	b.n	8004368 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b2a      	cmp	r3, #42	; 0x2a
 80042f8:	d109      	bne.n	800430e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2228      	movs	r2, #40	; 0x28
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff f80d 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b28      	cmp	r3, #40	; 0x28
 8004318:	d111      	bne.n	800433e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a15      	ldr	r2, [pc, #84]	; (8004374 <I2C_Slave_STOPF+0x25c>)
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff f80e 	bl	8003358 <HAL_I2C_ListenCpltCallback>
}
 800433c:	e014      	b.n	8004368 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	2b22      	cmp	r3, #34	; 0x22
 8004344:	d002      	beq.n	800434c <I2C_Slave_STOPF+0x234>
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b22      	cmp	r3, #34	; 0x22
 800434a:	d10d      	bne.n	8004368 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe ffe0 	bl	8003328 <HAL_I2C_SlaveRxCpltCallback>
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	080049c1 	.word	0x080049c1
 8004374:	ffff0000 	.word	0xffff0000

08004378 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d002      	beq.n	800439a <I2C_Slave_AF+0x22>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b20      	cmp	r3, #32
 8004398:	d129      	bne.n	80043ee <I2C_Slave_AF+0x76>
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b28      	cmp	r3, #40	; 0x28
 800439e:	d126      	bne.n	80043ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a2e      	ldr	r2, [pc, #184]	; (800445c <I2C_Slave_AF+0xe4>)
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fe ffb6 	bl	8003358 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80043ec:	e031      	b.n	8004452 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b21      	cmp	r3, #33	; 0x21
 80043f2:	d129      	bne.n	8004448 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <I2C_Slave_AF+0xe4>)
 80043f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2221      	movs	r2, #33	; 0x21
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800441e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004428:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004438:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fe fa22 	bl	8002884 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7fe ff67 	bl	8003314 <HAL_I2C_SlaveTxCpltCallback>
}
 8004446:	e004      	b.n	8004452 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004450:	615a      	str	r2, [r3, #20]
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	ffff0000 	.word	0xffff0000

08004460 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004476:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	2b10      	cmp	r3, #16
 800447c:	d002      	beq.n	8004484 <I2C_ITError+0x24>
 800447e:	7bbb      	ldrb	r3, [r7, #14]
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d10a      	bne.n	800449a <I2C_ITError+0x3a>
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b22      	cmp	r3, #34	; 0x22
 8004488:	d107      	bne.n	800449a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004498:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044a0:	2b28      	cmp	r3, #40	; 0x28
 80044a2:	d107      	bne.n	80044b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2228      	movs	r2, #40	; 0x28
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044b2:	e015      	b.n	80044e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c2:	d00a      	beq.n	80044da <I2C_ITError+0x7a>
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b60      	cmp	r3, #96	; 0x60
 80044c8:	d007      	beq.n	80044da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ee:	d162      	bne.n	80045b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d020      	beq.n	8004550 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	4a6a      	ldr	r2, [pc, #424]	; (80046bc <I2C_ITError+0x25c>)
 8004514:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd fe87 	bl	800222e <HAL_DMA_Abort_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8089 	beq.w	800463a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800454a:	4610      	mov	r0, r2
 800454c:	4798      	blx	r3
 800454e:	e074      	b.n	800463a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	4a59      	ldr	r2, [pc, #356]	; (80046bc <I2C_ITError+0x25c>)
 8004556:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	4618      	mov	r0, r3
 800455e:	f7fd fe66 	bl	800222e <HAL_DMA_Abort_IT>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d068      	beq.n	800463a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d10b      	bne.n	800458e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045b0:	4610      	mov	r0, r2
 80045b2:	4798      	blx	r3
 80045b4:	e041      	b.n	800463a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b60      	cmp	r3, #96	; 0x60
 80045c0:	d125      	bne.n	800460e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d10b      	bne.n	80045f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fe fece 	bl	80033a8 <HAL_I2C_AbortCpltCallback>
 800460c:	e015      	b.n	800463a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d10b      	bne.n	8004634 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fe fead 	bl	8003394 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800465a:	2b00      	cmp	r3, #0
 800465c:	d104      	bne.n	8004668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004676:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d113      	bne.n	80046b4 <I2C_ITError+0x254>
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b28      	cmp	r3, #40	; 0x28
 8004690:	d110      	bne.n	80046b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <I2C_ITError+0x260>)
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe fe52 	bl	8003358 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	080049c1 	.word	0x080049c1
 80046c0:	ffff0000 	.word	0xffff0000

080046c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	4608      	mov	r0, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	461a      	mov	r2, r3
 80046d2:	4603      	mov	r3, r0
 80046d4:	817b      	strh	r3, [r7, #10]
 80046d6:	460b      	mov	r3, r1
 80046d8:	813b      	strh	r3, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fa08 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004714:	d103      	bne.n	800471e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800471c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e05f      	b.n	80047e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004722:	897b      	ldrh	r3, [r7, #10]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004730:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	492d      	ldr	r1, [pc, #180]	; (80047ec <I2C_RequestMemoryWrite+0x128>)
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fa63 	bl	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e04c      	b.n	80047e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800475e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004760:	6a39      	ldr	r1, [r7, #32]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 faee 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00d      	beq.n	800478a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	2b04      	cmp	r3, #4
 8004774:	d107      	bne.n	8004786 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004784:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e02b      	b.n	80047e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004790:	893b      	ldrh	r3, [r7, #8]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	611a      	str	r2, [r3, #16]
 800479a:	e021      	b.n	80047e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	6a39      	ldr	r1, [r7, #32]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fac8 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d107      	bne.n	80047d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e005      	b.n	80047e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047d6:	893b      	ldrh	r3, [r7, #8]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	00010002 	.word	0x00010002

080047f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004818:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2200      	movs	r2, #0
 8004832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f96a 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004850:	d103      	bne.n	800485a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0aa      	b.n	80049b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800486c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	6a3a      	ldr	r2, [r7, #32]
 8004872:	4952      	ldr	r1, [pc, #328]	; (80049bc <I2C_RequestMemoryRead+0x1cc>)
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f9c5 	bl	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e097      	b.n	80049b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	6a39      	ldr	r1, [r7, #32]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa50 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d107      	bne.n	80048c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e076      	b.n	80049b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048cc:	893b      	ldrh	r3, [r7, #8]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	e021      	b.n	800491c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	b29b      	uxth	r3, r3
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	6a39      	ldr	r1, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fa2a 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d107      	bne.n	800490e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e050      	b.n	80049b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004912:	893b      	ldrh	r3, [r7, #8]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	6a39      	ldr	r1, [r7, #32]
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fa0f 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2b04      	cmp	r3, #4
 8004932:	d107      	bne.n	8004944 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004942:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e035      	b.n	80049b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004956:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	2200      	movs	r2, #0
 8004960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f8d3 	bl	8004b10 <I2C_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497e:	d103      	bne.n	8004988 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e013      	b.n	80049b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800498c:	897b      	ldrh	r3, [r7, #10]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	6a3a      	ldr	r2, [r7, #32]
 80049a0:	4906      	ldr	r1, [pc, #24]	; (80049bc <I2C_RequestMemoryRead+0x1cc>)
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f92e 	bl	8004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	00010002 	.word	0x00010002

080049c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049da:	4b4b      	ldr	r3, [pc, #300]	; (8004b08 <I2C_DMAAbort+0x148>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	08db      	lsrs	r3, r3, #3
 80049e0:	4a4a      	ldr	r2, [pc, #296]	; (8004b0c <I2C_DMAAbort+0x14c>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	0a1a      	lsrs	r2, r3, #8
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	00da      	lsls	r2, r3, #3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a06:	e00a      	b.n	8004a1e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1c:	d0ea      	beq.n	80049f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	2200      	movs	r2, #0
 8004a62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b60      	cmp	r3, #96	; 0x60
 8004a8e:	d10e      	bne.n	8004aae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7fe fc7e 	bl	80033a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004aac:	e027      	b.n	8004afe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ab4:	2b28      	cmp	r3, #40	; 0x28
 8004ab6:	d117      	bne.n	8004ae8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2228      	movs	r2, #40	; 0x28
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ae6:	e007      	b.n	8004af8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004af8:	6978      	ldr	r0, [r7, #20]
 8004afa:	f7fe fc4b 	bl	8003394 <HAL_I2C_ErrorCallback>
}
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	200000d8 	.word	0x200000d8
 8004b0c:	14f8b589 	.word	0x14f8b589

08004b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b20:	e048      	b.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d044      	beq.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fd f9cf 	bl	8001ecc <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d139      	bne.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	0c1b      	lsrs	r3, r3, #16
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10d      	bne.n	8004b66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	43da      	mvns	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4013      	ands	r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	e00c      	b.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	43da      	mvns	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d116      	bne.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e023      	b.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	0c1b      	lsrs	r3, r3, #16
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10d      	bne.n	8004bda <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	e00c      	b.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d093      	beq.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c12:	e071      	b.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d123      	bne.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	f043 0204 	orr.w	r2, r3, #4
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e067      	b.n	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d041      	beq.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c74:	f7fd f92a 	bl	8001ecc <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d302      	bcc.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d136      	bne.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d10c      	bne.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf14      	ite	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	2300      	moveq	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	e00b      	b.n	8004cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	43da      	mvns	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e021      	b.n	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	0c1b      	lsrs	r3, r3, #16
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10c      	bne.n	8004d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	43da      	mvns	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e00b      	b.n	8004d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	43da      	mvns	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bf14      	ite	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	2300      	moveq	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f47f af6d 	bne.w	8004c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d50:	e034      	b.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f915 	bl	8004f82 <I2C_IsAcknowledgeFailed>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e034      	b.n	8004dcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d028      	beq.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fd f8af 	bl	8001ecc <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d11d      	bne.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d016      	beq.n	8004dbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f043 0220 	orr.w	r2, r3, #32
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e007      	b.n	8004dcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d1c3      	bne.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004de0:	e034      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f8cd 	bl	8004f82 <I2C_IsAcknowledgeFailed>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e034      	b.n	8004e5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d028      	beq.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fd f867 	bl	8001ecc <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11d      	bne.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d016      	beq.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	f043 0220 	orr.w	r2, r3, #32
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e007      	b.n	8004e5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d1c3      	bne.n	8004de2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	08db      	lsrs	r3, r3, #3
 8004e76:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0a1a      	lsrs	r2, r3, #8
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d107      	bne.n	8004ea2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e008      	b.n	8004eb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb0:	d0e9      	beq.n	8004e86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	200000d8 	.word	0x200000d8
 8004ec4:	14f8b589 	.word	0x14f8b589

08004ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ed4:	e049      	b.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d119      	bne.n	8004f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0210 	mvn.w	r2, #16
 8004eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e030      	b.n	8004f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f18:	f7fc ffd8 	bl	8001ecc <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11d      	bne.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d016      	beq.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e007      	b.n	8004f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d1ae      	bne.n	8004ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d11b      	bne.n	8004fd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f043 0204 	orr.w	r2, r3, #4
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ff0:	d103      	bne.n	8004ffa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ff8:	e007      	b.n	800500a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005002:	d102      	bne.n	800500a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2208      	movs	r2, #8
 8005008:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e267      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d075      	beq.n	8005122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005036:	4b88      	ldr	r3, [pc, #544]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
 800503e:	2b04      	cmp	r3, #4
 8005040:	d00c      	beq.n	800505c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b85      	ldr	r3, [pc, #532]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800504a:	2b08      	cmp	r3, #8
 800504c:	d112      	bne.n	8005074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800504e:	4b82      	ldr	r3, [pc, #520]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505a:	d10b      	bne.n	8005074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800505c:	4b7e      	ldr	r3, [pc, #504]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d05b      	beq.n	8005120 <HAL_RCC_OscConfig+0x108>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d157      	bne.n	8005120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e242      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d106      	bne.n	800508c <HAL_RCC_OscConfig+0x74>
 800507e:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a75      	ldr	r2, [pc, #468]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e01d      	b.n	80050c8 <HAL_RCC_OscConfig+0xb0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x98>
 8005096:	4b70      	ldr	r3, [pc, #448]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6f      	ldr	r2, [pc, #444]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800509c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	4b6d      	ldr	r3, [pc, #436]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a6c      	ldr	r2, [pc, #432]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0xb0>
 80050b0:	4b69      	ldr	r3, [pc, #420]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a68      	ldr	r2, [pc, #416]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	4b66      	ldr	r3, [pc, #408]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a65      	ldr	r2, [pc, #404]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d013      	beq.n	80050f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fc fefc 	bl	8001ecc <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fc fef8 	bl	8001ecc <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e207      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ea:	4b5b      	ldr	r3, [pc, #364]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0xc0>
 80050f6:	e014      	b.n	8005122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fc fee8 	bl	8001ecc <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005100:	f7fc fee4 	bl	8001ecc <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	; 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e1f3      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	4b51      	ldr	r3, [pc, #324]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0xe8>
 800511e:	e000      	b.n	8005122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d063      	beq.n	80051f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800512e:	4b4a      	ldr	r3, [pc, #296]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00b      	beq.n	8005152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005142:	2b08      	cmp	r3, #8
 8005144:	d11c      	bne.n	8005180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005146:	4b44      	ldr	r3, [pc, #272]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d116      	bne.n	8005180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005152:	4b41      	ldr	r3, [pc, #260]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_RCC_OscConfig+0x152>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d001      	beq.n	800516a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e1c7      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516a:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4937      	ldr	r1, [pc, #220]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800517e:	e03a      	b.n	80051f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005188:	4b34      	ldr	r3, [pc, #208]	; (800525c <HAL_RCC_OscConfig+0x244>)
 800518a:	2201      	movs	r2, #1
 800518c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518e:	f7fc fe9d 	bl	8001ecc <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005196:	f7fc fe99 	bl	8001ecc <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e1a8      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a8:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4b28      	ldr	r3, [pc, #160]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4925      	ldr	r1, [pc, #148]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	e015      	b.n	80051f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <HAL_RCC_OscConfig+0x244>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fc fe7c 	bl	8001ecc <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d8:	f7fc fe78 	bl	8001ecc <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e187      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ea:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d036      	beq.n	8005270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <HAL_RCC_OscConfig+0x248>)
 800520c:	2201      	movs	r2, #1
 800520e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005210:	f7fc fe5c 	bl	8001ecc <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005218:	f7fc fe58 	bl	8001ecc <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e167      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_OscConfig+0x240>)
 800522c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x200>
 8005236:	e01b      	b.n	8005270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_RCC_OscConfig+0x248>)
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523e:	f7fc fe45 	bl	8001ecc <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	e00e      	b.n	8005264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005246:	f7fc fe41 	bl	8001ecc <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d907      	bls.n	8005264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e150      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
 8005258:	40023800 	.word	0x40023800
 800525c:	42470000 	.word	0x42470000
 8005260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	4b88      	ldr	r3, [pc, #544]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ea      	bne.n	8005246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8097 	beq.w	80053ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005282:	4b81      	ldr	r3, [pc, #516]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b7d      	ldr	r3, [pc, #500]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	4a7c      	ldr	r2, [pc, #496]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	; 0x40
 800529e:	4b7a      	ldr	r3, [pc, #488]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b77      	ldr	r3, [pc, #476]	; (800548c <HAL_RCC_OscConfig+0x474>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ba:	4b74      	ldr	r3, [pc, #464]	; (800548c <HAL_RCC_OscConfig+0x474>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a73      	ldr	r2, [pc, #460]	; (800548c <HAL_RCC_OscConfig+0x474>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c6:	f7fc fe01 	bl	8001ecc <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fc fdfd 	bl	8001ecc <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e10c      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	4b6a      	ldr	r3, [pc, #424]	; (800548c <HAL_RCC_OscConfig+0x474>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d106      	bne.n	8005302 <HAL_RCC_OscConfig+0x2ea>
 80052f4:	4b64      	ldr	r3, [pc, #400]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	4a63      	ldr	r2, [pc, #396]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005300:	e01c      	b.n	800533c <HAL_RCC_OscConfig+0x324>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b05      	cmp	r3, #5
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x30c>
 800530a:	4b5f      	ldr	r3, [pc, #380]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a5e      	ldr	r2, [pc, #376]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
 8005316:	4b5c      	ldr	r3, [pc, #368]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a5b      	ldr	r2, [pc, #364]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0x324>
 8005324:	4b58      	ldr	r3, [pc, #352]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	4a57      	ldr	r2, [pc, #348]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	6713      	str	r3, [r2, #112]	; 0x70
 8005330:	4b55      	ldr	r3, [pc, #340]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	4a54      	ldr	r2, [pc, #336]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fc fdc2 	bl	8001ecc <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	e00a      	b.n	8005362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fc fdbe 	bl	8001ecc <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0cb      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005362:	4b49      	ldr	r3, [pc, #292]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ee      	beq.n	800534c <HAL_RCC_OscConfig+0x334>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005370:	f7fc fdac 	bl	8001ecc <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fc fda8 	bl	8001ecc <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e0b5      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538e:	4b3e      	ldr	r3, [pc, #248]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ee      	bne.n	8005378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a0:	4b39      	ldr	r3, [pc, #228]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	4a38      	ldr	r2, [pc, #224]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80053a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80a1 	beq.w	80054f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b6:	4b34      	ldr	r3, [pc, #208]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d05c      	beq.n	800547c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d141      	bne.n	800544e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ca:	4b31      	ldr	r3, [pc, #196]	; (8005490 <HAL_RCC_OscConfig+0x478>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fc fd7c 	bl	8001ecc <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d8:	f7fc fd78 	bl	8001ecc <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e087      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ea:	4b27      	ldr	r3, [pc, #156]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	3b01      	subs	r3, #1
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	061b      	lsls	r3, r3, #24
 800541a:	491b      	ldr	r1, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x478>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005426:	f7fc fd51 	bl	8001ecc <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542e:	f7fc fd4d 	bl	8001ecc <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e05c      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x416>
 800544c:	e054      	b.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <HAL_RCC_OscConfig+0x478>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fc fd3a 	bl	8001ecc <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545c:	f7fc fd36 	bl	8001ecc <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e045      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_RCC_OscConfig+0x470>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x444>
 800547a:	e03d      	b.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d107      	bne.n	8005494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e038      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
 8005488:	40023800 	.word	0x40023800
 800548c:	40007000 	.word	0x40007000
 8005490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005494:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCC_OscConfig+0x4ec>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d028      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d121      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d11a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d111      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	3b01      	subs	r3, #1
 80054de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800

08005508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0cc      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b68      	ldr	r3, [pc, #416]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d90c      	bls.n	8005544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b65      	ldr	r3, [pc, #404]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005532:	4b63      	ldr	r3, [pc, #396]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0b8      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d020      	beq.n	8005592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800555c:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a58      	ldr	r2, [pc, #352]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005574:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4a52      	ldr	r2, [pc, #328]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800557e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005580:	4b50      	ldr	r3, [pc, #320]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	494d      	ldr	r1, [pc, #308]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	4313      	orrs	r3, r2
 8005590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d044      	beq.n	8005628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a6:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d119      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e07f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d003      	beq.n	80055c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b3f      	ldr	r3, [pc, #252]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e06f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d6:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e067      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f023 0203 	bic.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4934      	ldr	r1, [pc, #208]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f8:	f7fc fc68 	bl	8001ecc <HAL_GetTick>
 80055fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	e00a      	b.n	8005616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005600:	f7fc fc64 	bl	8001ecc <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	f241 3288 	movw	r2, #5000	; 0x1388
 800560e:	4293      	cmp	r3, r2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e04f      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 020c 	and.w	r2, r3, #12
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	429a      	cmp	r2, r3
 8005626:	d1eb      	bne.n	8005600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005628:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d20c      	bcs.n	8005650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005636:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e032      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800565c:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4916      	ldr	r1, [pc, #88]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800566a:	4313      	orrs	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	490e      	ldr	r1, [pc, #56]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800568e:	f000 f821 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8005692:	4602      	mov	r2, r0
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	490a      	ldr	r1, [pc, #40]	; (80056c8 <HAL_RCC_ClockConfig+0x1c0>)
 80056a0:	5ccb      	ldrb	r3, [r1, r3]
 80056a2:	fa22 f303 	lsr.w	r3, r2, r3
 80056a6:	4a09      	ldr	r2, [pc, #36]	; (80056cc <HAL_RCC_ClockConfig+0x1c4>)
 80056a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fc fbc8 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40023c00 	.word	0x40023c00
 80056c4:	40023800 	.word	0x40023800
 80056c8:	08009f6c 	.word	0x08009f6c
 80056cc:	200000d8 	.word	0x200000d8
 80056d0:	200000dc 	.word	0x200000dc

080056d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d8:	b094      	sub	sp, #80	; 0x50
 80056da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	647b      	str	r3, [r7, #68]	; 0x44
 80056e0:	2300      	movs	r3, #0
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e4:	2300      	movs	r3, #0
 80056e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ec:	4b79      	ldr	r3, [pc, #484]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 030c 	and.w	r3, r3, #12
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d00d      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0x40>
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	f200 80e1 	bhi.w	80058c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x34>
 8005702:	2b04      	cmp	r3, #4
 8005704:	d003      	beq.n	800570e <HAL_RCC_GetSysClockFreq+0x3a>
 8005706:	e0db      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005708:	4b73      	ldr	r3, [pc, #460]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800570a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800570c:	e0db      	b.n	80058c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800570e:	4b73      	ldr	r3, [pc, #460]	; (80058dc <HAL_RCC_GetSysClockFreq+0x208>)
 8005710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005712:	e0d8      	b.n	80058c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005714:	4b6f      	ldr	r3, [pc, #444]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800571c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800571e:	4b6d      	ldr	r3, [pc, #436]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d063      	beq.n	80057f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572a:	4b6a      	ldr	r3, [pc, #424]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	099b      	lsrs	r3, r3, #6
 8005730:	2200      	movs	r2, #0
 8005732:	63bb      	str	r3, [r7, #56]	; 0x38
 8005734:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573c:	633b      	str	r3, [r7, #48]	; 0x30
 800573e:	2300      	movs	r3, #0
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
 8005742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005746:	4622      	mov	r2, r4
 8005748:	462b      	mov	r3, r5
 800574a:	f04f 0000 	mov.w	r0, #0
 800574e:	f04f 0100 	mov.w	r1, #0
 8005752:	0159      	lsls	r1, r3, #5
 8005754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005758:	0150      	lsls	r0, r2, #5
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4621      	mov	r1, r4
 8005760:	1a51      	subs	r1, r2, r1
 8005762:	6139      	str	r1, [r7, #16]
 8005764:	4629      	mov	r1, r5
 8005766:	eb63 0301 	sbc.w	r3, r3, r1
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005778:	4659      	mov	r1, fp
 800577a:	018b      	lsls	r3, r1, #6
 800577c:	4651      	mov	r1, sl
 800577e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005782:	4651      	mov	r1, sl
 8005784:	018a      	lsls	r2, r1, #6
 8005786:	4651      	mov	r1, sl
 8005788:	ebb2 0801 	subs.w	r8, r2, r1
 800578c:	4659      	mov	r1, fp
 800578e:	eb63 0901 	sbc.w	r9, r3, r1
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800579e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057a6:	4690      	mov	r8, r2
 80057a8:	4699      	mov	r9, r3
 80057aa:	4623      	mov	r3, r4
 80057ac:	eb18 0303 	adds.w	r3, r8, r3
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	462b      	mov	r3, r5
 80057b4:	eb49 0303 	adc.w	r3, r9, r3
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057c6:	4629      	mov	r1, r5
 80057c8:	024b      	lsls	r3, r1, #9
 80057ca:	4621      	mov	r1, r4
 80057cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057d0:	4621      	mov	r1, r4
 80057d2:	024a      	lsls	r2, r1, #9
 80057d4:	4610      	mov	r0, r2
 80057d6:	4619      	mov	r1, r3
 80057d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057da:	2200      	movs	r2, #0
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057e4:	f7fb f9e0 	bl	8000ba8 <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4613      	mov	r3, r2
 80057ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f0:	e058      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f2:	4b38      	ldr	r3, [pc, #224]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	2200      	movs	r2, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	4611      	mov	r1, r2
 80057fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	2300      	movs	r3, #0
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	f04f 0000 	mov.w	r0, #0
 8005814:	f04f 0100 	mov.w	r1, #0
 8005818:	0159      	lsls	r1, r3, #5
 800581a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800581e:	0150      	lsls	r0, r2, #5
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4641      	mov	r1, r8
 8005826:	ebb2 0a01 	subs.w	sl, r2, r1
 800582a:	4649      	mov	r1, r9
 800582c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800583c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005844:	ebb2 040a 	subs.w	r4, r2, sl
 8005848:	eb63 050b 	sbc.w	r5, r3, fp
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	00eb      	lsls	r3, r5, #3
 8005856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800585a:	00e2      	lsls	r2, r4, #3
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	4643      	mov	r3, r8
 8005862:	18e3      	adds	r3, r4, r3
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	464b      	mov	r3, r9
 8005868:	eb45 0303 	adc.w	r3, r5, r3
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800587a:	4629      	mov	r1, r5
 800587c:	028b      	lsls	r3, r1, #10
 800587e:	4621      	mov	r1, r4
 8005880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005884:	4621      	mov	r1, r4
 8005886:	028a      	lsls	r2, r1, #10
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588e:	2200      	movs	r2, #0
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	61fa      	str	r2, [r7, #28]
 8005894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005898:	f7fb f986 	bl	8000ba8 <__aeabi_uldivmod>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4613      	mov	r3, r2
 80058a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058a4:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	3301      	adds	r3, #1
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80058b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058be:	e002      	b.n	80058c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80058c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3750      	adds	r7, #80	; 0x50
 80058cc:	46bd      	mov	sp, r7
 80058ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d2:	bf00      	nop
 80058d4:	40023800 	.word	0x40023800
 80058d8:	00f42400 	.word	0x00f42400
 80058dc:	007a1200 	.word	0x007a1200

080058e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	200000d8 	.word	0x200000d8

080058f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058fc:	f7ff fff0 	bl	80058e0 <HAL_RCC_GetHCLKFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	0a9b      	lsrs	r3, r3, #10
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	4903      	ldr	r1, [pc, #12]	; (800591c <HAL_RCC_GetPCLK1Freq+0x24>)
 800590e:	5ccb      	ldrb	r3, [r1, r3]
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005914:	4618      	mov	r0, r3
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40023800 	.word	0x40023800
 800591c:	08009f7c 	.word	0x08009f7c

08005920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005924:	f7ff ffdc 	bl	80058e0 <HAL_RCC_GetHCLKFreq>
 8005928:	4602      	mov	r2, r0
 800592a:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	0b5b      	lsrs	r3, r3, #13
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	4903      	ldr	r1, [pc, #12]	; (8005944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005936:	5ccb      	ldrb	r3, [r1, r3]
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40023800 	.word	0x40023800
 8005944:	08009f7c 	.word	0x08009f7c

08005948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e041      	b.n	80059de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fc f888 	bl	8001a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f000 f946 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d020      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01b      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f06f 0202 	mvn.w	r2, #2
 8005a1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f8d2 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005a36:	e005      	b.n	8005a44 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f8c4 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8d5 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d020      	beq.n	8005a96 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01b      	beq.n	8005a96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f06f 0204 	mvn.w	r2, #4
 8005a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f8ac 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005a82:	e005      	b.n	8005a90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f89e 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8af 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01b      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f06f 0208 	mvn.w	r2, #8
 8005ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2204      	movs	r2, #4
 8005ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f886 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005ace:	e005      	b.n	8005adc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f878 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f889 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d020      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01b      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f06f 0210 	mvn.w	r2, #16
 8005afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2208      	movs	r2, #8
 8005b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f860 	bl	8005bda <HAL_TIM_IC_CaptureCallback>
 8005b1a:	e005      	b.n	8005b28 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f852 	bl	8005bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f863 	bl	8005bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00c      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f06f 0201 	mvn.w	r2, #1
 8005b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fb ff0d 	bl	800196c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00c      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f983 	bl	8005e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00c      	beq.n	8005b9a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f834 	bl	8005c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00c      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f06f 0220 	mvn.w	r2, #32
 8005bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f955 	bl	8005e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a46      	ldr	r2, [pc, #280]	; (8005d44 <TIM_Base_SetConfig+0x12c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d013      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c36:	d00f      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a43      	ldr	r2, [pc, #268]	; (8005d48 <TIM_Base_SetConfig+0x130>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a42      	ldr	r2, [pc, #264]	; (8005d4c <TIM_Base_SetConfig+0x134>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a41      	ldr	r2, [pc, #260]	; (8005d50 <TIM_Base_SetConfig+0x138>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <TIM_Base_SetConfig+0x13c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d108      	bne.n	8005c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a35      	ldr	r2, [pc, #212]	; (8005d44 <TIM_Base_SetConfig+0x12c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d02b      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d027      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a32      	ldr	r2, [pc, #200]	; (8005d48 <TIM_Base_SetConfig+0x130>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d023      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a31      	ldr	r2, [pc, #196]	; (8005d4c <TIM_Base_SetConfig+0x134>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01f      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a30      	ldr	r2, [pc, #192]	; (8005d50 <TIM_Base_SetConfig+0x138>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01b      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <TIM_Base_SetConfig+0x13c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d017      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2e      	ldr	r2, [pc, #184]	; (8005d58 <TIM_Base_SetConfig+0x140>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2d      	ldr	r2, [pc, #180]	; (8005d5c <TIM_Base_SetConfig+0x144>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00f      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2c      	ldr	r2, [pc, #176]	; (8005d60 <TIM_Base_SetConfig+0x148>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2b      	ldr	r2, [pc, #172]	; (8005d64 <TIM_Base_SetConfig+0x14c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <TIM_Base_SetConfig+0x150>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a29      	ldr	r2, [pc, #164]	; (8005d6c <TIM_Base_SetConfig+0x154>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d108      	bne.n	8005cdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a10      	ldr	r2, [pc, #64]	; (8005d44 <TIM_Base_SetConfig+0x12c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_Base_SetConfig+0xf8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a12      	ldr	r2, [pc, #72]	; (8005d54 <TIM_Base_SetConfig+0x13c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d103      	bne.n	8005d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f023 0201 	bic.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	611a      	str	r2, [r3, #16]
  }
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40010000 	.word	0x40010000
 8005d48:	40000400 	.word	0x40000400
 8005d4c:	40000800 	.word	0x40000800
 8005d50:	40000c00 	.word	0x40000c00
 8005d54:	40010400 	.word	0x40010400
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40014400 	.word	0x40014400
 8005d60:	40014800 	.word	0x40014800
 8005d64:	40001800 	.word	0x40001800
 8005d68:	40001c00 	.word	0x40001c00
 8005d6c:	40002000 	.word	0x40002000

08005d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e05a      	b.n	8005e3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd4:	d01d      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1a      	ldr	r2, [pc, #104]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10c      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40010400 	.word	0x40010400
 8005e60:	40014000 	.word	0x40014000
 8005e64:	40001800 	.word	0x40001800

08005e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e042      	b.n	8005f28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7fb fe06 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2224      	movs	r2, #36	; 0x24
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fd69 	bl	80069ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d175      	bne.n	800603c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_UART_Transmit+0x2c>
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e06e      	b.n	800603e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2221      	movs	r2, #33	; 0x21
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6e:	f7fb ffad 	bl	8001ecc <HAL_GetTick>
 8005f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d108      	bne.n	8005f9c <HAL_UART_Transmit+0x6c>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e003      	b.n	8005fa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fa4:	e02e      	b.n	8006004 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2200      	movs	r2, #0
 8005fae:	2180      	movs	r1, #128	; 0x80
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fb05 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e03a      	b.n	800603e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e007      	b.n	8005ff6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1cb      	bne.n	8005fa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2140      	movs	r1, #64	; 0x40
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fad1 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e006      	b.n	800603e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b0ba      	sub	sp, #232	; 0xe8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800606e:	2300      	movs	r3, #0
 8006070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10f      	bne.n	80060ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_UART_IRQHandler+0x66>
 800609a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fbc2 	bl	8006830 <UART_Receive_IT>
      return;
 80060ac:	e25b      	b.n	8006566 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 80de 	beq.w	8006274 <HAL_UART_IRQHandler+0x22c>
 80060b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80d1 	beq.w	8006274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_UART_IRQHandler+0xae>
 80060de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	f043 0201 	orr.w	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <HAL_UART_IRQHandler+0xd2>
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	f043 0202 	orr.w	r2, r3, #2
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800611a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <HAL_UART_IRQHandler+0xf6>
 8006126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	f043 0204 	orr.w	r2, r3, #4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800613e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b00      	cmp	r3, #0
 8006148:	d011      	beq.n	800616e <HAL_UART_IRQHandler+0x126>
 800614a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d105      	bne.n	8006162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f043 0208 	orr.w	r2, r3, #8
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 81f2 	beq.w	800655c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b00      	cmp	r3, #0
 8006182:	d008      	beq.n	8006196 <HAL_UART_IRQHandler+0x14e>
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fb4d 	bl	8006830 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b40      	cmp	r3, #64	; 0x40
 80061a2:	bf0c      	ite	eq
 80061a4:	2301      	moveq	r3, #1
 80061a6:	2300      	movne	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d103      	bne.n	80061c2 <HAL_UART_IRQHandler+0x17a>
 80061ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d04f      	beq.n	8006262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fa55 	bl	8006672 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d141      	bne.n	800625a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3314      	adds	r3, #20
 80061fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800620e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800621a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1d9      	bne.n	80061d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d013      	beq.n	8006252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	4a7e      	ldr	r2, [pc, #504]	; (8006428 <HAL_UART_IRQHandler+0x3e0>)
 8006230:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006236:	4618      	mov	r0, r3
 8006238:	f7fb fff9 	bl	800222e <HAL_DMA_Abort_IT>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800624c:	4610      	mov	r0, r2
 800624e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006250:	e00e      	b.n	8006270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f99e 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	e00a      	b.n	8006270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f99a 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e006      	b.n	8006270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f996 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800626e:	e175      	b.n	800655c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	bf00      	nop
    return;
 8006272:	e173      	b.n	800655c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	2b01      	cmp	r3, #1
 800627a:	f040 814f 	bne.w	800651c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8148 	beq.w	800651c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 8141 	beq.w	800651c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800629a:	2300      	movs	r3, #0
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	f040 80b6 	bne.w	800642c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8145 	beq.w	8006560 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062de:	429a      	cmp	r2, r3
 80062e0:	f080 813e 	bcs.w	8006560 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f6:	f000 8088 	beq.w	800640a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	330c      	adds	r3, #12
 8006300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800632a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800633e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1d9      	bne.n	80062fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3314      	adds	r3, #20
 800634c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800636a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800636e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800637c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e1      	bne.n	8006346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3314      	adds	r3, #20
 80063a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e3      	bne.n	8006382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063da:	f023 0310 	bic.w	r3, r3, #16
 80063de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80063ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e3      	bne.n	80063c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	4618      	mov	r0, r3
 8006406:	f7fb fea2 	bl	800214e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006418:	b29b      	uxth	r3, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	b29b      	uxth	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f8c1 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006426:	e09b      	b.n	8006560 <HAL_UART_IRQHandler+0x518>
 8006428:	08006739 	.word	0x08006739
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006434:	b29b      	uxth	r3, r3
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 808e 	beq.w	8006564 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 8089 	beq.w	8006564 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006476:	647a      	str	r2, [r7, #68]	; 0x44
 8006478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800647c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e3      	bne.n	8006452 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	623b      	str	r3, [r7, #32]
   return(result);
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3314      	adds	r3, #20
 80064aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064ae:	633a      	str	r2, [r7, #48]	; 0x30
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e3      	bne.n	800648a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0310 	bic.w	r3, r3, #16
 80064e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	330c      	adds	r3, #12
 80064f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064f4:	61fa      	str	r2, [r7, #28]
 80064f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	69b9      	ldr	r1, [r7, #24]
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	617b      	str	r3, [r7, #20]
   return(result);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e3      	bne.n	80064d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800650e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f847 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800651a:	e023      	b.n	8006564 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800651c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <HAL_UART_IRQHandler+0x4f4>
 8006528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f913 	bl	8006760 <UART_Transmit_IT>
    return;
 800653a:	e014      	b.n	8006566 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00e      	beq.n	8006566 <HAL_UART_IRQHandler+0x51e>
 8006548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f953 	bl	8006800 <UART_EndTransmit_IT>
    return;
 800655a:	e004      	b.n	8006566 <HAL_UART_IRQHandler+0x51e>
    return;
 800655c:	bf00      	nop
 800655e:	e002      	b.n	8006566 <HAL_UART_IRQHandler+0x51e>
      return;
 8006560:	bf00      	nop
 8006562:	e000      	b.n	8006566 <HAL_UART_IRQHandler+0x51e>
      return;
 8006564:	bf00      	nop
  }
}
 8006566:	37e8      	adds	r7, #232	; 0xe8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d0:	e03b      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d037      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fb fc77 	bl	8001ecc <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e03a      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d023      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d020      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b40      	cmp	r3, #64	; 0x40
 800660c:	d01d      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b08      	cmp	r3, #8
 800661a:	d116      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f81d 	bl	8006672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2208      	movs	r2, #8
 800663c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e00f      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	429a      	cmp	r2, r3
 8006666:	d0b4      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006672:	b480      	push	{r7}
 8006674:	b095      	sub	sp, #84	; 0x54
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	330c      	adds	r3, #12
 8006698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800669a:	643a      	str	r2, [r7, #64]	; 0x40
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e5      	bne.n	800667a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3314      	adds	r3, #20
 80066cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d119      	bne.n	800671e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	330c      	adds	r3, #12
 80066f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f023 0310 	bic.w	r3, r3, #16
 8006700:	647b      	str	r3, [r7, #68]	; 0x44
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	330c      	adds	r3, #12
 8006708:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800670a:	61ba      	str	r2, [r7, #24]
 800670c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6979      	ldr	r1, [r7, #20]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	613b      	str	r3, [r7, #16]
   return(result);
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e5      	bne.n	80066ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800672c:	bf00      	nop
 800672e:	3754      	adds	r7, #84	; 0x54
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff1e 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b21      	cmp	r3, #33	; 0x21
 8006772:	d13e      	bne.n	80067f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d114      	bne.n	80067a8 <UART_Transmit_IT+0x48>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d110      	bne.n	80067a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800679a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	1c9a      	adds	r2, r3, #2
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]
 80067a6:	e008      	b.n	80067ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6211      	str	r1, [r2, #32]
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4619      	mov	r1, r3
 80067c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10f      	bne.n	80067ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006816:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff fea3 	bl	800656c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	; 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b22      	cmp	r3, #34	; 0x22
 8006842:	f040 80ae 	bne.w	80069a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800684e:	d117      	bne.n	8006880 <UART_Receive_IT+0x50>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d113      	bne.n	8006880 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006858:	2300      	movs	r3, #0
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686e:	b29a      	uxth	r2, r3
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006878:	1c9a      	adds	r2, r3, #2
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	629a      	str	r2, [r3, #40]	; 0x28
 800687e:	e026      	b.n	80068ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006892:	d007      	beq.n	80068a4 <UART_Receive_IT+0x74>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <UART_Receive_IT+0x82>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	e008      	b.n	80068c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3b01      	subs	r3, #1
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4619      	mov	r1, r3
 80068dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d15d      	bne.n	800699e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0220 	bic.w	r2, r2, #32
 80068f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006900:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695a      	ldr	r2, [r3, #20]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	2b01      	cmp	r3, #1
 8006926:	d135      	bne.n	8006994 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	330c      	adds	r3, #12
 8006934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	613b      	str	r3, [r7, #16]
   return(result);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f023 0310 	bic.w	r3, r3, #16
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	330c      	adds	r3, #12
 800694c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694e:	623a      	str	r2, [r7, #32]
 8006950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	69f9      	ldr	r1, [r7, #28]
 8006954:	6a3a      	ldr	r2, [r7, #32]
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	61bb      	str	r3, [r7, #24]
   return(result);
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e5      	bne.n	800692e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b10      	cmp	r3, #16
 800696e:	d10a      	bne.n	8006986 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fe0b 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
 8006992:	e002      	b.n	800699a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fdf3 	bl	8006580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e002      	b.n	80069a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	e000      	b.n	80069a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069a2:	2302      	movs	r3, #2
  }
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3730      	adds	r7, #48	; 0x30
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b0:	b0c0      	sub	sp, #256	; 0x100
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	68d9      	ldr	r1, [r3, #12]
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	ea40 0301 	orr.w	r3, r0, r1
 80069d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a04:	f021 010c 	bic.w	r1, r1, #12
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a12:	430b      	orrs	r3, r1
 8006a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a26:	6999      	ldr	r1, [r3, #24]
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	ea40 0301 	orr.w	r3, r0, r1
 8006a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b8f      	ldr	r3, [pc, #572]	; (8006c78 <UART_SetConfig+0x2cc>)
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d005      	beq.n	8006a4c <UART_SetConfig+0xa0>
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b8d      	ldr	r3, [pc, #564]	; (8006c7c <UART_SetConfig+0x2d0>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d104      	bne.n	8006a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a4c:	f7fe ff68 	bl	8005920 <HAL_RCC_GetPCLK2Freq>
 8006a50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a54:	e003      	b.n	8006a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a56:	f7fe ff4f 	bl	80058f8 <HAL_RCC_GetPCLK1Freq>
 8006a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a68:	f040 810c 	bne.w	8006c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	1891      	adds	r1, r2, r2
 8006a84:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a86:	415b      	adcs	r3, r3
 8006a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a8e:	4621      	mov	r1, r4
 8006a90:	eb12 0801 	adds.w	r8, r2, r1
 8006a94:	4629      	mov	r1, r5
 8006a96:	eb43 0901 	adc.w	r9, r3, r1
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aae:	4690      	mov	r8, r2
 8006ab0:	4699      	mov	r9, r3
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	eb18 0303 	adds.w	r3, r8, r3
 8006ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006abc:	462b      	mov	r3, r5
 8006abe:	eb49 0303 	adc.w	r3, r9, r3
 8006ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ada:	460b      	mov	r3, r1
 8006adc:	18db      	adds	r3, r3, r3
 8006ade:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	eb42 0303 	adc.w	r3, r2, r3
 8006ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006af0:	f7fa f85a 	bl	8000ba8 <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4b61      	ldr	r3, [pc, #388]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006afa:	fba3 2302 	umull	r2, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	011c      	lsls	r4, r3, #4
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	1891      	adds	r1, r2, r2
 8006b1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b1c:	415b      	adcs	r3, r3
 8006b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b24:	4641      	mov	r1, r8
 8006b26:	eb12 0a01 	adds.w	sl, r2, r1
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b44:	4692      	mov	sl, r2
 8006b46:	469b      	mov	fp, r3
 8006b48:	4643      	mov	r3, r8
 8006b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b52:	464b      	mov	r3, r9
 8006b54:	eb4b 0303 	adc.w	r3, fp, r3
 8006b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b70:	460b      	mov	r3, r1
 8006b72:	18db      	adds	r3, r3, r3
 8006b74:	643b      	str	r3, [r7, #64]	; 0x40
 8006b76:	4613      	mov	r3, r2
 8006b78:	eb42 0303 	adc.w	r3, r2, r3
 8006b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b86:	f7fa f80f 	bl	8000ba8 <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4b3b      	ldr	r3, [pc, #236]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006b92:	fba3 2301 	umull	r2, r3, r3, r1
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	2264      	movs	r2, #100	; 0x64
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
 8006b9e:	1acb      	subs	r3, r1, r3
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ba6:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bb4:	441c      	add	r4, r3
 8006bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	1891      	adds	r1, r2, r2
 8006bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bd0:	415b      	adcs	r3, r3
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bd8:	4641      	mov	r1, r8
 8006bda:	1851      	adds	r1, r2, r1
 8006bdc:	6339      	str	r1, [r7, #48]	; 0x30
 8006bde:	4649      	mov	r1, r9
 8006be0:	414b      	adcs	r3, r1
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	00cb      	lsls	r3, r1, #3
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	00ca      	lsls	r2, r1, #3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	4642      	mov	r2, r8
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	460a      	mov	r2, r1
 8006c10:	eb42 0303 	adc.w	r3, r2, r3
 8006c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	18db      	adds	r3, r3, r3
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c32:	4613      	mov	r3, r2
 8006c34:	eb42 0303 	adc.w	r3, r2, r3
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c42:	f7f9 ffb1 	bl	8000ba8 <__aeabi_uldivmod>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	2164      	movs	r1, #100	; 0x64
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	3332      	adds	r3, #50	; 0x32
 8006c5e:	4a08      	ldr	r2, [pc, #32]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f003 0207 	and.w	r2, r3, #7
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4422      	add	r2, r4
 8006c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c74:	e106      	b.n	8006e84 <UART_SetConfig+0x4d8>
 8006c76:	bf00      	nop
 8006c78:	40011000 	.word	0x40011000
 8006c7c:	40011400 	.word	0x40011400
 8006c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c96:	4642      	mov	r2, r8
 8006c98:	464b      	mov	r3, r9
 8006c9a:	1891      	adds	r1, r2, r2
 8006c9c:	6239      	str	r1, [r7, #32]
 8006c9e:	415b      	adcs	r3, r3
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	1854      	adds	r4, r2, r1
 8006caa:	4649      	mov	r1, r9
 8006cac:	eb43 0501 	adc.w	r5, r3, r1
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	00eb      	lsls	r3, r5, #3
 8006cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cbe:	00e2      	lsls	r2, r4, #3
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	4643      	mov	r3, r8
 8006cc6:	18e3      	adds	r3, r4, r3
 8006cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ccc:	464b      	mov	r3, r9
 8006cce:	eb45 0303 	adc.w	r3, r5, r3
 8006cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	008b      	lsls	r3, r1, #2
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	008a      	lsls	r2, r1, #2
 8006d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d04:	f7f9 ff50 	bl	8000ba8 <__aeabi_uldivmod>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4b60      	ldr	r3, [pc, #384]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	011c      	lsls	r4, r3, #4
 8006d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	1891      	adds	r1, r2, r2
 8006d2e:	61b9      	str	r1, [r7, #24]
 8006d30:	415b      	adcs	r3, r3
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d38:	4641      	mov	r1, r8
 8006d3a:	1851      	adds	r1, r2, r1
 8006d3c:	6139      	str	r1, [r7, #16]
 8006d3e:	4649      	mov	r1, r9
 8006d40:	414b      	adcs	r3, r1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d50:	4659      	mov	r1, fp
 8006d52:	00cb      	lsls	r3, r1, #3
 8006d54:	4651      	mov	r1, sl
 8006d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	00ca      	lsls	r2, r1, #3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	4642      	mov	r2, r8
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	460a      	mov	r2, r1
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d90:	4649      	mov	r1, r9
 8006d92:	008b      	lsls	r3, r1, #2
 8006d94:	4641      	mov	r1, r8
 8006d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	008a      	lsls	r2, r1, #2
 8006d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006da2:	f7f9 ff01 	bl	8000ba8 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	4b38      	ldr	r3, [pc, #224]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006dae:	fba3 2301 	umull	r2, r3, r3, r1
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	2264      	movs	r2, #100	; 0x64
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	1acb      	subs	r3, r1, r3
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	3332      	adds	r3, #50	; 0x32
 8006dc0:	4a33      	ldr	r2, [pc, #204]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dcc:	441c      	add	r4, r3
 8006dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	673b      	str	r3, [r7, #112]	; 0x70
 8006dd6:	677a      	str	r2, [r7, #116]	; 0x74
 8006dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ddc:	4642      	mov	r2, r8
 8006dde:	464b      	mov	r3, r9
 8006de0:	1891      	adds	r1, r2, r2
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	415b      	adcs	r3, r3
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dec:	4641      	mov	r1, r8
 8006dee:	1851      	adds	r1, r2, r1
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	4649      	mov	r1, r9
 8006df4:	414b      	adcs	r3, r1
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	f04f 0300 	mov.w	r3, #0
 8006e00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e04:	4659      	mov	r1, fp
 8006e06:	00cb      	lsls	r3, r1, #3
 8006e08:	4651      	mov	r1, sl
 8006e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e0e:	4651      	mov	r1, sl
 8006e10:	00ca      	lsls	r2, r1, #3
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	4603      	mov	r3, r0
 8006e18:	4642      	mov	r2, r8
 8006e1a:	189b      	adds	r3, r3, r2
 8006e1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e1e:	464b      	mov	r3, r9
 8006e20:	460a      	mov	r2, r1
 8006e22:	eb42 0303 	adc.w	r3, r2, r3
 8006e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	663b      	str	r3, [r7, #96]	; 0x60
 8006e32:	667a      	str	r2, [r7, #100]	; 0x64
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e40:	4649      	mov	r1, r9
 8006e42:	008b      	lsls	r3, r1, #2
 8006e44:	4641      	mov	r1, r8
 8006e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	008a      	lsls	r2, r1, #2
 8006e4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e52:	f7f9 fea9 	bl	8000ba8 <__aeabi_uldivmod>
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	2164      	movs	r1, #100	; 0x64
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	3332      	adds	r3, #50	; 0x32
 8006e6e:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006e70:	fba2 2303 	umull	r2, r3, r2, r3
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f003 020f 	and.w	r2, r3, #15
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4422      	add	r2, r4
 8006e82:	609a      	str	r2, [r3, #8]
}
 8006e84:	bf00      	nop
 8006e86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e90:	51eb851f 	.word	0x51eb851f

08006e94 <__cvt>:
 8006e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	ec55 4b10 	vmov	r4, r5, d0
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	460e      	mov	r6, r1
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	bfbb      	ittet	lt
 8006ea6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eaa:	461d      	movlt	r5, r3
 8006eac:	2300      	movge	r3, #0
 8006eae:	232d      	movlt	r3, #45	; 0x2d
 8006eb0:	700b      	strb	r3, [r1, #0]
 8006eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006eb8:	4691      	mov	r9, r2
 8006eba:	f023 0820 	bic.w	r8, r3, #32
 8006ebe:	bfbc      	itt	lt
 8006ec0:	4622      	movlt	r2, r4
 8006ec2:	4614      	movlt	r4, r2
 8006ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ec8:	d005      	beq.n	8006ed6 <__cvt+0x42>
 8006eca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ece:	d100      	bne.n	8006ed2 <__cvt+0x3e>
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	e000      	b.n	8006ed8 <__cvt+0x44>
 8006ed6:	2103      	movs	r1, #3
 8006ed8:	ab03      	add	r3, sp, #12
 8006eda:	9301      	str	r3, [sp, #4]
 8006edc:	ab02      	add	r3, sp, #8
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	ec45 4b10 	vmov	d0, r4, r5
 8006ee4:	4653      	mov	r3, sl
 8006ee6:	4632      	mov	r2, r6
 8006ee8:	f000 fe5a 	bl	8007ba0 <_dtoa_r>
 8006eec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	d102      	bne.n	8006efa <__cvt+0x66>
 8006ef4:	f019 0f01 	tst.w	r9, #1
 8006ef8:	d022      	beq.n	8006f40 <__cvt+0xac>
 8006efa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006efe:	eb07 0906 	add.w	r9, r7, r6
 8006f02:	d110      	bne.n	8006f26 <__cvt+0x92>
 8006f04:	783b      	ldrb	r3, [r7, #0]
 8006f06:	2b30      	cmp	r3, #48	; 0x30
 8006f08:	d10a      	bne.n	8006f20 <__cvt+0x8c>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f16:	b918      	cbnz	r0, 8006f20 <__cvt+0x8c>
 8006f18:	f1c6 0601 	rsb	r6, r6, #1
 8006f1c:	f8ca 6000 	str.w	r6, [sl]
 8006f20:	f8da 3000 	ldr.w	r3, [sl]
 8006f24:	4499      	add	r9, r3
 8006f26:	2200      	movs	r2, #0
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	f7f9 fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f32:	b108      	cbz	r0, 8006f38 <__cvt+0xa4>
 8006f34:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f38:	2230      	movs	r2, #48	; 0x30
 8006f3a:	9b03      	ldr	r3, [sp, #12]
 8006f3c:	454b      	cmp	r3, r9
 8006f3e:	d307      	bcc.n	8006f50 <__cvt+0xbc>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f44:	1bdb      	subs	r3, r3, r7
 8006f46:	4638      	mov	r0, r7
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	b004      	add	sp, #16
 8006f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	9103      	str	r1, [sp, #12]
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	e7f0      	b.n	8006f3a <__cvt+0xa6>

08006f58 <__exponent>:
 8006f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	bfb8      	it	lt
 8006f60:	4249      	neglt	r1, r1
 8006f62:	f803 2b02 	strb.w	r2, [r3], #2
 8006f66:	bfb4      	ite	lt
 8006f68:	222d      	movlt	r2, #45	; 0x2d
 8006f6a:	222b      	movge	r2, #43	; 0x2b
 8006f6c:	2909      	cmp	r1, #9
 8006f6e:	7042      	strb	r2, [r0, #1]
 8006f70:	dd2a      	ble.n	8006fc8 <__exponent+0x70>
 8006f72:	f10d 0207 	add.w	r2, sp, #7
 8006f76:	4617      	mov	r7, r2
 8006f78:	260a      	movs	r6, #10
 8006f7a:	4694      	mov	ip, r2
 8006f7c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f80:	fb06 1415 	mls	r4, r6, r5, r1
 8006f84:	3430      	adds	r4, #48	; 0x30
 8006f86:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	2c63      	cmp	r4, #99	; 0x63
 8006f8e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f92:	4629      	mov	r1, r5
 8006f94:	dcf1      	bgt.n	8006f7a <__exponent+0x22>
 8006f96:	3130      	adds	r1, #48	; 0x30
 8006f98:	f1ac 0402 	sub.w	r4, ip, #2
 8006f9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006fa0:	1c41      	adds	r1, r0, #1
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	42ba      	cmp	r2, r7
 8006fa6:	d30a      	bcc.n	8006fbe <__exponent+0x66>
 8006fa8:	f10d 0209 	add.w	r2, sp, #9
 8006fac:	eba2 020c 	sub.w	r2, r2, ip
 8006fb0:	42bc      	cmp	r4, r7
 8006fb2:	bf88      	it	hi
 8006fb4:	2200      	movhi	r2, #0
 8006fb6:	4413      	add	r3, r2
 8006fb8:	1a18      	subs	r0, r3, r0
 8006fba:	b003      	add	sp, #12
 8006fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fbe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006fc2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006fc6:	e7ed      	b.n	8006fa4 <__exponent+0x4c>
 8006fc8:	2330      	movs	r3, #48	; 0x30
 8006fca:	3130      	adds	r1, #48	; 0x30
 8006fcc:	7083      	strb	r3, [r0, #2]
 8006fce:	70c1      	strb	r1, [r0, #3]
 8006fd0:	1d03      	adds	r3, r0, #4
 8006fd2:	e7f1      	b.n	8006fb8 <__exponent+0x60>

08006fd4 <_printf_float>:
 8006fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd8:	ed2d 8b02 	vpush	{d8}
 8006fdc:	b08d      	sub	sp, #52	; 0x34
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	461f      	mov	r7, r3
 8006fe8:	4605      	mov	r5, r0
 8006fea:	f000 fcd9 	bl	80079a0 <_localeconv_r>
 8006fee:	f8d0 a000 	ldr.w	sl, [r0]
 8006ff2:	4650      	mov	r0, sl
 8006ff4:	f7f9 f93c 	bl	8000270 <strlen>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	9305      	str	r3, [sp, #20]
 8007000:	f8d8 3000 	ldr.w	r3, [r8]
 8007004:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007008:	3307      	adds	r3, #7
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	f103 0208 	add.w	r2, r3, #8
 8007012:	f8c8 2000 	str.w	r2, [r8]
 8007016:	e9d3 8900 	ldrd	r8, r9, [r3]
 800701a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	f8cd 8018 	str.w	r8, [sp, #24]
 8007024:	ee08 0a10 	vmov	s16, r0
 8007028:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800702c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007030:	4b9e      	ldr	r3, [pc, #632]	; (80072ac <_printf_float+0x2d8>)
 8007032:	f04f 32ff 	mov.w	r2, #4294967295
 8007036:	f7f9 fd79 	bl	8000b2c <__aeabi_dcmpun>
 800703a:	bb88      	cbnz	r0, 80070a0 <_printf_float+0xcc>
 800703c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007040:	4b9a      	ldr	r3, [pc, #616]	; (80072ac <_printf_float+0x2d8>)
 8007042:	f04f 32ff 	mov.w	r2, #4294967295
 8007046:	f7f9 fd53 	bl	8000af0 <__aeabi_dcmple>
 800704a:	bb48      	cbnz	r0, 80070a0 <_printf_float+0xcc>
 800704c:	2200      	movs	r2, #0
 800704e:	2300      	movs	r3, #0
 8007050:	4640      	mov	r0, r8
 8007052:	4649      	mov	r1, r9
 8007054:	f7f9 fd42 	bl	8000adc <__aeabi_dcmplt>
 8007058:	b110      	cbz	r0, 8007060 <_printf_float+0x8c>
 800705a:	232d      	movs	r3, #45	; 0x2d
 800705c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007060:	4a93      	ldr	r2, [pc, #588]	; (80072b0 <_printf_float+0x2dc>)
 8007062:	4b94      	ldr	r3, [pc, #592]	; (80072b4 <_printf_float+0x2e0>)
 8007064:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007068:	bf94      	ite	ls
 800706a:	4690      	movls	r8, r2
 800706c:	4698      	movhi	r8, r3
 800706e:	2303      	movs	r3, #3
 8007070:	6123      	str	r3, [r4, #16]
 8007072:	9b05      	ldr	r3, [sp, #20]
 8007074:	f023 0304 	bic.w	r3, r3, #4
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	f04f 0900 	mov.w	r9, #0
 800707e:	9700      	str	r7, [sp, #0]
 8007080:	4633      	mov	r3, r6
 8007082:	aa0b      	add	r2, sp, #44	; 0x2c
 8007084:	4621      	mov	r1, r4
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f9da 	bl	8007440 <_printf_common>
 800708c:	3001      	adds	r0, #1
 800708e:	f040 8090 	bne.w	80071b2 <_printf_float+0x1de>
 8007092:	f04f 30ff 	mov.w	r0, #4294967295
 8007096:	b00d      	add	sp, #52	; 0x34
 8007098:	ecbd 8b02 	vpop	{d8}
 800709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a0:	4642      	mov	r2, r8
 80070a2:	464b      	mov	r3, r9
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 fd40 	bl	8000b2c <__aeabi_dcmpun>
 80070ac:	b140      	cbz	r0, 80070c0 <_printf_float+0xec>
 80070ae:	464b      	mov	r3, r9
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bfbc      	itt	lt
 80070b4:	232d      	movlt	r3, #45	; 0x2d
 80070b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070ba:	4a7f      	ldr	r2, [pc, #508]	; (80072b8 <_printf_float+0x2e4>)
 80070bc:	4b7f      	ldr	r3, [pc, #508]	; (80072bc <_printf_float+0x2e8>)
 80070be:	e7d1      	b.n	8007064 <_printf_float+0x90>
 80070c0:	6863      	ldr	r3, [r4, #4]
 80070c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070c6:	9206      	str	r2, [sp, #24]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	d13f      	bne.n	800714c <_printf_float+0x178>
 80070cc:	2306      	movs	r3, #6
 80070ce:	6063      	str	r3, [r4, #4]
 80070d0:	9b05      	ldr	r3, [sp, #20]
 80070d2:	6861      	ldr	r1, [r4, #4]
 80070d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070d8:	2300      	movs	r3, #0
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	ab0a      	add	r3, sp, #40	; 0x28
 80070de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070e2:	ab09      	add	r3, sp, #36	; 0x24
 80070e4:	ec49 8b10 	vmov	d0, r8, r9
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070f0:	4628      	mov	r0, r5
 80070f2:	f7ff fecf 	bl	8006e94 <__cvt>
 80070f6:	9b06      	ldr	r3, [sp, #24]
 80070f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070fa:	2b47      	cmp	r3, #71	; 0x47
 80070fc:	4680      	mov	r8, r0
 80070fe:	d108      	bne.n	8007112 <_printf_float+0x13e>
 8007100:	1cc8      	adds	r0, r1, #3
 8007102:	db02      	blt.n	800710a <_printf_float+0x136>
 8007104:	6863      	ldr	r3, [r4, #4]
 8007106:	4299      	cmp	r1, r3
 8007108:	dd41      	ble.n	800718e <_printf_float+0x1ba>
 800710a:	f1ab 0302 	sub.w	r3, fp, #2
 800710e:	fa5f fb83 	uxtb.w	fp, r3
 8007112:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007116:	d820      	bhi.n	800715a <_printf_float+0x186>
 8007118:	3901      	subs	r1, #1
 800711a:	465a      	mov	r2, fp
 800711c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007120:	9109      	str	r1, [sp, #36]	; 0x24
 8007122:	f7ff ff19 	bl	8006f58 <__exponent>
 8007126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007128:	1813      	adds	r3, r2, r0
 800712a:	2a01      	cmp	r2, #1
 800712c:	4681      	mov	r9, r0
 800712e:	6123      	str	r3, [r4, #16]
 8007130:	dc02      	bgt.n	8007138 <_printf_float+0x164>
 8007132:	6822      	ldr	r2, [r4, #0]
 8007134:	07d2      	lsls	r2, r2, #31
 8007136:	d501      	bpl.n	800713c <_printf_float+0x168>
 8007138:	3301      	adds	r3, #1
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007140:	2b00      	cmp	r3, #0
 8007142:	d09c      	beq.n	800707e <_printf_float+0xaa>
 8007144:	232d      	movs	r3, #45	; 0x2d
 8007146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800714a:	e798      	b.n	800707e <_printf_float+0xaa>
 800714c:	9a06      	ldr	r2, [sp, #24]
 800714e:	2a47      	cmp	r2, #71	; 0x47
 8007150:	d1be      	bne.n	80070d0 <_printf_float+0xfc>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1bc      	bne.n	80070d0 <_printf_float+0xfc>
 8007156:	2301      	movs	r3, #1
 8007158:	e7b9      	b.n	80070ce <_printf_float+0xfa>
 800715a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800715e:	d118      	bne.n	8007192 <_printf_float+0x1be>
 8007160:	2900      	cmp	r1, #0
 8007162:	6863      	ldr	r3, [r4, #4]
 8007164:	dd0b      	ble.n	800717e <_printf_float+0x1aa>
 8007166:	6121      	str	r1, [r4, #16]
 8007168:	b913      	cbnz	r3, 8007170 <_printf_float+0x19c>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	07d0      	lsls	r0, r2, #31
 800716e:	d502      	bpl.n	8007176 <_printf_float+0x1a2>
 8007170:	3301      	adds	r3, #1
 8007172:	440b      	add	r3, r1
 8007174:	6123      	str	r3, [r4, #16]
 8007176:	65a1      	str	r1, [r4, #88]	; 0x58
 8007178:	f04f 0900 	mov.w	r9, #0
 800717c:	e7de      	b.n	800713c <_printf_float+0x168>
 800717e:	b913      	cbnz	r3, 8007186 <_printf_float+0x1b2>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	07d2      	lsls	r2, r2, #31
 8007184:	d501      	bpl.n	800718a <_printf_float+0x1b6>
 8007186:	3302      	adds	r3, #2
 8007188:	e7f4      	b.n	8007174 <_printf_float+0x1a0>
 800718a:	2301      	movs	r3, #1
 800718c:	e7f2      	b.n	8007174 <_printf_float+0x1a0>
 800718e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007194:	4299      	cmp	r1, r3
 8007196:	db05      	blt.n	80071a4 <_printf_float+0x1d0>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	6121      	str	r1, [r4, #16]
 800719c:	07d8      	lsls	r0, r3, #31
 800719e:	d5ea      	bpl.n	8007176 <_printf_float+0x1a2>
 80071a0:	1c4b      	adds	r3, r1, #1
 80071a2:	e7e7      	b.n	8007174 <_printf_float+0x1a0>
 80071a4:	2900      	cmp	r1, #0
 80071a6:	bfd4      	ite	le
 80071a8:	f1c1 0202 	rsble	r2, r1, #2
 80071ac:	2201      	movgt	r2, #1
 80071ae:	4413      	add	r3, r2
 80071b0:	e7e0      	b.n	8007174 <_printf_float+0x1a0>
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	055a      	lsls	r2, r3, #21
 80071b6:	d407      	bmi.n	80071c8 <_printf_float+0x1f4>
 80071b8:	6923      	ldr	r3, [r4, #16]
 80071ba:	4642      	mov	r2, r8
 80071bc:	4631      	mov	r1, r6
 80071be:	4628      	mov	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	3001      	adds	r0, #1
 80071c4:	d12c      	bne.n	8007220 <_printf_float+0x24c>
 80071c6:	e764      	b.n	8007092 <_printf_float+0xbe>
 80071c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071cc:	f240 80e0 	bls.w	8007390 <_printf_float+0x3bc>
 80071d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	f7f9 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d034      	beq.n	800724a <_printf_float+0x276>
 80071e0:	4a37      	ldr	r2, [pc, #220]	; (80072c0 <_printf_float+0x2ec>)
 80071e2:	2301      	movs	r3, #1
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af51 	beq.w	8007092 <_printf_float+0xbe>
 80071f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f4:	429a      	cmp	r2, r3
 80071f6:	db02      	blt.n	80071fe <_printf_float+0x22a>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	07d8      	lsls	r0, r3, #31
 80071fc:	d510      	bpl.n	8007220 <_printf_float+0x24c>
 80071fe:	ee18 3a10 	vmov	r3, s16
 8007202:	4652      	mov	r2, sl
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	f43f af41 	beq.w	8007092 <_printf_float+0xbe>
 8007210:	f04f 0800 	mov.w	r8, #0
 8007214:	f104 091a 	add.w	r9, r4, #26
 8007218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721a:	3b01      	subs	r3, #1
 800721c:	4543      	cmp	r3, r8
 800721e:	dc09      	bgt.n	8007234 <_printf_float+0x260>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	079b      	lsls	r3, r3, #30
 8007224:	f100 8107 	bmi.w	8007436 <_printf_float+0x462>
 8007228:	68e0      	ldr	r0, [r4, #12]
 800722a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722c:	4298      	cmp	r0, r3
 800722e:	bfb8      	it	lt
 8007230:	4618      	movlt	r0, r3
 8007232:	e730      	b.n	8007096 <_printf_float+0xc2>
 8007234:	2301      	movs	r3, #1
 8007236:	464a      	mov	r2, r9
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f af27 	beq.w	8007092 <_printf_float+0xbe>
 8007244:	f108 0801 	add.w	r8, r8, #1
 8007248:	e7e6      	b.n	8007218 <_printf_float+0x244>
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	dc39      	bgt.n	80072c4 <_printf_float+0x2f0>
 8007250:	4a1b      	ldr	r2, [pc, #108]	; (80072c0 <_printf_float+0x2ec>)
 8007252:	2301      	movs	r3, #1
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f af19 	beq.w	8007092 <_printf_float+0xbe>
 8007260:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007264:	4313      	orrs	r3, r2
 8007266:	d102      	bne.n	800726e <_printf_float+0x29a>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	07d9      	lsls	r1, r3, #31
 800726c:	d5d8      	bpl.n	8007220 <_printf_float+0x24c>
 800726e:	ee18 3a10 	vmov	r3, s16
 8007272:	4652      	mov	r2, sl
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	f43f af09 	beq.w	8007092 <_printf_float+0xbe>
 8007280:	f04f 0900 	mov.w	r9, #0
 8007284:	f104 0a1a 	add.w	sl, r4, #26
 8007288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728a:	425b      	negs	r3, r3
 800728c:	454b      	cmp	r3, r9
 800728e:	dc01      	bgt.n	8007294 <_printf_float+0x2c0>
 8007290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007292:	e792      	b.n	80071ba <_printf_float+0x1e6>
 8007294:	2301      	movs	r3, #1
 8007296:	4652      	mov	r2, sl
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f aef7 	beq.w	8007092 <_printf_float+0xbe>
 80072a4:	f109 0901 	add.w	r9, r9, #1
 80072a8:	e7ee      	b.n	8007288 <_printf_float+0x2b4>
 80072aa:	bf00      	nop
 80072ac:	7fefffff 	.word	0x7fefffff
 80072b0:	08009f84 	.word	0x08009f84
 80072b4:	08009f88 	.word	0x08009f88
 80072b8:	08009f8c 	.word	0x08009f8c
 80072bc:	08009f90 	.word	0x08009f90
 80072c0:	08009f94 	.word	0x08009f94
 80072c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072c8:	429a      	cmp	r2, r3
 80072ca:	bfa8      	it	ge
 80072cc:	461a      	movge	r2, r3
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	4691      	mov	r9, r2
 80072d2:	dc37      	bgt.n	8007344 <_printf_float+0x370>
 80072d4:	f04f 0b00 	mov.w	fp, #0
 80072d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072dc:	f104 021a 	add.w	r2, r4, #26
 80072e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072e2:	9305      	str	r3, [sp, #20]
 80072e4:	eba3 0309 	sub.w	r3, r3, r9
 80072e8:	455b      	cmp	r3, fp
 80072ea:	dc33      	bgt.n	8007354 <_printf_float+0x380>
 80072ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072f0:	429a      	cmp	r2, r3
 80072f2:	db3b      	blt.n	800736c <_printf_float+0x398>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	07da      	lsls	r2, r3, #31
 80072f8:	d438      	bmi.n	800736c <_printf_float+0x398>
 80072fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072fe:	eba2 0903 	sub.w	r9, r2, r3
 8007302:	9b05      	ldr	r3, [sp, #20]
 8007304:	1ad2      	subs	r2, r2, r3
 8007306:	4591      	cmp	r9, r2
 8007308:	bfa8      	it	ge
 800730a:	4691      	movge	r9, r2
 800730c:	f1b9 0f00 	cmp.w	r9, #0
 8007310:	dc35      	bgt.n	800737e <_printf_float+0x3aa>
 8007312:	f04f 0800 	mov.w	r8, #0
 8007316:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800731a:	f104 0a1a 	add.w	sl, r4, #26
 800731e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	eba3 0309 	sub.w	r3, r3, r9
 8007328:	4543      	cmp	r3, r8
 800732a:	f77f af79 	ble.w	8007220 <_printf_float+0x24c>
 800732e:	2301      	movs	r3, #1
 8007330:	4652      	mov	r2, sl
 8007332:	4631      	mov	r1, r6
 8007334:	4628      	mov	r0, r5
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	f43f aeaa 	beq.w	8007092 <_printf_float+0xbe>
 800733e:	f108 0801 	add.w	r8, r8, #1
 8007342:	e7ec      	b.n	800731e <_printf_float+0x34a>
 8007344:	4613      	mov	r3, r2
 8007346:	4631      	mov	r1, r6
 8007348:	4642      	mov	r2, r8
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	d1c0      	bne.n	80072d4 <_printf_float+0x300>
 8007352:	e69e      	b.n	8007092 <_printf_float+0xbe>
 8007354:	2301      	movs	r3, #1
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	9205      	str	r2, [sp, #20]
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	f43f ae97 	beq.w	8007092 <_printf_float+0xbe>
 8007364:	9a05      	ldr	r2, [sp, #20]
 8007366:	f10b 0b01 	add.w	fp, fp, #1
 800736a:	e7b9      	b.n	80072e0 <_printf_float+0x30c>
 800736c:	ee18 3a10 	vmov	r3, s16
 8007370:	4652      	mov	r2, sl
 8007372:	4631      	mov	r1, r6
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	d1be      	bne.n	80072fa <_printf_float+0x326>
 800737c:	e689      	b.n	8007092 <_printf_float+0xbe>
 800737e:	9a05      	ldr	r2, [sp, #20]
 8007380:	464b      	mov	r3, r9
 8007382:	4442      	add	r2, r8
 8007384:	4631      	mov	r1, r6
 8007386:	4628      	mov	r0, r5
 8007388:	47b8      	blx	r7
 800738a:	3001      	adds	r0, #1
 800738c:	d1c1      	bne.n	8007312 <_printf_float+0x33e>
 800738e:	e680      	b.n	8007092 <_printf_float+0xbe>
 8007390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007392:	2a01      	cmp	r2, #1
 8007394:	dc01      	bgt.n	800739a <_printf_float+0x3c6>
 8007396:	07db      	lsls	r3, r3, #31
 8007398:	d53a      	bpl.n	8007410 <_printf_float+0x43c>
 800739a:	2301      	movs	r3, #1
 800739c:	4642      	mov	r2, r8
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f ae74 	beq.w	8007092 <_printf_float+0xbe>
 80073aa:	ee18 3a10 	vmov	r3, s16
 80073ae:	4652      	mov	r2, sl
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f ae6b 	beq.w	8007092 <_printf_float+0xbe>
 80073bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073c0:	2200      	movs	r2, #0
 80073c2:	2300      	movs	r3, #0
 80073c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80073c8:	f7f9 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80073cc:	b9d8      	cbnz	r0, 8007406 <_printf_float+0x432>
 80073ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073d2:	f108 0201 	add.w	r2, r8, #1
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	d10e      	bne.n	80073fe <_printf_float+0x42a>
 80073e0:	e657      	b.n	8007092 <_printf_float+0xbe>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4652      	mov	r2, sl
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f ae50 	beq.w	8007092 <_printf_float+0xbe>
 80073f2:	f108 0801 	add.w	r8, r8, #1
 80073f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f8:	3b01      	subs	r3, #1
 80073fa:	4543      	cmp	r3, r8
 80073fc:	dcf1      	bgt.n	80073e2 <_printf_float+0x40e>
 80073fe:	464b      	mov	r3, r9
 8007400:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007404:	e6da      	b.n	80071bc <_printf_float+0x1e8>
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	f104 0a1a 	add.w	sl, r4, #26
 800740e:	e7f2      	b.n	80073f6 <_printf_float+0x422>
 8007410:	2301      	movs	r3, #1
 8007412:	4642      	mov	r2, r8
 8007414:	e7df      	b.n	80073d6 <_printf_float+0x402>
 8007416:	2301      	movs	r3, #1
 8007418:	464a      	mov	r2, r9
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f ae36 	beq.w	8007092 <_printf_float+0xbe>
 8007426:	f108 0801 	add.w	r8, r8, #1
 800742a:	68e3      	ldr	r3, [r4, #12]
 800742c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800742e:	1a5b      	subs	r3, r3, r1
 8007430:	4543      	cmp	r3, r8
 8007432:	dcf0      	bgt.n	8007416 <_printf_float+0x442>
 8007434:	e6f8      	b.n	8007228 <_printf_float+0x254>
 8007436:	f04f 0800 	mov.w	r8, #0
 800743a:	f104 0919 	add.w	r9, r4, #25
 800743e:	e7f4      	b.n	800742a <_printf_float+0x456>

08007440 <_printf_common>:
 8007440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007444:	4616      	mov	r6, r2
 8007446:	4699      	mov	r9, r3
 8007448:	688a      	ldr	r2, [r1, #8]
 800744a:	690b      	ldr	r3, [r1, #16]
 800744c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007450:	4293      	cmp	r3, r2
 8007452:	bfb8      	it	lt
 8007454:	4613      	movlt	r3, r2
 8007456:	6033      	str	r3, [r6, #0]
 8007458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800745c:	4607      	mov	r7, r0
 800745e:	460c      	mov	r4, r1
 8007460:	b10a      	cbz	r2, 8007466 <_printf_common+0x26>
 8007462:	3301      	adds	r3, #1
 8007464:	6033      	str	r3, [r6, #0]
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	0699      	lsls	r1, r3, #26
 800746a:	bf42      	ittt	mi
 800746c:	6833      	ldrmi	r3, [r6, #0]
 800746e:	3302      	addmi	r3, #2
 8007470:	6033      	strmi	r3, [r6, #0]
 8007472:	6825      	ldr	r5, [r4, #0]
 8007474:	f015 0506 	ands.w	r5, r5, #6
 8007478:	d106      	bne.n	8007488 <_printf_common+0x48>
 800747a:	f104 0a19 	add.w	sl, r4, #25
 800747e:	68e3      	ldr	r3, [r4, #12]
 8007480:	6832      	ldr	r2, [r6, #0]
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	42ab      	cmp	r3, r5
 8007486:	dc26      	bgt.n	80074d6 <_printf_common+0x96>
 8007488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800748c:	1e13      	subs	r3, r2, #0
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	bf18      	it	ne
 8007492:	2301      	movne	r3, #1
 8007494:	0692      	lsls	r2, r2, #26
 8007496:	d42b      	bmi.n	80074f0 <_printf_common+0xb0>
 8007498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800749c:	4649      	mov	r1, r9
 800749e:	4638      	mov	r0, r7
 80074a0:	47c0      	blx	r8
 80074a2:	3001      	adds	r0, #1
 80074a4:	d01e      	beq.n	80074e4 <_printf_common+0xa4>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	6922      	ldr	r2, [r4, #16]
 80074aa:	f003 0306 	and.w	r3, r3, #6
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	bf02      	ittt	eq
 80074b2:	68e5      	ldreq	r5, [r4, #12]
 80074b4:	6833      	ldreq	r3, [r6, #0]
 80074b6:	1aed      	subeq	r5, r5, r3
 80074b8:	68a3      	ldr	r3, [r4, #8]
 80074ba:	bf0c      	ite	eq
 80074bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c0:	2500      	movne	r5, #0
 80074c2:	4293      	cmp	r3, r2
 80074c4:	bfc4      	itt	gt
 80074c6:	1a9b      	subgt	r3, r3, r2
 80074c8:	18ed      	addgt	r5, r5, r3
 80074ca:	2600      	movs	r6, #0
 80074cc:	341a      	adds	r4, #26
 80074ce:	42b5      	cmp	r5, r6
 80074d0:	d11a      	bne.n	8007508 <_printf_common+0xc8>
 80074d2:	2000      	movs	r0, #0
 80074d4:	e008      	b.n	80074e8 <_printf_common+0xa8>
 80074d6:	2301      	movs	r3, #1
 80074d8:	4652      	mov	r2, sl
 80074da:	4649      	mov	r1, r9
 80074dc:	4638      	mov	r0, r7
 80074de:	47c0      	blx	r8
 80074e0:	3001      	adds	r0, #1
 80074e2:	d103      	bne.n	80074ec <_printf_common+0xac>
 80074e4:	f04f 30ff 	mov.w	r0, #4294967295
 80074e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ec:	3501      	adds	r5, #1
 80074ee:	e7c6      	b.n	800747e <_printf_common+0x3e>
 80074f0:	18e1      	adds	r1, r4, r3
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	2030      	movs	r0, #48	; 0x30
 80074f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074fa:	4422      	add	r2, r4
 80074fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007504:	3302      	adds	r3, #2
 8007506:	e7c7      	b.n	8007498 <_printf_common+0x58>
 8007508:	2301      	movs	r3, #1
 800750a:	4622      	mov	r2, r4
 800750c:	4649      	mov	r1, r9
 800750e:	4638      	mov	r0, r7
 8007510:	47c0      	blx	r8
 8007512:	3001      	adds	r0, #1
 8007514:	d0e6      	beq.n	80074e4 <_printf_common+0xa4>
 8007516:	3601      	adds	r6, #1
 8007518:	e7d9      	b.n	80074ce <_printf_common+0x8e>
	...

0800751c <_printf_i>:
 800751c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007520:	7e0f      	ldrb	r7, [r1, #24]
 8007522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007524:	2f78      	cmp	r7, #120	; 0x78
 8007526:	4691      	mov	r9, r2
 8007528:	4680      	mov	r8, r0
 800752a:	460c      	mov	r4, r1
 800752c:	469a      	mov	sl, r3
 800752e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007532:	d807      	bhi.n	8007544 <_printf_i+0x28>
 8007534:	2f62      	cmp	r7, #98	; 0x62
 8007536:	d80a      	bhi.n	800754e <_printf_i+0x32>
 8007538:	2f00      	cmp	r7, #0
 800753a:	f000 80d4 	beq.w	80076e6 <_printf_i+0x1ca>
 800753e:	2f58      	cmp	r7, #88	; 0x58
 8007540:	f000 80c0 	beq.w	80076c4 <_printf_i+0x1a8>
 8007544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800754c:	e03a      	b.n	80075c4 <_printf_i+0xa8>
 800754e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007552:	2b15      	cmp	r3, #21
 8007554:	d8f6      	bhi.n	8007544 <_printf_i+0x28>
 8007556:	a101      	add	r1, pc, #4	; (adr r1, 800755c <_printf_i+0x40>)
 8007558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800755c:	080075b5 	.word	0x080075b5
 8007560:	080075c9 	.word	0x080075c9
 8007564:	08007545 	.word	0x08007545
 8007568:	08007545 	.word	0x08007545
 800756c:	08007545 	.word	0x08007545
 8007570:	08007545 	.word	0x08007545
 8007574:	080075c9 	.word	0x080075c9
 8007578:	08007545 	.word	0x08007545
 800757c:	08007545 	.word	0x08007545
 8007580:	08007545 	.word	0x08007545
 8007584:	08007545 	.word	0x08007545
 8007588:	080076cd 	.word	0x080076cd
 800758c:	080075f5 	.word	0x080075f5
 8007590:	08007687 	.word	0x08007687
 8007594:	08007545 	.word	0x08007545
 8007598:	08007545 	.word	0x08007545
 800759c:	080076ef 	.word	0x080076ef
 80075a0:	08007545 	.word	0x08007545
 80075a4:	080075f5 	.word	0x080075f5
 80075a8:	08007545 	.word	0x08007545
 80075ac:	08007545 	.word	0x08007545
 80075b0:	0800768f 	.word	0x0800768f
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	1d1a      	adds	r2, r3, #4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	602a      	str	r2, [r5, #0]
 80075bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c4:	2301      	movs	r3, #1
 80075c6:	e09f      	b.n	8007708 <_printf_i+0x1ec>
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	682b      	ldr	r3, [r5, #0]
 80075cc:	0607      	lsls	r7, r0, #24
 80075ce:	f103 0104 	add.w	r1, r3, #4
 80075d2:	6029      	str	r1, [r5, #0]
 80075d4:	d501      	bpl.n	80075da <_printf_i+0xbe>
 80075d6:	681e      	ldr	r6, [r3, #0]
 80075d8:	e003      	b.n	80075e2 <_printf_i+0xc6>
 80075da:	0646      	lsls	r6, r0, #25
 80075dc:	d5fb      	bpl.n	80075d6 <_printf_i+0xba>
 80075de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	da03      	bge.n	80075ee <_printf_i+0xd2>
 80075e6:	232d      	movs	r3, #45	; 0x2d
 80075e8:	4276      	negs	r6, r6
 80075ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ee:	485a      	ldr	r0, [pc, #360]	; (8007758 <_printf_i+0x23c>)
 80075f0:	230a      	movs	r3, #10
 80075f2:	e012      	b.n	800761a <_printf_i+0xfe>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	1d19      	adds	r1, r3, #4
 80075fa:	6029      	str	r1, [r5, #0]
 80075fc:	0605      	lsls	r5, r0, #24
 80075fe:	d501      	bpl.n	8007604 <_printf_i+0xe8>
 8007600:	681e      	ldr	r6, [r3, #0]
 8007602:	e002      	b.n	800760a <_printf_i+0xee>
 8007604:	0641      	lsls	r1, r0, #25
 8007606:	d5fb      	bpl.n	8007600 <_printf_i+0xe4>
 8007608:	881e      	ldrh	r6, [r3, #0]
 800760a:	4853      	ldr	r0, [pc, #332]	; (8007758 <_printf_i+0x23c>)
 800760c:	2f6f      	cmp	r7, #111	; 0x6f
 800760e:	bf0c      	ite	eq
 8007610:	2308      	moveq	r3, #8
 8007612:	230a      	movne	r3, #10
 8007614:	2100      	movs	r1, #0
 8007616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800761a:	6865      	ldr	r5, [r4, #4]
 800761c:	60a5      	str	r5, [r4, #8]
 800761e:	2d00      	cmp	r5, #0
 8007620:	bfa2      	ittt	ge
 8007622:	6821      	ldrge	r1, [r4, #0]
 8007624:	f021 0104 	bicge.w	r1, r1, #4
 8007628:	6021      	strge	r1, [r4, #0]
 800762a:	b90e      	cbnz	r6, 8007630 <_printf_i+0x114>
 800762c:	2d00      	cmp	r5, #0
 800762e:	d04b      	beq.n	80076c8 <_printf_i+0x1ac>
 8007630:	4615      	mov	r5, r2
 8007632:	fbb6 f1f3 	udiv	r1, r6, r3
 8007636:	fb03 6711 	mls	r7, r3, r1, r6
 800763a:	5dc7      	ldrb	r7, [r0, r7]
 800763c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007640:	4637      	mov	r7, r6
 8007642:	42bb      	cmp	r3, r7
 8007644:	460e      	mov	r6, r1
 8007646:	d9f4      	bls.n	8007632 <_printf_i+0x116>
 8007648:	2b08      	cmp	r3, #8
 800764a:	d10b      	bne.n	8007664 <_printf_i+0x148>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	07de      	lsls	r6, r3, #31
 8007650:	d508      	bpl.n	8007664 <_printf_i+0x148>
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	6861      	ldr	r1, [r4, #4]
 8007656:	4299      	cmp	r1, r3
 8007658:	bfde      	ittt	le
 800765a:	2330      	movle	r3, #48	; 0x30
 800765c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007664:	1b52      	subs	r2, r2, r5
 8007666:	6122      	str	r2, [r4, #16]
 8007668:	f8cd a000 	str.w	sl, [sp]
 800766c:	464b      	mov	r3, r9
 800766e:	aa03      	add	r2, sp, #12
 8007670:	4621      	mov	r1, r4
 8007672:	4640      	mov	r0, r8
 8007674:	f7ff fee4 	bl	8007440 <_printf_common>
 8007678:	3001      	adds	r0, #1
 800767a:	d14a      	bne.n	8007712 <_printf_i+0x1f6>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	b004      	add	sp, #16
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	f043 0320 	orr.w	r3, r3, #32
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	4833      	ldr	r0, [pc, #204]	; (800775c <_printf_i+0x240>)
 8007690:	2778      	movs	r7, #120	; 0x78
 8007692:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	6829      	ldr	r1, [r5, #0]
 800769a:	061f      	lsls	r7, r3, #24
 800769c:	f851 6b04 	ldr.w	r6, [r1], #4
 80076a0:	d402      	bmi.n	80076a8 <_printf_i+0x18c>
 80076a2:	065f      	lsls	r7, r3, #25
 80076a4:	bf48      	it	mi
 80076a6:	b2b6      	uxthmi	r6, r6
 80076a8:	07df      	lsls	r7, r3, #31
 80076aa:	bf48      	it	mi
 80076ac:	f043 0320 	orrmi.w	r3, r3, #32
 80076b0:	6029      	str	r1, [r5, #0]
 80076b2:	bf48      	it	mi
 80076b4:	6023      	strmi	r3, [r4, #0]
 80076b6:	b91e      	cbnz	r6, 80076c0 <_printf_i+0x1a4>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	f023 0320 	bic.w	r3, r3, #32
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	2310      	movs	r3, #16
 80076c2:	e7a7      	b.n	8007614 <_printf_i+0xf8>
 80076c4:	4824      	ldr	r0, [pc, #144]	; (8007758 <_printf_i+0x23c>)
 80076c6:	e7e4      	b.n	8007692 <_printf_i+0x176>
 80076c8:	4615      	mov	r5, r2
 80076ca:	e7bd      	b.n	8007648 <_printf_i+0x12c>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	6826      	ldr	r6, [r4, #0]
 80076d0:	6961      	ldr	r1, [r4, #20]
 80076d2:	1d18      	adds	r0, r3, #4
 80076d4:	6028      	str	r0, [r5, #0]
 80076d6:	0635      	lsls	r5, r6, #24
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	d501      	bpl.n	80076e0 <_printf_i+0x1c4>
 80076dc:	6019      	str	r1, [r3, #0]
 80076de:	e002      	b.n	80076e6 <_printf_i+0x1ca>
 80076e0:	0670      	lsls	r0, r6, #25
 80076e2:	d5fb      	bpl.n	80076dc <_printf_i+0x1c0>
 80076e4:	8019      	strh	r1, [r3, #0]
 80076e6:	2300      	movs	r3, #0
 80076e8:	6123      	str	r3, [r4, #16]
 80076ea:	4615      	mov	r5, r2
 80076ec:	e7bc      	b.n	8007668 <_printf_i+0x14c>
 80076ee:	682b      	ldr	r3, [r5, #0]
 80076f0:	1d1a      	adds	r2, r3, #4
 80076f2:	602a      	str	r2, [r5, #0]
 80076f4:	681d      	ldr	r5, [r3, #0]
 80076f6:	6862      	ldr	r2, [r4, #4]
 80076f8:	2100      	movs	r1, #0
 80076fa:	4628      	mov	r0, r5
 80076fc:	f7f8 fd68 	bl	80001d0 <memchr>
 8007700:	b108      	cbz	r0, 8007706 <_printf_i+0x1ea>
 8007702:	1b40      	subs	r0, r0, r5
 8007704:	6060      	str	r0, [r4, #4]
 8007706:	6863      	ldr	r3, [r4, #4]
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	2300      	movs	r3, #0
 800770c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007710:	e7aa      	b.n	8007668 <_printf_i+0x14c>
 8007712:	6923      	ldr	r3, [r4, #16]
 8007714:	462a      	mov	r2, r5
 8007716:	4649      	mov	r1, r9
 8007718:	4640      	mov	r0, r8
 800771a:	47d0      	blx	sl
 800771c:	3001      	adds	r0, #1
 800771e:	d0ad      	beq.n	800767c <_printf_i+0x160>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	079b      	lsls	r3, r3, #30
 8007724:	d413      	bmi.n	800774e <_printf_i+0x232>
 8007726:	68e0      	ldr	r0, [r4, #12]
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	4298      	cmp	r0, r3
 800772c:	bfb8      	it	lt
 800772e:	4618      	movlt	r0, r3
 8007730:	e7a6      	b.n	8007680 <_printf_i+0x164>
 8007732:	2301      	movs	r3, #1
 8007734:	4632      	mov	r2, r6
 8007736:	4649      	mov	r1, r9
 8007738:	4640      	mov	r0, r8
 800773a:	47d0      	blx	sl
 800773c:	3001      	adds	r0, #1
 800773e:	d09d      	beq.n	800767c <_printf_i+0x160>
 8007740:	3501      	adds	r5, #1
 8007742:	68e3      	ldr	r3, [r4, #12]
 8007744:	9903      	ldr	r1, [sp, #12]
 8007746:	1a5b      	subs	r3, r3, r1
 8007748:	42ab      	cmp	r3, r5
 800774a:	dcf2      	bgt.n	8007732 <_printf_i+0x216>
 800774c:	e7eb      	b.n	8007726 <_printf_i+0x20a>
 800774e:	2500      	movs	r5, #0
 8007750:	f104 0619 	add.w	r6, r4, #25
 8007754:	e7f5      	b.n	8007742 <_printf_i+0x226>
 8007756:	bf00      	nop
 8007758:	08009f96 	.word	0x08009f96
 800775c:	08009fa7 	.word	0x08009fa7

08007760 <std>:
 8007760:	2300      	movs	r3, #0
 8007762:	b510      	push	{r4, lr}
 8007764:	4604      	mov	r4, r0
 8007766:	e9c0 3300 	strd	r3, r3, [r0]
 800776a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800776e:	6083      	str	r3, [r0, #8]
 8007770:	8181      	strh	r1, [r0, #12]
 8007772:	6643      	str	r3, [r0, #100]	; 0x64
 8007774:	81c2      	strh	r2, [r0, #14]
 8007776:	6183      	str	r3, [r0, #24]
 8007778:	4619      	mov	r1, r3
 800777a:	2208      	movs	r2, #8
 800777c:	305c      	adds	r0, #92	; 0x5c
 800777e:	f000 f906 	bl	800798e <memset>
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <std+0x58>)
 8007784:	6263      	str	r3, [r4, #36]	; 0x24
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <std+0x5c>)
 8007788:	62a3      	str	r3, [r4, #40]	; 0x28
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <std+0x60>)
 800778c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <std+0x64>)
 8007790:	6323      	str	r3, [r4, #48]	; 0x30
 8007792:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <std+0x68>)
 8007794:	6224      	str	r4, [r4, #32]
 8007796:	429c      	cmp	r4, r3
 8007798:	d006      	beq.n	80077a8 <std+0x48>
 800779a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800779e:	4294      	cmp	r4, r2
 80077a0:	d002      	beq.n	80077a8 <std+0x48>
 80077a2:	33d0      	adds	r3, #208	; 0xd0
 80077a4:	429c      	cmp	r4, r3
 80077a6:	d105      	bne.n	80077b4 <std+0x54>
 80077a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b0:	f000 b96a 	b.w	8007a88 <__retarget_lock_init_recursive>
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	bf00      	nop
 80077b8:	08007909 	.word	0x08007909
 80077bc:	0800792b 	.word	0x0800792b
 80077c0:	08007963 	.word	0x08007963
 80077c4:	08007987 	.word	0x08007987
 80077c8:	200003cc 	.word	0x200003cc

080077cc <stdio_exit_handler>:
 80077cc:	4a02      	ldr	r2, [pc, #8]	; (80077d8 <stdio_exit_handler+0xc>)
 80077ce:	4903      	ldr	r1, [pc, #12]	; (80077dc <stdio_exit_handler+0x10>)
 80077d0:	4803      	ldr	r0, [pc, #12]	; (80077e0 <stdio_exit_handler+0x14>)
 80077d2:	f000 b869 	b.w	80078a8 <_fwalk_sglue>
 80077d6:	bf00      	nop
 80077d8:	200000e4 	.word	0x200000e4
 80077dc:	08009411 	.word	0x08009411
 80077e0:	200000f0 	.word	0x200000f0

080077e4 <cleanup_stdio>:
 80077e4:	6841      	ldr	r1, [r0, #4]
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <cleanup_stdio+0x34>)
 80077e8:	4299      	cmp	r1, r3
 80077ea:	b510      	push	{r4, lr}
 80077ec:	4604      	mov	r4, r0
 80077ee:	d001      	beq.n	80077f4 <cleanup_stdio+0x10>
 80077f0:	f001 fe0e 	bl	8009410 <_fflush_r>
 80077f4:	68a1      	ldr	r1, [r4, #8]
 80077f6:	4b09      	ldr	r3, [pc, #36]	; (800781c <cleanup_stdio+0x38>)
 80077f8:	4299      	cmp	r1, r3
 80077fa:	d002      	beq.n	8007802 <cleanup_stdio+0x1e>
 80077fc:	4620      	mov	r0, r4
 80077fe:	f001 fe07 	bl	8009410 <_fflush_r>
 8007802:	68e1      	ldr	r1, [r4, #12]
 8007804:	4b06      	ldr	r3, [pc, #24]	; (8007820 <cleanup_stdio+0x3c>)
 8007806:	4299      	cmp	r1, r3
 8007808:	d004      	beq.n	8007814 <cleanup_stdio+0x30>
 800780a:	4620      	mov	r0, r4
 800780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007810:	f001 bdfe 	b.w	8009410 <_fflush_r>
 8007814:	bd10      	pop	{r4, pc}
 8007816:	bf00      	nop
 8007818:	200003cc 	.word	0x200003cc
 800781c:	20000434 	.word	0x20000434
 8007820:	2000049c 	.word	0x2000049c

08007824 <global_stdio_init.part.0>:
 8007824:	b510      	push	{r4, lr}
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <global_stdio_init.part.0+0x30>)
 8007828:	4c0b      	ldr	r4, [pc, #44]	; (8007858 <global_stdio_init.part.0+0x34>)
 800782a:	4a0c      	ldr	r2, [pc, #48]	; (800785c <global_stdio_init.part.0+0x38>)
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	4620      	mov	r0, r4
 8007830:	2200      	movs	r2, #0
 8007832:	2104      	movs	r1, #4
 8007834:	f7ff ff94 	bl	8007760 <std>
 8007838:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800783c:	2201      	movs	r2, #1
 800783e:	2109      	movs	r1, #9
 8007840:	f7ff ff8e 	bl	8007760 <std>
 8007844:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007848:	2202      	movs	r2, #2
 800784a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784e:	2112      	movs	r1, #18
 8007850:	f7ff bf86 	b.w	8007760 <std>
 8007854:	20000504 	.word	0x20000504
 8007858:	200003cc 	.word	0x200003cc
 800785c:	080077cd 	.word	0x080077cd

08007860 <__sfp_lock_acquire>:
 8007860:	4801      	ldr	r0, [pc, #4]	; (8007868 <__sfp_lock_acquire+0x8>)
 8007862:	f000 b912 	b.w	8007a8a <__retarget_lock_acquire_recursive>
 8007866:	bf00      	nop
 8007868:	2000050d 	.word	0x2000050d

0800786c <__sfp_lock_release>:
 800786c:	4801      	ldr	r0, [pc, #4]	; (8007874 <__sfp_lock_release+0x8>)
 800786e:	f000 b90d 	b.w	8007a8c <__retarget_lock_release_recursive>
 8007872:	bf00      	nop
 8007874:	2000050d 	.word	0x2000050d

08007878 <__sinit>:
 8007878:	b510      	push	{r4, lr}
 800787a:	4604      	mov	r4, r0
 800787c:	f7ff fff0 	bl	8007860 <__sfp_lock_acquire>
 8007880:	6a23      	ldr	r3, [r4, #32]
 8007882:	b11b      	cbz	r3, 800788c <__sinit+0x14>
 8007884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007888:	f7ff bff0 	b.w	800786c <__sfp_lock_release>
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <__sinit+0x28>)
 800788e:	6223      	str	r3, [r4, #32]
 8007890:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <__sinit+0x2c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1f5      	bne.n	8007884 <__sinit+0xc>
 8007898:	f7ff ffc4 	bl	8007824 <global_stdio_init.part.0>
 800789c:	e7f2      	b.n	8007884 <__sinit+0xc>
 800789e:	bf00      	nop
 80078a0:	080077e5 	.word	0x080077e5
 80078a4:	20000504 	.word	0x20000504

080078a8 <_fwalk_sglue>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	4607      	mov	r7, r0
 80078ae:	4688      	mov	r8, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	2600      	movs	r6, #0
 80078b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078b8:	f1b9 0901 	subs.w	r9, r9, #1
 80078bc:	d505      	bpl.n	80078ca <_fwalk_sglue+0x22>
 80078be:	6824      	ldr	r4, [r4, #0]
 80078c0:	2c00      	cmp	r4, #0
 80078c2:	d1f7      	bne.n	80078b4 <_fwalk_sglue+0xc>
 80078c4:	4630      	mov	r0, r6
 80078c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ca:	89ab      	ldrh	r3, [r5, #12]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d907      	bls.n	80078e0 <_fwalk_sglue+0x38>
 80078d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078d4:	3301      	adds	r3, #1
 80078d6:	d003      	beq.n	80078e0 <_fwalk_sglue+0x38>
 80078d8:	4629      	mov	r1, r5
 80078da:	4638      	mov	r0, r7
 80078dc:	47c0      	blx	r8
 80078de:	4306      	orrs	r6, r0
 80078e0:	3568      	adds	r5, #104	; 0x68
 80078e2:	e7e9      	b.n	80078b8 <_fwalk_sglue+0x10>

080078e4 <iprintf>:
 80078e4:	b40f      	push	{r0, r1, r2, r3}
 80078e6:	b507      	push	{r0, r1, r2, lr}
 80078e8:	4906      	ldr	r1, [pc, #24]	; (8007904 <iprintf+0x20>)
 80078ea:	ab04      	add	r3, sp, #16
 80078ec:	6808      	ldr	r0, [r1, #0]
 80078ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f2:	6881      	ldr	r1, [r0, #8]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	f001 fbeb 	bl	80090d0 <_vfiprintf_r>
 80078fa:	b003      	add	sp, #12
 80078fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007900:	b004      	add	sp, #16
 8007902:	4770      	bx	lr
 8007904:	2000013c 	.word	0x2000013c

08007908 <__sread>:
 8007908:	b510      	push	{r4, lr}
 800790a:	460c      	mov	r4, r1
 800790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007910:	f000 f86c 	bl	80079ec <_read_r>
 8007914:	2800      	cmp	r0, #0
 8007916:	bfab      	itete	ge
 8007918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800791a:	89a3      	ldrhlt	r3, [r4, #12]
 800791c:	181b      	addge	r3, r3, r0
 800791e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007922:	bfac      	ite	ge
 8007924:	6563      	strge	r3, [r4, #84]	; 0x54
 8007926:	81a3      	strhlt	r3, [r4, #12]
 8007928:	bd10      	pop	{r4, pc}

0800792a <__swrite>:
 800792a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792e:	461f      	mov	r7, r3
 8007930:	898b      	ldrh	r3, [r1, #12]
 8007932:	05db      	lsls	r3, r3, #23
 8007934:	4605      	mov	r5, r0
 8007936:	460c      	mov	r4, r1
 8007938:	4616      	mov	r6, r2
 800793a:	d505      	bpl.n	8007948 <__swrite+0x1e>
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	2302      	movs	r3, #2
 8007942:	2200      	movs	r2, #0
 8007944:	f000 f840 	bl	80079c8 <_lseek_r>
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800794e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	4632      	mov	r2, r6
 8007956:	463b      	mov	r3, r7
 8007958:	4628      	mov	r0, r5
 800795a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800795e:	f000 b857 	b.w	8007a10 <_write_r>

08007962 <__sseek>:
 8007962:	b510      	push	{r4, lr}
 8007964:	460c      	mov	r4, r1
 8007966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796a:	f000 f82d 	bl	80079c8 <_lseek_r>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	bf15      	itete	ne
 8007974:	6560      	strne	r0, [r4, #84]	; 0x54
 8007976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800797a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800797e:	81a3      	strheq	r3, [r4, #12]
 8007980:	bf18      	it	ne
 8007982:	81a3      	strhne	r3, [r4, #12]
 8007984:	bd10      	pop	{r4, pc}

08007986 <__sclose>:
 8007986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798a:	f000 b80d 	b.w	80079a8 <_close_r>

0800798e <memset>:
 800798e:	4402      	add	r2, r0
 8007990:	4603      	mov	r3, r0
 8007992:	4293      	cmp	r3, r2
 8007994:	d100      	bne.n	8007998 <memset+0xa>
 8007996:	4770      	bx	lr
 8007998:	f803 1b01 	strb.w	r1, [r3], #1
 800799c:	e7f9      	b.n	8007992 <memset+0x4>
	...

080079a0 <_localeconv_r>:
 80079a0:	4800      	ldr	r0, [pc, #0]	; (80079a4 <_localeconv_r+0x4>)
 80079a2:	4770      	bx	lr
 80079a4:	20000230 	.word	0x20000230

080079a8 <_close_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4d06      	ldr	r5, [pc, #24]	; (80079c4 <_close_r+0x1c>)
 80079ac:	2300      	movs	r3, #0
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	602b      	str	r3, [r5, #0]
 80079b4:	f7fa f97d 	bl	8001cb2 <_close>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_close_r+0x1a>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_close_r+0x1a>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	20000508 	.word	0x20000508

080079c8 <_lseek_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d07      	ldr	r5, [pc, #28]	; (80079e8 <_lseek_r+0x20>)
 80079cc:	4604      	mov	r4, r0
 80079ce:	4608      	mov	r0, r1
 80079d0:	4611      	mov	r1, r2
 80079d2:	2200      	movs	r2, #0
 80079d4:	602a      	str	r2, [r5, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7fa f992 	bl	8001d00 <_lseek>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_lseek_r+0x1e>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_lseek_r+0x1e>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	20000508 	.word	0x20000508

080079ec <_read_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d07      	ldr	r5, [pc, #28]	; (8007a0c <_read_r+0x20>)
 80079f0:	4604      	mov	r4, r0
 80079f2:	4608      	mov	r0, r1
 80079f4:	4611      	mov	r1, r2
 80079f6:	2200      	movs	r2, #0
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f7fa f920 	bl	8001c40 <_read>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_read_r+0x1e>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_read_r+0x1e>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	20000508 	.word	0x20000508

08007a10 <_write_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	; (8007a30 <_write_r+0x20>)
 8007a14:	4604      	mov	r4, r0
 8007a16:	4608      	mov	r0, r1
 8007a18:	4611      	mov	r1, r2
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	602a      	str	r2, [r5, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f7fa f92b 	bl	8001c7a <_write>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_write_r+0x1e>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_write_r+0x1e>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	20000508 	.word	0x20000508

08007a34 <__errno>:
 8007a34:	4b01      	ldr	r3, [pc, #4]	; (8007a3c <__errno+0x8>)
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	2000013c 	.word	0x2000013c

08007a40 <__libc_init_array>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4d0d      	ldr	r5, [pc, #52]	; (8007a78 <__libc_init_array+0x38>)
 8007a44:	4c0d      	ldr	r4, [pc, #52]	; (8007a7c <__libc_init_array+0x3c>)
 8007a46:	1b64      	subs	r4, r4, r5
 8007a48:	10a4      	asrs	r4, r4, #2
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	42a6      	cmp	r6, r4
 8007a4e:	d109      	bne.n	8007a64 <__libc_init_array+0x24>
 8007a50:	4d0b      	ldr	r5, [pc, #44]	; (8007a80 <__libc_init_array+0x40>)
 8007a52:	4c0c      	ldr	r4, [pc, #48]	; (8007a84 <__libc_init_array+0x44>)
 8007a54:	f002 fa6a 	bl	8009f2c <_init>
 8007a58:	1b64      	subs	r4, r4, r5
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	42a6      	cmp	r6, r4
 8007a60:	d105      	bne.n	8007a6e <__libc_init_array+0x2e>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a68:	4798      	blx	r3
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7ee      	b.n	8007a4c <__libc_init_array+0xc>
 8007a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a72:	4798      	blx	r3
 8007a74:	3601      	adds	r6, #1
 8007a76:	e7f2      	b.n	8007a5e <__libc_init_array+0x1e>
 8007a78:	0800a370 	.word	0x0800a370
 8007a7c:	0800a370 	.word	0x0800a370
 8007a80:	0800a370 	.word	0x0800a370
 8007a84:	0800a374 	.word	0x0800a374

08007a88 <__retarget_lock_init_recursive>:
 8007a88:	4770      	bx	lr

08007a8a <__retarget_lock_acquire_recursive>:
 8007a8a:	4770      	bx	lr

08007a8c <__retarget_lock_release_recursive>:
 8007a8c:	4770      	bx	lr

08007a8e <quorem>:
 8007a8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a92:	6903      	ldr	r3, [r0, #16]
 8007a94:	690c      	ldr	r4, [r1, #16]
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	4607      	mov	r7, r0
 8007a9a:	db7e      	blt.n	8007b9a <quorem+0x10c>
 8007a9c:	3c01      	subs	r4, #1
 8007a9e:	f101 0814 	add.w	r8, r1, #20
 8007aa2:	f100 0514 	add.w	r5, r0, #20
 8007aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007abc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ac0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ac4:	d331      	bcc.n	8007b2a <quorem+0x9c>
 8007ac6:	f04f 0e00 	mov.w	lr, #0
 8007aca:	4640      	mov	r0, r8
 8007acc:	46ac      	mov	ip, r5
 8007ace:	46f2      	mov	sl, lr
 8007ad0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ad4:	b293      	uxth	r3, r2
 8007ad6:	fb06 e303 	mla	r3, r6, r3, lr
 8007ada:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ade:	0c1a      	lsrs	r2, r3, #16
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	ebaa 0303 	sub.w	r3, sl, r3
 8007ae6:	f8dc a000 	ldr.w	sl, [ip]
 8007aea:	fa13 f38a 	uxtah	r3, r3, sl
 8007aee:	fb06 220e 	mla	r2, r6, lr, r2
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	9b00      	ldr	r3, [sp, #0]
 8007af6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007afa:	b292      	uxth	r2, r2
 8007afc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b04:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b08:	4581      	cmp	r9, r0
 8007b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b0e:	f84c 3b04 	str.w	r3, [ip], #4
 8007b12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b16:	d2db      	bcs.n	8007ad0 <quorem+0x42>
 8007b18:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b1c:	b92b      	cbnz	r3, 8007b2a <quorem+0x9c>
 8007b1e:	9b01      	ldr	r3, [sp, #4]
 8007b20:	3b04      	subs	r3, #4
 8007b22:	429d      	cmp	r5, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	d32c      	bcc.n	8007b82 <quorem+0xf4>
 8007b28:	613c      	str	r4, [r7, #16]
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	f001 f9a6 	bl	8008e7c <__mcmp>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	db22      	blt.n	8007b7a <quorem+0xec>
 8007b34:	3601      	adds	r6, #1
 8007b36:	4629      	mov	r1, r5
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b3e:	f8d1 c000 	ldr.w	ip, [r1]
 8007b42:	b293      	uxth	r3, r2
 8007b44:	1ac3      	subs	r3, r0, r3
 8007b46:	0c12      	lsrs	r2, r2, #16
 8007b48:	fa13 f38c 	uxtah	r3, r3, ip
 8007b4c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007b50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b5a:	45c1      	cmp	r9, r8
 8007b5c:	f841 3b04 	str.w	r3, [r1], #4
 8007b60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b64:	d2e9      	bcs.n	8007b3a <quorem+0xac>
 8007b66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b6e:	b922      	cbnz	r2, 8007b7a <quorem+0xec>
 8007b70:	3b04      	subs	r3, #4
 8007b72:	429d      	cmp	r5, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	d30a      	bcc.n	8007b8e <quorem+0x100>
 8007b78:	613c      	str	r4, [r7, #16]
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	b003      	add	sp, #12
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	6812      	ldr	r2, [r2, #0]
 8007b84:	3b04      	subs	r3, #4
 8007b86:	2a00      	cmp	r2, #0
 8007b88:	d1ce      	bne.n	8007b28 <quorem+0x9a>
 8007b8a:	3c01      	subs	r4, #1
 8007b8c:	e7c9      	b.n	8007b22 <quorem+0x94>
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	3b04      	subs	r3, #4
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	d1f0      	bne.n	8007b78 <quorem+0xea>
 8007b96:	3c01      	subs	r4, #1
 8007b98:	e7eb      	b.n	8007b72 <quorem+0xe4>
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	e7ee      	b.n	8007b7c <quorem+0xee>
	...

08007ba0 <_dtoa_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	ed2d 8b04 	vpush	{d8-d9}
 8007ba8:	69c5      	ldr	r5, [r0, #28]
 8007baa:	b093      	sub	sp, #76	; 0x4c
 8007bac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007bb0:	ec57 6b10 	vmov	r6, r7, d0
 8007bb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bb8:	9107      	str	r1, [sp, #28]
 8007bba:	4604      	mov	r4, r0
 8007bbc:	920a      	str	r2, [sp, #40]	; 0x28
 8007bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8007bc0:	b975      	cbnz	r5, 8007be0 <_dtoa_r+0x40>
 8007bc2:	2010      	movs	r0, #16
 8007bc4:	f000 fe2a 	bl	800881c <malloc>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	61e0      	str	r0, [r4, #28]
 8007bcc:	b920      	cbnz	r0, 8007bd8 <_dtoa_r+0x38>
 8007bce:	4bae      	ldr	r3, [pc, #696]	; (8007e88 <_dtoa_r+0x2e8>)
 8007bd0:	21ef      	movs	r1, #239	; 0xef
 8007bd2:	48ae      	ldr	r0, [pc, #696]	; (8007e8c <_dtoa_r+0x2ec>)
 8007bd4:	f001 fcf8 	bl	80095c8 <__assert_func>
 8007bd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bdc:	6005      	str	r5, [r0, #0]
 8007bde:	60c5      	str	r5, [r0, #12]
 8007be0:	69e3      	ldr	r3, [r4, #28]
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	b151      	cbz	r1, 8007bfc <_dtoa_r+0x5c>
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	604a      	str	r2, [r1, #4]
 8007bea:	2301      	movs	r3, #1
 8007bec:	4093      	lsls	r3, r2
 8007bee:	608b      	str	r3, [r1, #8]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 ff07 	bl	8008a04 <_Bfree>
 8007bf6:	69e3      	ldr	r3, [r4, #28]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	1e3b      	subs	r3, r7, #0
 8007bfe:	bfbb      	ittet	lt
 8007c00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c04:	9303      	strlt	r3, [sp, #12]
 8007c06:	2300      	movge	r3, #0
 8007c08:	2201      	movlt	r2, #1
 8007c0a:	bfac      	ite	ge
 8007c0c:	f8c8 3000 	strge.w	r3, [r8]
 8007c10:	f8c8 2000 	strlt.w	r2, [r8]
 8007c14:	4b9e      	ldr	r3, [pc, #632]	; (8007e90 <_dtoa_r+0x2f0>)
 8007c16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007c1a:	ea33 0308 	bics.w	r3, r3, r8
 8007c1e:	d11b      	bne.n	8007c58 <_dtoa_r+0xb8>
 8007c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c22:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007c2c:	4333      	orrs	r3, r6
 8007c2e:	f000 8593 	beq.w	8008758 <_dtoa_r+0xbb8>
 8007c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c34:	b963      	cbnz	r3, 8007c50 <_dtoa_r+0xb0>
 8007c36:	4b97      	ldr	r3, [pc, #604]	; (8007e94 <_dtoa_r+0x2f4>)
 8007c38:	e027      	b.n	8007c8a <_dtoa_r+0xea>
 8007c3a:	4b97      	ldr	r3, [pc, #604]	; (8007e98 <_dtoa_r+0x2f8>)
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	9800      	ldr	r0, [sp, #0]
 8007c46:	b013      	add	sp, #76	; 0x4c
 8007c48:	ecbd 8b04 	vpop	{d8-d9}
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	4b90      	ldr	r3, [pc, #576]	; (8007e94 <_dtoa_r+0x2f4>)
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	3303      	adds	r3, #3
 8007c56:	e7f3      	b.n	8007c40 <_dtoa_r+0xa0>
 8007c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	ec51 0b17 	vmov	r0, r1, d7
 8007c62:	eeb0 8a47 	vmov.f32	s16, s14
 8007c66:	eef0 8a67 	vmov.f32	s17, s15
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f7f8 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c70:	4681      	mov	r9, r0
 8007c72:	b160      	cbz	r0, 8007c8e <_dtoa_r+0xee>
 8007c74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c76:	2301      	movs	r3, #1
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8568 	beq.w	8008752 <_dtoa_r+0xbb2>
 8007c82:	4b86      	ldr	r3, [pc, #536]	; (8007e9c <_dtoa_r+0x2fc>)
 8007c84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	e7da      	b.n	8007c44 <_dtoa_r+0xa4>
 8007c8e:	aa10      	add	r2, sp, #64	; 0x40
 8007c90:	a911      	add	r1, sp, #68	; 0x44
 8007c92:	4620      	mov	r0, r4
 8007c94:	eeb0 0a48 	vmov.f32	s0, s16
 8007c98:	eef0 0a68 	vmov.f32	s1, s17
 8007c9c:	f001 f994 	bl	8008fc8 <__d2b>
 8007ca0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ca4:	4682      	mov	sl, r0
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	d07f      	beq.n	8007daa <_dtoa_r+0x20a>
 8007caa:	ee18 3a90 	vmov	r3, s17
 8007cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007cb6:	ec51 0b18 	vmov	r0, r1, d8
 8007cba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007cbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4b75      	ldr	r3, [pc, #468]	; (8007ea0 <_dtoa_r+0x300>)
 8007ccc:	f7f8 fadc 	bl	8000288 <__aeabi_dsub>
 8007cd0:	a367      	add	r3, pc, #412	; (adr r3, 8007e70 <_dtoa_r+0x2d0>)
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f7f8 fc8f 	bl	80005f8 <__aeabi_dmul>
 8007cda:	a367      	add	r3, pc, #412	; (adr r3, 8007e78 <_dtoa_r+0x2d8>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7f8 fad4 	bl	800028c <__adddf3>
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	460f      	mov	r7, r1
 8007cea:	f7f8 fc1b 	bl	8000524 <__aeabi_i2d>
 8007cee:	a364      	add	r3, pc, #400	; (adr r3, 8007e80 <_dtoa_r+0x2e0>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f7f8 fc80 	bl	80005f8 <__aeabi_dmul>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 fac4 	bl	800028c <__adddf3>
 8007d04:	4606      	mov	r6, r0
 8007d06:	460f      	mov	r7, r1
 8007d08:	f7f8 ff26 	bl	8000b58 <__aeabi_d2iz>
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4683      	mov	fp, r0
 8007d10:	2300      	movs	r3, #0
 8007d12:	4630      	mov	r0, r6
 8007d14:	4639      	mov	r1, r7
 8007d16:	f7f8 fee1 	bl	8000adc <__aeabi_dcmplt>
 8007d1a:	b148      	cbz	r0, 8007d30 <_dtoa_r+0x190>
 8007d1c:	4658      	mov	r0, fp
 8007d1e:	f7f8 fc01 	bl	8000524 <__aeabi_i2d>
 8007d22:	4632      	mov	r2, r6
 8007d24:	463b      	mov	r3, r7
 8007d26:	f7f8 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2a:	b908      	cbnz	r0, 8007d30 <_dtoa_r+0x190>
 8007d2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d30:	f1bb 0f16 	cmp.w	fp, #22
 8007d34:	d857      	bhi.n	8007de6 <_dtoa_r+0x246>
 8007d36:	4b5b      	ldr	r3, [pc, #364]	; (8007ea4 <_dtoa_r+0x304>)
 8007d38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	ec51 0b18 	vmov	r0, r1, d8
 8007d44:	f7f8 feca 	bl	8000adc <__aeabi_dcmplt>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d04e      	beq.n	8007dea <_dtoa_r+0x24a>
 8007d4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d50:	2300      	movs	r3, #0
 8007d52:	930c      	str	r3, [sp, #48]	; 0x30
 8007d54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d56:	1b5b      	subs	r3, r3, r5
 8007d58:	1e5a      	subs	r2, r3, #1
 8007d5a:	bf45      	ittet	mi
 8007d5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007d60:	9305      	strmi	r3, [sp, #20]
 8007d62:	2300      	movpl	r3, #0
 8007d64:	2300      	movmi	r3, #0
 8007d66:	9206      	str	r2, [sp, #24]
 8007d68:	bf54      	ite	pl
 8007d6a:	9305      	strpl	r3, [sp, #20]
 8007d6c:	9306      	strmi	r3, [sp, #24]
 8007d6e:	f1bb 0f00 	cmp.w	fp, #0
 8007d72:	db3c      	blt.n	8007dee <_dtoa_r+0x24e>
 8007d74:	9b06      	ldr	r3, [sp, #24]
 8007d76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007d7a:	445b      	add	r3, fp
 8007d7c:	9306      	str	r3, [sp, #24]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9308      	str	r3, [sp, #32]
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	2b09      	cmp	r3, #9
 8007d86:	d868      	bhi.n	8007e5a <_dtoa_r+0x2ba>
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	bfc4      	itt	gt
 8007d8c:	3b04      	subgt	r3, #4
 8007d8e:	9307      	strgt	r3, [sp, #28]
 8007d90:	9b07      	ldr	r3, [sp, #28]
 8007d92:	f1a3 0302 	sub.w	r3, r3, #2
 8007d96:	bfcc      	ite	gt
 8007d98:	2500      	movgt	r5, #0
 8007d9a:	2501      	movle	r5, #1
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	f200 8085 	bhi.w	8007eac <_dtoa_r+0x30c>
 8007da2:	e8df f003 	tbb	[pc, r3]
 8007da6:	3b2e      	.short	0x3b2e
 8007da8:	5839      	.short	0x5839
 8007daa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007dae:	441d      	add	r5, r3
 8007db0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	bfc1      	itttt	gt
 8007db8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dbc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007dc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007dc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007dc8:	bfd6      	itet	le
 8007dca:	f1c3 0320 	rsble	r3, r3, #32
 8007dce:	ea48 0003 	orrgt.w	r0, r8, r3
 8007dd2:	fa06 f003 	lslle.w	r0, r6, r3
 8007dd6:	f7f8 fb95 	bl	8000504 <__aeabi_ui2d>
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007de0:	3d01      	subs	r5, #1
 8007de2:	920e      	str	r2, [sp, #56]	; 0x38
 8007de4:	e76f      	b.n	8007cc6 <_dtoa_r+0x126>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e7b3      	b.n	8007d52 <_dtoa_r+0x1b2>
 8007dea:	900c      	str	r0, [sp, #48]	; 0x30
 8007dec:	e7b2      	b.n	8007d54 <_dtoa_r+0x1b4>
 8007dee:	9b05      	ldr	r3, [sp, #20]
 8007df0:	eba3 030b 	sub.w	r3, r3, fp
 8007df4:	9305      	str	r3, [sp, #20]
 8007df6:	f1cb 0300 	rsb	r3, fp, #0
 8007dfa:	9308      	str	r3, [sp, #32]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e00:	e7bf      	b.n	8007d82 <_dtoa_r+0x1e2>
 8007e02:	2300      	movs	r3, #0
 8007e04:	9309      	str	r3, [sp, #36]	; 0x24
 8007e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc52      	bgt.n	8007eb2 <_dtoa_r+0x312>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	461a      	mov	r2, r3
 8007e14:	920a      	str	r2, [sp, #40]	; 0x28
 8007e16:	e00b      	b.n	8007e30 <_dtoa_r+0x290>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e7f3      	b.n	8007e04 <_dtoa_r+0x264>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e22:	445b      	add	r3, fp
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	3301      	adds	r3, #1
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	9304      	str	r3, [sp, #16]
 8007e2c:	bfb8      	it	lt
 8007e2e:	2301      	movlt	r3, #1
 8007e30:	69e0      	ldr	r0, [r4, #28]
 8007e32:	2100      	movs	r1, #0
 8007e34:	2204      	movs	r2, #4
 8007e36:	f102 0614 	add.w	r6, r2, #20
 8007e3a:	429e      	cmp	r6, r3
 8007e3c:	d93d      	bls.n	8007eba <_dtoa_r+0x31a>
 8007e3e:	6041      	str	r1, [r0, #4]
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fd9f 	bl	8008984 <_Balloc>
 8007e46:	9000      	str	r0, [sp, #0]
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d139      	bne.n	8007ec0 <_dtoa_r+0x320>
 8007e4c:	4b16      	ldr	r3, [pc, #88]	; (8007ea8 <_dtoa_r+0x308>)
 8007e4e:	4602      	mov	r2, r0
 8007e50:	f240 11af 	movw	r1, #431	; 0x1af
 8007e54:	e6bd      	b.n	8007bd2 <_dtoa_r+0x32>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e7e1      	b.n	8007e1e <_dtoa_r+0x27e>
 8007e5a:	2501      	movs	r5, #1
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	9509      	str	r5, [sp, #36]	; 0x24
 8007e62:	f04f 33ff 	mov.w	r3, #4294967295
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2312      	movs	r3, #18
 8007e6e:	e7d1      	b.n	8007e14 <_dtoa_r+0x274>
 8007e70:	636f4361 	.word	0x636f4361
 8007e74:	3fd287a7 	.word	0x3fd287a7
 8007e78:	8b60c8b3 	.word	0x8b60c8b3
 8007e7c:	3fc68a28 	.word	0x3fc68a28
 8007e80:	509f79fb 	.word	0x509f79fb
 8007e84:	3fd34413 	.word	0x3fd34413
 8007e88:	08009fc5 	.word	0x08009fc5
 8007e8c:	08009fdc 	.word	0x08009fdc
 8007e90:	7ff00000 	.word	0x7ff00000
 8007e94:	08009fc1 	.word	0x08009fc1
 8007e98:	08009fb8 	.word	0x08009fb8
 8007e9c:	08009f95 	.word	0x08009f95
 8007ea0:	3ff80000 	.word	0x3ff80000
 8007ea4:	0800a0c8 	.word	0x0800a0c8
 8007ea8:	0800a034 	.word	0x0800a034
 8007eac:	2301      	movs	r3, #1
 8007eae:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb0:	e7d7      	b.n	8007e62 <_dtoa_r+0x2c2>
 8007eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	9304      	str	r3, [sp, #16]
 8007eb8:	e7ba      	b.n	8007e30 <_dtoa_r+0x290>
 8007eba:	3101      	adds	r1, #1
 8007ebc:	0052      	lsls	r2, r2, #1
 8007ebe:	e7ba      	b.n	8007e36 <_dtoa_r+0x296>
 8007ec0:	69e3      	ldr	r3, [r4, #28]
 8007ec2:	9a00      	ldr	r2, [sp, #0]
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	9b04      	ldr	r3, [sp, #16]
 8007ec8:	2b0e      	cmp	r3, #14
 8007eca:	f200 80a8 	bhi.w	800801e <_dtoa_r+0x47e>
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	f000 80a5 	beq.w	800801e <_dtoa_r+0x47e>
 8007ed4:	f1bb 0f00 	cmp.w	fp, #0
 8007ed8:	dd38      	ble.n	8007f4c <_dtoa_r+0x3ac>
 8007eda:	4bc0      	ldr	r3, [pc, #768]	; (80081dc <_dtoa_r+0x63c>)
 8007edc:	f00b 020f 	and.w	r2, fp, #15
 8007ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ee4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007ee8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007eec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007ef0:	d019      	beq.n	8007f26 <_dtoa_r+0x386>
 8007ef2:	4bbb      	ldr	r3, [pc, #748]	; (80081e0 <_dtoa_r+0x640>)
 8007ef4:	ec51 0b18 	vmov	r0, r1, d8
 8007ef8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007efc:	f7f8 fca6 	bl	800084c <__aeabi_ddiv>
 8007f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f04:	f008 080f 	and.w	r8, r8, #15
 8007f08:	2503      	movs	r5, #3
 8007f0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80081e0 <_dtoa_r+0x640>
 8007f0e:	f1b8 0f00 	cmp.w	r8, #0
 8007f12:	d10a      	bne.n	8007f2a <_dtoa_r+0x38a>
 8007f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f18:	4632      	mov	r2, r6
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	f7f8 fc96 	bl	800084c <__aeabi_ddiv>
 8007f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f24:	e02b      	b.n	8007f7e <_dtoa_r+0x3de>
 8007f26:	2502      	movs	r5, #2
 8007f28:	e7ef      	b.n	8007f0a <_dtoa_r+0x36a>
 8007f2a:	f018 0f01 	tst.w	r8, #1
 8007f2e:	d008      	beq.n	8007f42 <_dtoa_r+0x3a2>
 8007f30:	4630      	mov	r0, r6
 8007f32:	4639      	mov	r1, r7
 8007f34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007f38:	f7f8 fb5e 	bl	80005f8 <__aeabi_dmul>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f46:	f109 0908 	add.w	r9, r9, #8
 8007f4a:	e7e0      	b.n	8007f0e <_dtoa_r+0x36e>
 8007f4c:	f000 809f 	beq.w	800808e <_dtoa_r+0x4ee>
 8007f50:	f1cb 0600 	rsb	r6, fp, #0
 8007f54:	4ba1      	ldr	r3, [pc, #644]	; (80081dc <_dtoa_r+0x63c>)
 8007f56:	4fa2      	ldr	r7, [pc, #648]	; (80081e0 <_dtoa_r+0x640>)
 8007f58:	f006 020f 	and.w	r2, r6, #15
 8007f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	ec51 0b18 	vmov	r0, r1, d8
 8007f68:	f7f8 fb46 	bl	80005f8 <__aeabi_dmul>
 8007f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f70:	1136      	asrs	r6, r6, #4
 8007f72:	2300      	movs	r3, #0
 8007f74:	2502      	movs	r5, #2
 8007f76:	2e00      	cmp	r6, #0
 8007f78:	d17e      	bne.n	8008078 <_dtoa_r+0x4d8>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1d0      	bne.n	8007f20 <_dtoa_r+0x380>
 8007f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 8084 	beq.w	8008092 <_dtoa_r+0x4f2>
 8007f8a:	4b96      	ldr	r3, [pc, #600]	; (80081e4 <_dtoa_r+0x644>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 fda3 	bl	8000adc <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d07b      	beq.n	8008092 <_dtoa_r+0x4f2>
 8007f9a:	9b04      	ldr	r3, [sp, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d078      	beq.n	8008092 <_dtoa_r+0x4f2>
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dd39      	ble.n	800801a <_dtoa_r+0x47a>
 8007fa6:	4b90      	ldr	r3, [pc, #576]	; (80081e8 <_dtoa_r+0x648>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4640      	mov	r0, r8
 8007fac:	4649      	mov	r1, r9
 8007fae:	f7f8 fb23 	bl	80005f8 <__aeabi_dmul>
 8007fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb6:	9e01      	ldr	r6, [sp, #4]
 8007fb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f7f8 faae 	bl	8000524 <__aeabi_i2d>
 8007fc8:	4642      	mov	r2, r8
 8007fca:	464b      	mov	r3, r9
 8007fcc:	f7f8 fb14 	bl	80005f8 <__aeabi_dmul>
 8007fd0:	4b86      	ldr	r3, [pc, #536]	; (80081ec <_dtoa_r+0x64c>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f7f8 f95a 	bl	800028c <__adddf3>
 8007fd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe0:	9303      	str	r3, [sp, #12]
 8007fe2:	2e00      	cmp	r6, #0
 8007fe4:	d158      	bne.n	8008098 <_dtoa_r+0x4f8>
 8007fe6:	4b82      	ldr	r3, [pc, #520]	; (80081f0 <_dtoa_r+0x650>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4640      	mov	r0, r8
 8007fec:	4649      	mov	r1, r9
 8007fee:	f7f8 f94b 	bl	8000288 <__aeabi_dsub>
 8007ff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ff6:	4680      	mov	r8, r0
 8007ff8:	4689      	mov	r9, r1
 8007ffa:	f7f8 fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f040 8296 	bne.w	8008530 <_dtoa_r+0x990>
 8008004:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008008:	4640      	mov	r0, r8
 800800a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800800e:	4649      	mov	r1, r9
 8008010:	f7f8 fd64 	bl	8000adc <__aeabi_dcmplt>
 8008014:	2800      	cmp	r0, #0
 8008016:	f040 8289 	bne.w	800852c <_dtoa_r+0x98c>
 800801a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800801e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008020:	2b00      	cmp	r3, #0
 8008022:	f2c0 814e 	blt.w	80082c2 <_dtoa_r+0x722>
 8008026:	f1bb 0f0e 	cmp.w	fp, #14
 800802a:	f300 814a 	bgt.w	80082c2 <_dtoa_r+0x722>
 800802e:	4b6b      	ldr	r3, [pc, #428]	; (80081dc <_dtoa_r+0x63c>)
 8008030:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803a:	2b00      	cmp	r3, #0
 800803c:	f280 80dc 	bge.w	80081f8 <_dtoa_r+0x658>
 8008040:	9b04      	ldr	r3, [sp, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f300 80d8 	bgt.w	80081f8 <_dtoa_r+0x658>
 8008048:	f040 826f 	bne.w	800852a <_dtoa_r+0x98a>
 800804c:	4b68      	ldr	r3, [pc, #416]	; (80081f0 <_dtoa_r+0x650>)
 800804e:	2200      	movs	r2, #0
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 fad0 	bl	80005f8 <__aeabi_dmul>
 8008058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800805c:	f7f8 fd52 	bl	8000b04 <__aeabi_dcmpge>
 8008060:	9e04      	ldr	r6, [sp, #16]
 8008062:	4637      	mov	r7, r6
 8008064:	2800      	cmp	r0, #0
 8008066:	f040 8245 	bne.w	80084f4 <_dtoa_r+0x954>
 800806a:	9d00      	ldr	r5, [sp, #0]
 800806c:	2331      	movs	r3, #49	; 0x31
 800806e:	f805 3b01 	strb.w	r3, [r5], #1
 8008072:	f10b 0b01 	add.w	fp, fp, #1
 8008076:	e241      	b.n	80084fc <_dtoa_r+0x95c>
 8008078:	07f2      	lsls	r2, r6, #31
 800807a:	d505      	bpl.n	8008088 <_dtoa_r+0x4e8>
 800807c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008080:	f7f8 faba 	bl	80005f8 <__aeabi_dmul>
 8008084:	3501      	adds	r5, #1
 8008086:	2301      	movs	r3, #1
 8008088:	1076      	asrs	r6, r6, #1
 800808a:	3708      	adds	r7, #8
 800808c:	e773      	b.n	8007f76 <_dtoa_r+0x3d6>
 800808e:	2502      	movs	r5, #2
 8008090:	e775      	b.n	8007f7e <_dtoa_r+0x3de>
 8008092:	9e04      	ldr	r6, [sp, #16]
 8008094:	465f      	mov	r7, fp
 8008096:	e792      	b.n	8007fbe <_dtoa_r+0x41e>
 8008098:	9900      	ldr	r1, [sp, #0]
 800809a:	4b50      	ldr	r3, [pc, #320]	; (80081dc <_dtoa_r+0x63c>)
 800809c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080a0:	4431      	add	r1, r6
 80080a2:	9102      	str	r1, [sp, #8]
 80080a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080a6:	eeb0 9a47 	vmov.f32	s18, s14
 80080aa:	eef0 9a67 	vmov.f32	s19, s15
 80080ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80080b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080b6:	2900      	cmp	r1, #0
 80080b8:	d044      	beq.n	8008144 <_dtoa_r+0x5a4>
 80080ba:	494e      	ldr	r1, [pc, #312]	; (80081f4 <_dtoa_r+0x654>)
 80080bc:	2000      	movs	r0, #0
 80080be:	f7f8 fbc5 	bl	800084c <__aeabi_ddiv>
 80080c2:	ec53 2b19 	vmov	r2, r3, d9
 80080c6:	f7f8 f8df 	bl	8000288 <__aeabi_dsub>
 80080ca:	9d00      	ldr	r5, [sp, #0]
 80080cc:	ec41 0b19 	vmov	d9, r0, r1
 80080d0:	4649      	mov	r1, r9
 80080d2:	4640      	mov	r0, r8
 80080d4:	f7f8 fd40 	bl	8000b58 <__aeabi_d2iz>
 80080d8:	4606      	mov	r6, r0
 80080da:	f7f8 fa23 	bl	8000524 <__aeabi_i2d>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4640      	mov	r0, r8
 80080e4:	4649      	mov	r1, r9
 80080e6:	f7f8 f8cf 	bl	8000288 <__aeabi_dsub>
 80080ea:	3630      	adds	r6, #48	; 0x30
 80080ec:	f805 6b01 	strb.w	r6, [r5], #1
 80080f0:	ec53 2b19 	vmov	r2, r3, d9
 80080f4:	4680      	mov	r8, r0
 80080f6:	4689      	mov	r9, r1
 80080f8:	f7f8 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d164      	bne.n	80081ca <_dtoa_r+0x62a>
 8008100:	4642      	mov	r2, r8
 8008102:	464b      	mov	r3, r9
 8008104:	4937      	ldr	r1, [pc, #220]	; (80081e4 <_dtoa_r+0x644>)
 8008106:	2000      	movs	r0, #0
 8008108:	f7f8 f8be 	bl	8000288 <__aeabi_dsub>
 800810c:	ec53 2b19 	vmov	r2, r3, d9
 8008110:	f7f8 fce4 	bl	8000adc <__aeabi_dcmplt>
 8008114:	2800      	cmp	r0, #0
 8008116:	f040 80b6 	bne.w	8008286 <_dtoa_r+0x6e6>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	429d      	cmp	r5, r3
 800811e:	f43f af7c 	beq.w	800801a <_dtoa_r+0x47a>
 8008122:	4b31      	ldr	r3, [pc, #196]	; (80081e8 <_dtoa_r+0x648>)
 8008124:	ec51 0b19 	vmov	r0, r1, d9
 8008128:	2200      	movs	r2, #0
 800812a:	f7f8 fa65 	bl	80005f8 <__aeabi_dmul>
 800812e:	4b2e      	ldr	r3, [pc, #184]	; (80081e8 <_dtoa_r+0x648>)
 8008130:	ec41 0b19 	vmov	d9, r0, r1
 8008134:	2200      	movs	r2, #0
 8008136:	4640      	mov	r0, r8
 8008138:	4649      	mov	r1, r9
 800813a:	f7f8 fa5d 	bl	80005f8 <__aeabi_dmul>
 800813e:	4680      	mov	r8, r0
 8008140:	4689      	mov	r9, r1
 8008142:	e7c5      	b.n	80080d0 <_dtoa_r+0x530>
 8008144:	ec51 0b17 	vmov	r0, r1, d7
 8008148:	f7f8 fa56 	bl	80005f8 <__aeabi_dmul>
 800814c:	9b02      	ldr	r3, [sp, #8]
 800814e:	9d00      	ldr	r5, [sp, #0]
 8008150:	930f      	str	r3, [sp, #60]	; 0x3c
 8008152:	ec41 0b19 	vmov	d9, r0, r1
 8008156:	4649      	mov	r1, r9
 8008158:	4640      	mov	r0, r8
 800815a:	f7f8 fcfd 	bl	8000b58 <__aeabi_d2iz>
 800815e:	4606      	mov	r6, r0
 8008160:	f7f8 f9e0 	bl	8000524 <__aeabi_i2d>
 8008164:	3630      	adds	r6, #48	; 0x30
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4640      	mov	r0, r8
 800816c:	4649      	mov	r1, r9
 800816e:	f7f8 f88b 	bl	8000288 <__aeabi_dsub>
 8008172:	f805 6b01 	strb.w	r6, [r5], #1
 8008176:	9b02      	ldr	r3, [sp, #8]
 8008178:	429d      	cmp	r5, r3
 800817a:	4680      	mov	r8, r0
 800817c:	4689      	mov	r9, r1
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	d124      	bne.n	80081ce <_dtoa_r+0x62e>
 8008184:	4b1b      	ldr	r3, [pc, #108]	; (80081f4 <_dtoa_r+0x654>)
 8008186:	ec51 0b19 	vmov	r0, r1, d9
 800818a:	f7f8 f87f 	bl	800028c <__adddf3>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4640      	mov	r0, r8
 8008194:	4649      	mov	r1, r9
 8008196:	f7f8 fcbf 	bl	8000b18 <__aeabi_dcmpgt>
 800819a:	2800      	cmp	r0, #0
 800819c:	d173      	bne.n	8008286 <_dtoa_r+0x6e6>
 800819e:	ec53 2b19 	vmov	r2, r3, d9
 80081a2:	4914      	ldr	r1, [pc, #80]	; (80081f4 <_dtoa_r+0x654>)
 80081a4:	2000      	movs	r0, #0
 80081a6:	f7f8 f86f 	bl	8000288 <__aeabi_dsub>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4640      	mov	r0, r8
 80081b0:	4649      	mov	r1, r9
 80081b2:	f7f8 fc93 	bl	8000adc <__aeabi_dcmplt>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f43f af2f 	beq.w	800801a <_dtoa_r+0x47a>
 80081bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081be:	1e6b      	subs	r3, r5, #1
 80081c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80081c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081c6:	2b30      	cmp	r3, #48	; 0x30
 80081c8:	d0f8      	beq.n	80081bc <_dtoa_r+0x61c>
 80081ca:	46bb      	mov	fp, r7
 80081cc:	e04a      	b.n	8008264 <_dtoa_r+0x6c4>
 80081ce:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <_dtoa_r+0x648>)
 80081d0:	f7f8 fa12 	bl	80005f8 <__aeabi_dmul>
 80081d4:	4680      	mov	r8, r0
 80081d6:	4689      	mov	r9, r1
 80081d8:	e7bd      	b.n	8008156 <_dtoa_r+0x5b6>
 80081da:	bf00      	nop
 80081dc:	0800a0c8 	.word	0x0800a0c8
 80081e0:	0800a0a0 	.word	0x0800a0a0
 80081e4:	3ff00000 	.word	0x3ff00000
 80081e8:	40240000 	.word	0x40240000
 80081ec:	401c0000 	.word	0x401c0000
 80081f0:	40140000 	.word	0x40140000
 80081f4:	3fe00000 	.word	0x3fe00000
 80081f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081fc:	9d00      	ldr	r5, [sp, #0]
 80081fe:	4642      	mov	r2, r8
 8008200:	464b      	mov	r3, r9
 8008202:	4630      	mov	r0, r6
 8008204:	4639      	mov	r1, r7
 8008206:	f7f8 fb21 	bl	800084c <__aeabi_ddiv>
 800820a:	f7f8 fca5 	bl	8000b58 <__aeabi_d2iz>
 800820e:	9001      	str	r0, [sp, #4]
 8008210:	f7f8 f988 	bl	8000524 <__aeabi_i2d>
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	f7f8 f9ee 	bl	80005f8 <__aeabi_dmul>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 f830 	bl	8000288 <__aeabi_dsub>
 8008228:	9e01      	ldr	r6, [sp, #4]
 800822a:	9f04      	ldr	r7, [sp, #16]
 800822c:	3630      	adds	r6, #48	; 0x30
 800822e:	f805 6b01 	strb.w	r6, [r5], #1
 8008232:	9e00      	ldr	r6, [sp, #0]
 8008234:	1bae      	subs	r6, r5, r6
 8008236:	42b7      	cmp	r7, r6
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	d134      	bne.n	80082a8 <_dtoa_r+0x708>
 800823e:	f7f8 f825 	bl	800028c <__adddf3>
 8008242:	4642      	mov	r2, r8
 8008244:	464b      	mov	r3, r9
 8008246:	4606      	mov	r6, r0
 8008248:	460f      	mov	r7, r1
 800824a:	f7f8 fc65 	bl	8000b18 <__aeabi_dcmpgt>
 800824e:	b9c8      	cbnz	r0, 8008284 <_dtoa_r+0x6e4>
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	4630      	mov	r0, r6
 8008256:	4639      	mov	r1, r7
 8008258:	f7f8 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800825c:	b110      	cbz	r0, 8008264 <_dtoa_r+0x6c4>
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	07db      	lsls	r3, r3, #31
 8008262:	d40f      	bmi.n	8008284 <_dtoa_r+0x6e4>
 8008264:	4651      	mov	r1, sl
 8008266:	4620      	mov	r0, r4
 8008268:	f000 fbcc 	bl	8008a04 <_Bfree>
 800826c:	2300      	movs	r3, #0
 800826e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008270:	702b      	strb	r3, [r5, #0]
 8008272:	f10b 0301 	add.w	r3, fp, #1
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800827a:	2b00      	cmp	r3, #0
 800827c:	f43f ace2 	beq.w	8007c44 <_dtoa_r+0xa4>
 8008280:	601d      	str	r5, [r3, #0]
 8008282:	e4df      	b.n	8007c44 <_dtoa_r+0xa4>
 8008284:	465f      	mov	r7, fp
 8008286:	462b      	mov	r3, r5
 8008288:	461d      	mov	r5, r3
 800828a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800828e:	2a39      	cmp	r2, #57	; 0x39
 8008290:	d106      	bne.n	80082a0 <_dtoa_r+0x700>
 8008292:	9a00      	ldr	r2, [sp, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d1f7      	bne.n	8008288 <_dtoa_r+0x6e8>
 8008298:	9900      	ldr	r1, [sp, #0]
 800829a:	2230      	movs	r2, #48	; 0x30
 800829c:	3701      	adds	r7, #1
 800829e:	700a      	strb	r2, [r1, #0]
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	3201      	adds	r2, #1
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	e790      	b.n	80081ca <_dtoa_r+0x62a>
 80082a8:	4ba3      	ldr	r3, [pc, #652]	; (8008538 <_dtoa_r+0x998>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	f7f8 f9a4 	bl	80005f8 <__aeabi_dmul>
 80082b0:	2200      	movs	r2, #0
 80082b2:	2300      	movs	r3, #0
 80082b4:	4606      	mov	r6, r0
 80082b6:	460f      	mov	r7, r1
 80082b8:	f7f8 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d09e      	beq.n	80081fe <_dtoa_r+0x65e>
 80082c0:	e7d0      	b.n	8008264 <_dtoa_r+0x6c4>
 80082c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	f000 80ca 	beq.w	800845e <_dtoa_r+0x8be>
 80082ca:	9a07      	ldr	r2, [sp, #28]
 80082cc:	2a01      	cmp	r2, #1
 80082ce:	f300 80ad 	bgt.w	800842c <_dtoa_r+0x88c>
 80082d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	f000 80a5 	beq.w	8008424 <_dtoa_r+0x884>
 80082da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082de:	9e08      	ldr	r6, [sp, #32]
 80082e0:	9d05      	ldr	r5, [sp, #20]
 80082e2:	9a05      	ldr	r2, [sp, #20]
 80082e4:	441a      	add	r2, r3
 80082e6:	9205      	str	r2, [sp, #20]
 80082e8:	9a06      	ldr	r2, [sp, #24]
 80082ea:	2101      	movs	r1, #1
 80082ec:	441a      	add	r2, r3
 80082ee:	4620      	mov	r0, r4
 80082f0:	9206      	str	r2, [sp, #24]
 80082f2:	f000 fc3d 	bl	8008b70 <__i2b>
 80082f6:	4607      	mov	r7, r0
 80082f8:	b165      	cbz	r5, 8008314 <_dtoa_r+0x774>
 80082fa:	9b06      	ldr	r3, [sp, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	dd09      	ble.n	8008314 <_dtoa_r+0x774>
 8008300:	42ab      	cmp	r3, r5
 8008302:	9a05      	ldr	r2, [sp, #20]
 8008304:	bfa8      	it	ge
 8008306:	462b      	movge	r3, r5
 8008308:	1ad2      	subs	r2, r2, r3
 800830a:	9205      	str	r2, [sp, #20]
 800830c:	9a06      	ldr	r2, [sp, #24]
 800830e:	1aed      	subs	r5, r5, r3
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	9306      	str	r3, [sp, #24]
 8008314:	9b08      	ldr	r3, [sp, #32]
 8008316:	b1f3      	cbz	r3, 8008356 <_dtoa_r+0x7b6>
 8008318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80a3 	beq.w	8008466 <_dtoa_r+0x8c6>
 8008320:	2e00      	cmp	r6, #0
 8008322:	dd10      	ble.n	8008346 <_dtoa_r+0x7a6>
 8008324:	4639      	mov	r1, r7
 8008326:	4632      	mov	r2, r6
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fce1 	bl	8008cf0 <__pow5mult>
 800832e:	4652      	mov	r2, sl
 8008330:	4601      	mov	r1, r0
 8008332:	4607      	mov	r7, r0
 8008334:	4620      	mov	r0, r4
 8008336:	f000 fc31 	bl	8008b9c <__multiply>
 800833a:	4651      	mov	r1, sl
 800833c:	4680      	mov	r8, r0
 800833e:	4620      	mov	r0, r4
 8008340:	f000 fb60 	bl	8008a04 <_Bfree>
 8008344:	46c2      	mov	sl, r8
 8008346:	9b08      	ldr	r3, [sp, #32]
 8008348:	1b9a      	subs	r2, r3, r6
 800834a:	d004      	beq.n	8008356 <_dtoa_r+0x7b6>
 800834c:	4651      	mov	r1, sl
 800834e:	4620      	mov	r0, r4
 8008350:	f000 fcce 	bl	8008cf0 <__pow5mult>
 8008354:	4682      	mov	sl, r0
 8008356:	2101      	movs	r1, #1
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fc09 	bl	8008b70 <__i2b>
 800835e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008360:	2b00      	cmp	r3, #0
 8008362:	4606      	mov	r6, r0
 8008364:	f340 8081 	ble.w	800846a <_dtoa_r+0x8ca>
 8008368:	461a      	mov	r2, r3
 800836a:	4601      	mov	r1, r0
 800836c:	4620      	mov	r0, r4
 800836e:	f000 fcbf 	bl	8008cf0 <__pow5mult>
 8008372:	9b07      	ldr	r3, [sp, #28]
 8008374:	2b01      	cmp	r3, #1
 8008376:	4606      	mov	r6, r0
 8008378:	dd7a      	ble.n	8008470 <_dtoa_r+0x8d0>
 800837a:	f04f 0800 	mov.w	r8, #0
 800837e:	6933      	ldr	r3, [r6, #16]
 8008380:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008384:	6918      	ldr	r0, [r3, #16]
 8008386:	f000 fba5 	bl	8008ad4 <__hi0bits>
 800838a:	f1c0 0020 	rsb	r0, r0, #32
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	4418      	add	r0, r3
 8008392:	f010 001f 	ands.w	r0, r0, #31
 8008396:	f000 8094 	beq.w	80084c2 <_dtoa_r+0x922>
 800839a:	f1c0 0320 	rsb	r3, r0, #32
 800839e:	2b04      	cmp	r3, #4
 80083a0:	f340 8085 	ble.w	80084ae <_dtoa_r+0x90e>
 80083a4:	9b05      	ldr	r3, [sp, #20]
 80083a6:	f1c0 001c 	rsb	r0, r0, #28
 80083aa:	4403      	add	r3, r0
 80083ac:	9305      	str	r3, [sp, #20]
 80083ae:	9b06      	ldr	r3, [sp, #24]
 80083b0:	4403      	add	r3, r0
 80083b2:	4405      	add	r5, r0
 80083b4:	9306      	str	r3, [sp, #24]
 80083b6:	9b05      	ldr	r3, [sp, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	dd05      	ble.n	80083c8 <_dtoa_r+0x828>
 80083bc:	4651      	mov	r1, sl
 80083be:	461a      	mov	r2, r3
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fcef 	bl	8008da4 <__lshift>
 80083c6:	4682      	mov	sl, r0
 80083c8:	9b06      	ldr	r3, [sp, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dd05      	ble.n	80083da <_dtoa_r+0x83a>
 80083ce:	4631      	mov	r1, r6
 80083d0:	461a      	mov	r2, r3
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fce6 	bl	8008da4 <__lshift>
 80083d8:	4606      	mov	r6, r0
 80083da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d072      	beq.n	80084c6 <_dtoa_r+0x926>
 80083e0:	4631      	mov	r1, r6
 80083e2:	4650      	mov	r0, sl
 80083e4:	f000 fd4a 	bl	8008e7c <__mcmp>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	da6c      	bge.n	80084c6 <_dtoa_r+0x926>
 80083ec:	2300      	movs	r3, #0
 80083ee:	4651      	mov	r1, sl
 80083f0:	220a      	movs	r2, #10
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 fb28 	bl	8008a48 <__multadd>
 80083f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083fe:	4682      	mov	sl, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 81b0 	beq.w	8008766 <_dtoa_r+0xbc6>
 8008406:	2300      	movs	r3, #0
 8008408:	4639      	mov	r1, r7
 800840a:	220a      	movs	r2, #10
 800840c:	4620      	mov	r0, r4
 800840e:	f000 fb1b 	bl	8008a48 <__multadd>
 8008412:	9b01      	ldr	r3, [sp, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	4607      	mov	r7, r0
 8008418:	f300 8096 	bgt.w	8008548 <_dtoa_r+0x9a8>
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	2b02      	cmp	r3, #2
 8008420:	dc59      	bgt.n	80084d6 <_dtoa_r+0x936>
 8008422:	e091      	b.n	8008548 <_dtoa_r+0x9a8>
 8008424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800842a:	e758      	b.n	80082de <_dtoa_r+0x73e>
 800842c:	9b04      	ldr	r3, [sp, #16]
 800842e:	1e5e      	subs	r6, r3, #1
 8008430:	9b08      	ldr	r3, [sp, #32]
 8008432:	42b3      	cmp	r3, r6
 8008434:	bfbf      	itttt	lt
 8008436:	9b08      	ldrlt	r3, [sp, #32]
 8008438:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800843a:	9608      	strlt	r6, [sp, #32]
 800843c:	1af3      	sublt	r3, r6, r3
 800843e:	bfb4      	ite	lt
 8008440:	18d2      	addlt	r2, r2, r3
 8008442:	1b9e      	subge	r6, r3, r6
 8008444:	9b04      	ldr	r3, [sp, #16]
 8008446:	bfbc      	itt	lt
 8008448:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800844a:	2600      	movlt	r6, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfb7      	itett	lt
 8008450:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008454:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008458:	1a9d      	sublt	r5, r3, r2
 800845a:	2300      	movlt	r3, #0
 800845c:	e741      	b.n	80082e2 <_dtoa_r+0x742>
 800845e:	9e08      	ldr	r6, [sp, #32]
 8008460:	9d05      	ldr	r5, [sp, #20]
 8008462:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008464:	e748      	b.n	80082f8 <_dtoa_r+0x758>
 8008466:	9a08      	ldr	r2, [sp, #32]
 8008468:	e770      	b.n	800834c <_dtoa_r+0x7ac>
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	2b01      	cmp	r3, #1
 800846e:	dc19      	bgt.n	80084a4 <_dtoa_r+0x904>
 8008470:	9b02      	ldr	r3, [sp, #8]
 8008472:	b9bb      	cbnz	r3, 80084a4 <_dtoa_r+0x904>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800847a:	b99b      	cbnz	r3, 80084a4 <_dtoa_r+0x904>
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008482:	0d1b      	lsrs	r3, r3, #20
 8008484:	051b      	lsls	r3, r3, #20
 8008486:	b183      	cbz	r3, 80084aa <_dtoa_r+0x90a>
 8008488:	9b05      	ldr	r3, [sp, #20]
 800848a:	3301      	adds	r3, #1
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	9b06      	ldr	r3, [sp, #24]
 8008490:	3301      	adds	r3, #1
 8008492:	9306      	str	r3, [sp, #24]
 8008494:	f04f 0801 	mov.w	r8, #1
 8008498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800849a:	2b00      	cmp	r3, #0
 800849c:	f47f af6f 	bne.w	800837e <_dtoa_r+0x7de>
 80084a0:	2001      	movs	r0, #1
 80084a2:	e774      	b.n	800838e <_dtoa_r+0x7ee>
 80084a4:	f04f 0800 	mov.w	r8, #0
 80084a8:	e7f6      	b.n	8008498 <_dtoa_r+0x8f8>
 80084aa:	4698      	mov	r8, r3
 80084ac:	e7f4      	b.n	8008498 <_dtoa_r+0x8f8>
 80084ae:	d082      	beq.n	80083b6 <_dtoa_r+0x816>
 80084b0:	9a05      	ldr	r2, [sp, #20]
 80084b2:	331c      	adds	r3, #28
 80084b4:	441a      	add	r2, r3
 80084b6:	9205      	str	r2, [sp, #20]
 80084b8:	9a06      	ldr	r2, [sp, #24]
 80084ba:	441a      	add	r2, r3
 80084bc:	441d      	add	r5, r3
 80084be:	9206      	str	r2, [sp, #24]
 80084c0:	e779      	b.n	80083b6 <_dtoa_r+0x816>
 80084c2:	4603      	mov	r3, r0
 80084c4:	e7f4      	b.n	80084b0 <_dtoa_r+0x910>
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc37      	bgt.n	800853c <_dtoa_r+0x99c>
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	dd34      	ble.n	800853c <_dtoa_r+0x99c>
 80084d2:	9b04      	ldr	r3, [sp, #16]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	b963      	cbnz	r3, 80084f4 <_dtoa_r+0x954>
 80084da:	4631      	mov	r1, r6
 80084dc:	2205      	movs	r2, #5
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 fab2 	bl	8008a48 <__multadd>
 80084e4:	4601      	mov	r1, r0
 80084e6:	4606      	mov	r6, r0
 80084e8:	4650      	mov	r0, sl
 80084ea:	f000 fcc7 	bl	8008e7c <__mcmp>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f73f adbb 	bgt.w	800806a <_dtoa_r+0x4ca>
 80084f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f6:	9d00      	ldr	r5, [sp, #0]
 80084f8:	ea6f 0b03 	mvn.w	fp, r3
 80084fc:	f04f 0800 	mov.w	r8, #0
 8008500:	4631      	mov	r1, r6
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fa7e 	bl	8008a04 <_Bfree>
 8008508:	2f00      	cmp	r7, #0
 800850a:	f43f aeab 	beq.w	8008264 <_dtoa_r+0x6c4>
 800850e:	f1b8 0f00 	cmp.w	r8, #0
 8008512:	d005      	beq.n	8008520 <_dtoa_r+0x980>
 8008514:	45b8      	cmp	r8, r7
 8008516:	d003      	beq.n	8008520 <_dtoa_r+0x980>
 8008518:	4641      	mov	r1, r8
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fa72 	bl	8008a04 <_Bfree>
 8008520:	4639      	mov	r1, r7
 8008522:	4620      	mov	r0, r4
 8008524:	f000 fa6e 	bl	8008a04 <_Bfree>
 8008528:	e69c      	b.n	8008264 <_dtoa_r+0x6c4>
 800852a:	2600      	movs	r6, #0
 800852c:	4637      	mov	r7, r6
 800852e:	e7e1      	b.n	80084f4 <_dtoa_r+0x954>
 8008530:	46bb      	mov	fp, r7
 8008532:	4637      	mov	r7, r6
 8008534:	e599      	b.n	800806a <_dtoa_r+0x4ca>
 8008536:	bf00      	nop
 8008538:	40240000 	.word	0x40240000
 800853c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80c8 	beq.w	80086d4 <_dtoa_r+0xb34>
 8008544:	9b04      	ldr	r3, [sp, #16]
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	2d00      	cmp	r5, #0
 800854a:	dd05      	ble.n	8008558 <_dtoa_r+0x9b8>
 800854c:	4639      	mov	r1, r7
 800854e:	462a      	mov	r2, r5
 8008550:	4620      	mov	r0, r4
 8008552:	f000 fc27 	bl	8008da4 <__lshift>
 8008556:	4607      	mov	r7, r0
 8008558:	f1b8 0f00 	cmp.w	r8, #0
 800855c:	d05b      	beq.n	8008616 <_dtoa_r+0xa76>
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fa0f 	bl	8008984 <_Balloc>
 8008566:	4605      	mov	r5, r0
 8008568:	b928      	cbnz	r0, 8008576 <_dtoa_r+0x9d6>
 800856a:	4b83      	ldr	r3, [pc, #524]	; (8008778 <_dtoa_r+0xbd8>)
 800856c:	4602      	mov	r2, r0
 800856e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008572:	f7ff bb2e 	b.w	8007bd2 <_dtoa_r+0x32>
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	3202      	adds	r2, #2
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	f107 010c 	add.w	r1, r7, #12
 8008580:	300c      	adds	r0, #12
 8008582:	f001 f813 	bl	80095ac <memcpy>
 8008586:	2201      	movs	r2, #1
 8008588:	4629      	mov	r1, r5
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fc0a 	bl	8008da4 <__lshift>
 8008590:	9b00      	ldr	r3, [sp, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800859a:	4413      	add	r3, r2
 800859c:	9308      	str	r3, [sp, #32]
 800859e:	9b02      	ldr	r3, [sp, #8]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	46b8      	mov	r8, r7
 80085a6:	9306      	str	r3, [sp, #24]
 80085a8:	4607      	mov	r7, r0
 80085aa:	9b04      	ldr	r3, [sp, #16]
 80085ac:	4631      	mov	r1, r6
 80085ae:	3b01      	subs	r3, #1
 80085b0:	4650      	mov	r0, sl
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	f7ff fa6b 	bl	8007a8e <quorem>
 80085b8:	4641      	mov	r1, r8
 80085ba:	9002      	str	r0, [sp, #8]
 80085bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085c0:	4650      	mov	r0, sl
 80085c2:	f000 fc5b 	bl	8008e7c <__mcmp>
 80085c6:	463a      	mov	r2, r7
 80085c8:	9005      	str	r0, [sp, #20]
 80085ca:	4631      	mov	r1, r6
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fc71 	bl	8008eb4 <__mdiff>
 80085d2:	68c2      	ldr	r2, [r0, #12]
 80085d4:	4605      	mov	r5, r0
 80085d6:	bb02      	cbnz	r2, 800861a <_dtoa_r+0xa7a>
 80085d8:	4601      	mov	r1, r0
 80085da:	4650      	mov	r0, sl
 80085dc:	f000 fc4e 	bl	8008e7c <__mcmp>
 80085e0:	4602      	mov	r2, r0
 80085e2:	4629      	mov	r1, r5
 80085e4:	4620      	mov	r0, r4
 80085e6:	9209      	str	r2, [sp, #36]	; 0x24
 80085e8:	f000 fa0c 	bl	8008a04 <_Bfree>
 80085ec:	9b07      	ldr	r3, [sp, #28]
 80085ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f0:	9d04      	ldr	r5, [sp, #16]
 80085f2:	ea43 0102 	orr.w	r1, r3, r2
 80085f6:	9b06      	ldr	r3, [sp, #24]
 80085f8:	4319      	orrs	r1, r3
 80085fa:	d110      	bne.n	800861e <_dtoa_r+0xa7e>
 80085fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008600:	d029      	beq.n	8008656 <_dtoa_r+0xab6>
 8008602:	9b05      	ldr	r3, [sp, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	dd02      	ble.n	800860e <_dtoa_r+0xa6e>
 8008608:	9b02      	ldr	r3, [sp, #8]
 800860a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800860e:	9b01      	ldr	r3, [sp, #4]
 8008610:	f883 9000 	strb.w	r9, [r3]
 8008614:	e774      	b.n	8008500 <_dtoa_r+0x960>
 8008616:	4638      	mov	r0, r7
 8008618:	e7ba      	b.n	8008590 <_dtoa_r+0x9f0>
 800861a:	2201      	movs	r2, #1
 800861c:	e7e1      	b.n	80085e2 <_dtoa_r+0xa42>
 800861e:	9b05      	ldr	r3, [sp, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	db04      	blt.n	800862e <_dtoa_r+0xa8e>
 8008624:	9907      	ldr	r1, [sp, #28]
 8008626:	430b      	orrs	r3, r1
 8008628:	9906      	ldr	r1, [sp, #24]
 800862a:	430b      	orrs	r3, r1
 800862c:	d120      	bne.n	8008670 <_dtoa_r+0xad0>
 800862e:	2a00      	cmp	r2, #0
 8008630:	dded      	ble.n	800860e <_dtoa_r+0xa6e>
 8008632:	4651      	mov	r1, sl
 8008634:	2201      	movs	r2, #1
 8008636:	4620      	mov	r0, r4
 8008638:	f000 fbb4 	bl	8008da4 <__lshift>
 800863c:	4631      	mov	r1, r6
 800863e:	4682      	mov	sl, r0
 8008640:	f000 fc1c 	bl	8008e7c <__mcmp>
 8008644:	2800      	cmp	r0, #0
 8008646:	dc03      	bgt.n	8008650 <_dtoa_r+0xab0>
 8008648:	d1e1      	bne.n	800860e <_dtoa_r+0xa6e>
 800864a:	f019 0f01 	tst.w	r9, #1
 800864e:	d0de      	beq.n	800860e <_dtoa_r+0xa6e>
 8008650:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008654:	d1d8      	bne.n	8008608 <_dtoa_r+0xa68>
 8008656:	9a01      	ldr	r2, [sp, #4]
 8008658:	2339      	movs	r3, #57	; 0x39
 800865a:	7013      	strb	r3, [r2, #0]
 800865c:	462b      	mov	r3, r5
 800865e:	461d      	mov	r5, r3
 8008660:	3b01      	subs	r3, #1
 8008662:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008666:	2a39      	cmp	r2, #57	; 0x39
 8008668:	d06c      	beq.n	8008744 <_dtoa_r+0xba4>
 800866a:	3201      	adds	r2, #1
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e747      	b.n	8008500 <_dtoa_r+0x960>
 8008670:	2a00      	cmp	r2, #0
 8008672:	dd07      	ble.n	8008684 <_dtoa_r+0xae4>
 8008674:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008678:	d0ed      	beq.n	8008656 <_dtoa_r+0xab6>
 800867a:	9a01      	ldr	r2, [sp, #4]
 800867c:	f109 0301 	add.w	r3, r9, #1
 8008680:	7013      	strb	r3, [r2, #0]
 8008682:	e73d      	b.n	8008500 <_dtoa_r+0x960>
 8008684:	9b04      	ldr	r3, [sp, #16]
 8008686:	9a08      	ldr	r2, [sp, #32]
 8008688:	f803 9c01 	strb.w	r9, [r3, #-1]
 800868c:	4293      	cmp	r3, r2
 800868e:	d043      	beq.n	8008718 <_dtoa_r+0xb78>
 8008690:	4651      	mov	r1, sl
 8008692:	2300      	movs	r3, #0
 8008694:	220a      	movs	r2, #10
 8008696:	4620      	mov	r0, r4
 8008698:	f000 f9d6 	bl	8008a48 <__multadd>
 800869c:	45b8      	cmp	r8, r7
 800869e:	4682      	mov	sl, r0
 80086a0:	f04f 0300 	mov.w	r3, #0
 80086a4:	f04f 020a 	mov.w	r2, #10
 80086a8:	4641      	mov	r1, r8
 80086aa:	4620      	mov	r0, r4
 80086ac:	d107      	bne.n	80086be <_dtoa_r+0xb1e>
 80086ae:	f000 f9cb 	bl	8008a48 <__multadd>
 80086b2:	4680      	mov	r8, r0
 80086b4:	4607      	mov	r7, r0
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	3301      	adds	r3, #1
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	e775      	b.n	80085aa <_dtoa_r+0xa0a>
 80086be:	f000 f9c3 	bl	8008a48 <__multadd>
 80086c2:	4639      	mov	r1, r7
 80086c4:	4680      	mov	r8, r0
 80086c6:	2300      	movs	r3, #0
 80086c8:	220a      	movs	r2, #10
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 f9bc 	bl	8008a48 <__multadd>
 80086d0:	4607      	mov	r7, r0
 80086d2:	e7f0      	b.n	80086b6 <_dtoa_r+0xb16>
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	9d00      	ldr	r5, [sp, #0]
 80086da:	4631      	mov	r1, r6
 80086dc:	4650      	mov	r0, sl
 80086de:	f7ff f9d6 	bl	8007a8e <quorem>
 80086e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	f805 9b01 	strb.w	r9, [r5], #1
 80086ec:	1aea      	subs	r2, r5, r3
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	dd07      	ble.n	8008704 <_dtoa_r+0xb64>
 80086f4:	4651      	mov	r1, sl
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f9a4 	bl	8008a48 <__multadd>
 8008700:	4682      	mov	sl, r0
 8008702:	e7ea      	b.n	80086da <_dtoa_r+0xb3a>
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	bfc8      	it	gt
 800870a:	461d      	movgt	r5, r3
 800870c:	9b00      	ldr	r3, [sp, #0]
 800870e:	bfd8      	it	le
 8008710:	2501      	movle	r5, #1
 8008712:	441d      	add	r5, r3
 8008714:	f04f 0800 	mov.w	r8, #0
 8008718:	4651      	mov	r1, sl
 800871a:	2201      	movs	r2, #1
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fb41 	bl	8008da4 <__lshift>
 8008722:	4631      	mov	r1, r6
 8008724:	4682      	mov	sl, r0
 8008726:	f000 fba9 	bl	8008e7c <__mcmp>
 800872a:	2800      	cmp	r0, #0
 800872c:	dc96      	bgt.n	800865c <_dtoa_r+0xabc>
 800872e:	d102      	bne.n	8008736 <_dtoa_r+0xb96>
 8008730:	f019 0f01 	tst.w	r9, #1
 8008734:	d192      	bne.n	800865c <_dtoa_r+0xabc>
 8008736:	462b      	mov	r3, r5
 8008738:	461d      	mov	r5, r3
 800873a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800873e:	2a30      	cmp	r2, #48	; 0x30
 8008740:	d0fa      	beq.n	8008738 <_dtoa_r+0xb98>
 8008742:	e6dd      	b.n	8008500 <_dtoa_r+0x960>
 8008744:	9a00      	ldr	r2, [sp, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d189      	bne.n	800865e <_dtoa_r+0xabe>
 800874a:	f10b 0b01 	add.w	fp, fp, #1
 800874e:	2331      	movs	r3, #49	; 0x31
 8008750:	e796      	b.n	8008680 <_dtoa_r+0xae0>
 8008752:	4b0a      	ldr	r3, [pc, #40]	; (800877c <_dtoa_r+0xbdc>)
 8008754:	f7ff ba99 	b.w	8007c8a <_dtoa_r+0xea>
 8008758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800875a:	2b00      	cmp	r3, #0
 800875c:	f47f aa6d 	bne.w	8007c3a <_dtoa_r+0x9a>
 8008760:	4b07      	ldr	r3, [pc, #28]	; (8008780 <_dtoa_r+0xbe0>)
 8008762:	f7ff ba92 	b.w	8007c8a <_dtoa_r+0xea>
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	dcb5      	bgt.n	80086d8 <_dtoa_r+0xb38>
 800876c:	9b07      	ldr	r3, [sp, #28]
 800876e:	2b02      	cmp	r3, #2
 8008770:	f73f aeb1 	bgt.w	80084d6 <_dtoa_r+0x936>
 8008774:	e7b0      	b.n	80086d8 <_dtoa_r+0xb38>
 8008776:	bf00      	nop
 8008778:	0800a034 	.word	0x0800a034
 800877c:	08009f94 	.word	0x08009f94
 8008780:	08009fb8 	.word	0x08009fb8

08008784 <_free_r>:
 8008784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008786:	2900      	cmp	r1, #0
 8008788:	d044      	beq.n	8008814 <_free_r+0x90>
 800878a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878e:	9001      	str	r0, [sp, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f1a1 0404 	sub.w	r4, r1, #4
 8008796:	bfb8      	it	lt
 8008798:	18e4      	addlt	r4, r4, r3
 800879a:	f000 f8e7 	bl	800896c <__malloc_lock>
 800879e:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <_free_r+0x94>)
 80087a0:	9801      	ldr	r0, [sp, #4]
 80087a2:	6813      	ldr	r3, [r2, #0]
 80087a4:	b933      	cbnz	r3, 80087b4 <_free_r+0x30>
 80087a6:	6063      	str	r3, [r4, #4]
 80087a8:	6014      	str	r4, [r2, #0]
 80087aa:	b003      	add	sp, #12
 80087ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087b0:	f000 b8e2 	b.w	8008978 <__malloc_unlock>
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	d908      	bls.n	80087ca <_free_r+0x46>
 80087b8:	6825      	ldr	r5, [r4, #0]
 80087ba:	1961      	adds	r1, r4, r5
 80087bc:	428b      	cmp	r3, r1
 80087be:	bf01      	itttt	eq
 80087c0:	6819      	ldreq	r1, [r3, #0]
 80087c2:	685b      	ldreq	r3, [r3, #4]
 80087c4:	1949      	addeq	r1, r1, r5
 80087c6:	6021      	streq	r1, [r4, #0]
 80087c8:	e7ed      	b.n	80087a6 <_free_r+0x22>
 80087ca:	461a      	mov	r2, r3
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	b10b      	cbz	r3, 80087d4 <_free_r+0x50>
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	d9fa      	bls.n	80087ca <_free_r+0x46>
 80087d4:	6811      	ldr	r1, [r2, #0]
 80087d6:	1855      	adds	r5, r2, r1
 80087d8:	42a5      	cmp	r5, r4
 80087da:	d10b      	bne.n	80087f4 <_free_r+0x70>
 80087dc:	6824      	ldr	r4, [r4, #0]
 80087de:	4421      	add	r1, r4
 80087e0:	1854      	adds	r4, r2, r1
 80087e2:	42a3      	cmp	r3, r4
 80087e4:	6011      	str	r1, [r2, #0]
 80087e6:	d1e0      	bne.n	80087aa <_free_r+0x26>
 80087e8:	681c      	ldr	r4, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	6053      	str	r3, [r2, #4]
 80087ee:	440c      	add	r4, r1
 80087f0:	6014      	str	r4, [r2, #0]
 80087f2:	e7da      	b.n	80087aa <_free_r+0x26>
 80087f4:	d902      	bls.n	80087fc <_free_r+0x78>
 80087f6:	230c      	movs	r3, #12
 80087f8:	6003      	str	r3, [r0, #0]
 80087fa:	e7d6      	b.n	80087aa <_free_r+0x26>
 80087fc:	6825      	ldr	r5, [r4, #0]
 80087fe:	1961      	adds	r1, r4, r5
 8008800:	428b      	cmp	r3, r1
 8008802:	bf04      	itt	eq
 8008804:	6819      	ldreq	r1, [r3, #0]
 8008806:	685b      	ldreq	r3, [r3, #4]
 8008808:	6063      	str	r3, [r4, #4]
 800880a:	bf04      	itt	eq
 800880c:	1949      	addeq	r1, r1, r5
 800880e:	6021      	streq	r1, [r4, #0]
 8008810:	6054      	str	r4, [r2, #4]
 8008812:	e7ca      	b.n	80087aa <_free_r+0x26>
 8008814:	b003      	add	sp, #12
 8008816:	bd30      	pop	{r4, r5, pc}
 8008818:	20000510 	.word	0x20000510

0800881c <malloc>:
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <malloc+0xc>)
 800881e:	4601      	mov	r1, r0
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	f000 b823 	b.w	800886c <_malloc_r>
 8008826:	bf00      	nop
 8008828:	2000013c 	.word	0x2000013c

0800882c <sbrk_aligned>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	4e0e      	ldr	r6, [pc, #56]	; (8008868 <sbrk_aligned+0x3c>)
 8008830:	460c      	mov	r4, r1
 8008832:	6831      	ldr	r1, [r6, #0]
 8008834:	4605      	mov	r5, r0
 8008836:	b911      	cbnz	r1, 800883e <sbrk_aligned+0x12>
 8008838:	f000 fea8 	bl	800958c <_sbrk_r>
 800883c:	6030      	str	r0, [r6, #0]
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f000 fea3 	bl	800958c <_sbrk_r>
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	d00a      	beq.n	8008860 <sbrk_aligned+0x34>
 800884a:	1cc4      	adds	r4, r0, #3
 800884c:	f024 0403 	bic.w	r4, r4, #3
 8008850:	42a0      	cmp	r0, r4
 8008852:	d007      	beq.n	8008864 <sbrk_aligned+0x38>
 8008854:	1a21      	subs	r1, r4, r0
 8008856:	4628      	mov	r0, r5
 8008858:	f000 fe98 	bl	800958c <_sbrk_r>
 800885c:	3001      	adds	r0, #1
 800885e:	d101      	bne.n	8008864 <sbrk_aligned+0x38>
 8008860:	f04f 34ff 	mov.w	r4, #4294967295
 8008864:	4620      	mov	r0, r4
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	20000514 	.word	0x20000514

0800886c <_malloc_r>:
 800886c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008870:	1ccd      	adds	r5, r1, #3
 8008872:	f025 0503 	bic.w	r5, r5, #3
 8008876:	3508      	adds	r5, #8
 8008878:	2d0c      	cmp	r5, #12
 800887a:	bf38      	it	cc
 800887c:	250c      	movcc	r5, #12
 800887e:	2d00      	cmp	r5, #0
 8008880:	4607      	mov	r7, r0
 8008882:	db01      	blt.n	8008888 <_malloc_r+0x1c>
 8008884:	42a9      	cmp	r1, r5
 8008886:	d905      	bls.n	8008894 <_malloc_r+0x28>
 8008888:	230c      	movs	r3, #12
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	2600      	movs	r6, #0
 800888e:	4630      	mov	r0, r6
 8008890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008894:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008968 <_malloc_r+0xfc>
 8008898:	f000 f868 	bl	800896c <__malloc_lock>
 800889c:	f8d8 3000 	ldr.w	r3, [r8]
 80088a0:	461c      	mov	r4, r3
 80088a2:	bb5c      	cbnz	r4, 80088fc <_malloc_r+0x90>
 80088a4:	4629      	mov	r1, r5
 80088a6:	4638      	mov	r0, r7
 80088a8:	f7ff ffc0 	bl	800882c <sbrk_aligned>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	4604      	mov	r4, r0
 80088b0:	d155      	bne.n	800895e <_malloc_r+0xf2>
 80088b2:	f8d8 4000 	ldr.w	r4, [r8]
 80088b6:	4626      	mov	r6, r4
 80088b8:	2e00      	cmp	r6, #0
 80088ba:	d145      	bne.n	8008948 <_malloc_r+0xdc>
 80088bc:	2c00      	cmp	r4, #0
 80088be:	d048      	beq.n	8008952 <_malloc_r+0xe6>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	4631      	mov	r1, r6
 80088c4:	4638      	mov	r0, r7
 80088c6:	eb04 0903 	add.w	r9, r4, r3
 80088ca:	f000 fe5f 	bl	800958c <_sbrk_r>
 80088ce:	4581      	cmp	r9, r0
 80088d0:	d13f      	bne.n	8008952 <_malloc_r+0xe6>
 80088d2:	6821      	ldr	r1, [r4, #0]
 80088d4:	1a6d      	subs	r5, r5, r1
 80088d6:	4629      	mov	r1, r5
 80088d8:	4638      	mov	r0, r7
 80088da:	f7ff ffa7 	bl	800882c <sbrk_aligned>
 80088de:	3001      	adds	r0, #1
 80088e0:	d037      	beq.n	8008952 <_malloc_r+0xe6>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	442b      	add	r3, r5
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	f8d8 3000 	ldr.w	r3, [r8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d038      	beq.n	8008962 <_malloc_r+0xf6>
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	42a2      	cmp	r2, r4
 80088f4:	d12b      	bne.n	800894e <_malloc_r+0xe2>
 80088f6:	2200      	movs	r2, #0
 80088f8:	605a      	str	r2, [r3, #4]
 80088fa:	e00f      	b.n	800891c <_malloc_r+0xb0>
 80088fc:	6822      	ldr	r2, [r4, #0]
 80088fe:	1b52      	subs	r2, r2, r5
 8008900:	d41f      	bmi.n	8008942 <_malloc_r+0xd6>
 8008902:	2a0b      	cmp	r2, #11
 8008904:	d917      	bls.n	8008936 <_malloc_r+0xca>
 8008906:	1961      	adds	r1, r4, r5
 8008908:	42a3      	cmp	r3, r4
 800890a:	6025      	str	r5, [r4, #0]
 800890c:	bf18      	it	ne
 800890e:	6059      	strne	r1, [r3, #4]
 8008910:	6863      	ldr	r3, [r4, #4]
 8008912:	bf08      	it	eq
 8008914:	f8c8 1000 	streq.w	r1, [r8]
 8008918:	5162      	str	r2, [r4, r5]
 800891a:	604b      	str	r3, [r1, #4]
 800891c:	4638      	mov	r0, r7
 800891e:	f104 060b 	add.w	r6, r4, #11
 8008922:	f000 f829 	bl	8008978 <__malloc_unlock>
 8008926:	f026 0607 	bic.w	r6, r6, #7
 800892a:	1d23      	adds	r3, r4, #4
 800892c:	1af2      	subs	r2, r6, r3
 800892e:	d0ae      	beq.n	800888e <_malloc_r+0x22>
 8008930:	1b9b      	subs	r3, r3, r6
 8008932:	50a3      	str	r3, [r4, r2]
 8008934:	e7ab      	b.n	800888e <_malloc_r+0x22>
 8008936:	42a3      	cmp	r3, r4
 8008938:	6862      	ldr	r2, [r4, #4]
 800893a:	d1dd      	bne.n	80088f8 <_malloc_r+0x8c>
 800893c:	f8c8 2000 	str.w	r2, [r8]
 8008940:	e7ec      	b.n	800891c <_malloc_r+0xb0>
 8008942:	4623      	mov	r3, r4
 8008944:	6864      	ldr	r4, [r4, #4]
 8008946:	e7ac      	b.n	80088a2 <_malloc_r+0x36>
 8008948:	4634      	mov	r4, r6
 800894a:	6876      	ldr	r6, [r6, #4]
 800894c:	e7b4      	b.n	80088b8 <_malloc_r+0x4c>
 800894e:	4613      	mov	r3, r2
 8008950:	e7cc      	b.n	80088ec <_malloc_r+0x80>
 8008952:	230c      	movs	r3, #12
 8008954:	603b      	str	r3, [r7, #0]
 8008956:	4638      	mov	r0, r7
 8008958:	f000 f80e 	bl	8008978 <__malloc_unlock>
 800895c:	e797      	b.n	800888e <_malloc_r+0x22>
 800895e:	6025      	str	r5, [r4, #0]
 8008960:	e7dc      	b.n	800891c <_malloc_r+0xb0>
 8008962:	605b      	str	r3, [r3, #4]
 8008964:	deff      	udf	#255	; 0xff
 8008966:	bf00      	nop
 8008968:	20000510 	.word	0x20000510

0800896c <__malloc_lock>:
 800896c:	4801      	ldr	r0, [pc, #4]	; (8008974 <__malloc_lock+0x8>)
 800896e:	f7ff b88c 	b.w	8007a8a <__retarget_lock_acquire_recursive>
 8008972:	bf00      	nop
 8008974:	2000050c 	.word	0x2000050c

08008978 <__malloc_unlock>:
 8008978:	4801      	ldr	r0, [pc, #4]	; (8008980 <__malloc_unlock+0x8>)
 800897a:	f7ff b887 	b.w	8007a8c <__retarget_lock_release_recursive>
 800897e:	bf00      	nop
 8008980:	2000050c 	.word	0x2000050c

08008984 <_Balloc>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	69c6      	ldr	r6, [r0, #28]
 8008988:	4604      	mov	r4, r0
 800898a:	460d      	mov	r5, r1
 800898c:	b976      	cbnz	r6, 80089ac <_Balloc+0x28>
 800898e:	2010      	movs	r0, #16
 8008990:	f7ff ff44 	bl	800881c <malloc>
 8008994:	4602      	mov	r2, r0
 8008996:	61e0      	str	r0, [r4, #28]
 8008998:	b920      	cbnz	r0, 80089a4 <_Balloc+0x20>
 800899a:	4b18      	ldr	r3, [pc, #96]	; (80089fc <_Balloc+0x78>)
 800899c:	4818      	ldr	r0, [pc, #96]	; (8008a00 <_Balloc+0x7c>)
 800899e:	216b      	movs	r1, #107	; 0x6b
 80089a0:	f000 fe12 	bl	80095c8 <__assert_func>
 80089a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089a8:	6006      	str	r6, [r0, #0]
 80089aa:	60c6      	str	r6, [r0, #12]
 80089ac:	69e6      	ldr	r6, [r4, #28]
 80089ae:	68f3      	ldr	r3, [r6, #12]
 80089b0:	b183      	cbz	r3, 80089d4 <_Balloc+0x50>
 80089b2:	69e3      	ldr	r3, [r4, #28]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089ba:	b9b8      	cbnz	r0, 80089ec <_Balloc+0x68>
 80089bc:	2101      	movs	r1, #1
 80089be:	fa01 f605 	lsl.w	r6, r1, r5
 80089c2:	1d72      	adds	r2, r6, #5
 80089c4:	0092      	lsls	r2, r2, #2
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 fe1c 	bl	8009604 <_calloc_r>
 80089cc:	b160      	cbz	r0, 80089e8 <_Balloc+0x64>
 80089ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089d2:	e00e      	b.n	80089f2 <_Balloc+0x6e>
 80089d4:	2221      	movs	r2, #33	; 0x21
 80089d6:	2104      	movs	r1, #4
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fe13 	bl	8009604 <_calloc_r>
 80089de:	69e3      	ldr	r3, [r4, #28]
 80089e0:	60f0      	str	r0, [r6, #12]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e4      	bne.n	80089b2 <_Balloc+0x2e>
 80089e8:	2000      	movs	r0, #0
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	6802      	ldr	r2, [r0, #0]
 80089ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089f2:	2300      	movs	r3, #0
 80089f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089f8:	e7f7      	b.n	80089ea <_Balloc+0x66>
 80089fa:	bf00      	nop
 80089fc:	08009fc5 	.word	0x08009fc5
 8008a00:	0800a045 	.word	0x0800a045

08008a04 <_Bfree>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	69c6      	ldr	r6, [r0, #28]
 8008a08:	4605      	mov	r5, r0
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	b976      	cbnz	r6, 8008a2c <_Bfree+0x28>
 8008a0e:	2010      	movs	r0, #16
 8008a10:	f7ff ff04 	bl	800881c <malloc>
 8008a14:	4602      	mov	r2, r0
 8008a16:	61e8      	str	r0, [r5, #28]
 8008a18:	b920      	cbnz	r0, 8008a24 <_Bfree+0x20>
 8008a1a:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <_Bfree+0x3c>)
 8008a1c:	4809      	ldr	r0, [pc, #36]	; (8008a44 <_Bfree+0x40>)
 8008a1e:	218f      	movs	r1, #143	; 0x8f
 8008a20:	f000 fdd2 	bl	80095c8 <__assert_func>
 8008a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a28:	6006      	str	r6, [r0, #0]
 8008a2a:	60c6      	str	r6, [r0, #12]
 8008a2c:	b13c      	cbz	r4, 8008a3e <_Bfree+0x3a>
 8008a2e:	69eb      	ldr	r3, [r5, #28]
 8008a30:	6862      	ldr	r2, [r4, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a38:	6021      	str	r1, [r4, #0]
 8008a3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	08009fc5 	.word	0x08009fc5
 8008a44:	0800a045 	.word	0x0800a045

08008a48 <__multadd>:
 8008a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4c:	690d      	ldr	r5, [r1, #16]
 8008a4e:	4607      	mov	r7, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	461e      	mov	r6, r3
 8008a54:	f101 0c14 	add.w	ip, r1, #20
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8008a5e:	b299      	uxth	r1, r3
 8008a60:	fb02 6101 	mla	r1, r2, r1, r6
 8008a64:	0c1e      	lsrs	r6, r3, #16
 8008a66:	0c0b      	lsrs	r3, r1, #16
 8008a68:	fb02 3306 	mla	r3, r2, r6, r3
 8008a6c:	b289      	uxth	r1, r1
 8008a6e:	3001      	adds	r0, #1
 8008a70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a74:	4285      	cmp	r5, r0
 8008a76:	f84c 1b04 	str.w	r1, [ip], #4
 8008a7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a7e:	dcec      	bgt.n	8008a5a <__multadd+0x12>
 8008a80:	b30e      	cbz	r6, 8008ac6 <__multadd+0x7e>
 8008a82:	68a3      	ldr	r3, [r4, #8]
 8008a84:	42ab      	cmp	r3, r5
 8008a86:	dc19      	bgt.n	8008abc <__multadd+0x74>
 8008a88:	6861      	ldr	r1, [r4, #4]
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	f7ff ff79 	bl	8008984 <_Balloc>
 8008a92:	4680      	mov	r8, r0
 8008a94:	b928      	cbnz	r0, 8008aa2 <__multadd+0x5a>
 8008a96:	4602      	mov	r2, r0
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <__multadd+0x84>)
 8008a9a:	480d      	ldr	r0, [pc, #52]	; (8008ad0 <__multadd+0x88>)
 8008a9c:	21ba      	movs	r1, #186	; 0xba
 8008a9e:	f000 fd93 	bl	80095c8 <__assert_func>
 8008aa2:	6922      	ldr	r2, [r4, #16]
 8008aa4:	3202      	adds	r2, #2
 8008aa6:	f104 010c 	add.w	r1, r4, #12
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	300c      	adds	r0, #12
 8008aae:	f000 fd7d 	bl	80095ac <memcpy>
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f7ff ffa5 	bl	8008a04 <_Bfree>
 8008aba:	4644      	mov	r4, r8
 8008abc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ac0:	3501      	adds	r5, #1
 8008ac2:	615e      	str	r6, [r3, #20]
 8008ac4:	6125      	str	r5, [r4, #16]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	0800a034 	.word	0x0800a034
 8008ad0:	0800a045 	.word	0x0800a045

08008ad4 <__hi0bits>:
 8008ad4:	0c03      	lsrs	r3, r0, #16
 8008ad6:	041b      	lsls	r3, r3, #16
 8008ad8:	b9d3      	cbnz	r3, 8008b10 <__hi0bits+0x3c>
 8008ada:	0400      	lsls	r0, r0, #16
 8008adc:	2310      	movs	r3, #16
 8008ade:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ae2:	bf04      	itt	eq
 8008ae4:	0200      	lsleq	r0, r0, #8
 8008ae6:	3308      	addeq	r3, #8
 8008ae8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008aec:	bf04      	itt	eq
 8008aee:	0100      	lsleq	r0, r0, #4
 8008af0:	3304      	addeq	r3, #4
 8008af2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008af6:	bf04      	itt	eq
 8008af8:	0080      	lsleq	r0, r0, #2
 8008afa:	3302      	addeq	r3, #2
 8008afc:	2800      	cmp	r0, #0
 8008afe:	db05      	blt.n	8008b0c <__hi0bits+0x38>
 8008b00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b04:	f103 0301 	add.w	r3, r3, #1
 8008b08:	bf08      	it	eq
 8008b0a:	2320      	moveq	r3, #32
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	4770      	bx	lr
 8008b10:	2300      	movs	r3, #0
 8008b12:	e7e4      	b.n	8008ade <__hi0bits+0xa>

08008b14 <__lo0bits>:
 8008b14:	6803      	ldr	r3, [r0, #0]
 8008b16:	f013 0207 	ands.w	r2, r3, #7
 8008b1a:	d00c      	beq.n	8008b36 <__lo0bits+0x22>
 8008b1c:	07d9      	lsls	r1, r3, #31
 8008b1e:	d422      	bmi.n	8008b66 <__lo0bits+0x52>
 8008b20:	079a      	lsls	r2, r3, #30
 8008b22:	bf49      	itett	mi
 8008b24:	085b      	lsrmi	r3, r3, #1
 8008b26:	089b      	lsrpl	r3, r3, #2
 8008b28:	6003      	strmi	r3, [r0, #0]
 8008b2a:	2201      	movmi	r2, #1
 8008b2c:	bf5c      	itt	pl
 8008b2e:	6003      	strpl	r3, [r0, #0]
 8008b30:	2202      	movpl	r2, #2
 8008b32:	4610      	mov	r0, r2
 8008b34:	4770      	bx	lr
 8008b36:	b299      	uxth	r1, r3
 8008b38:	b909      	cbnz	r1, 8008b3e <__lo0bits+0x2a>
 8008b3a:	0c1b      	lsrs	r3, r3, #16
 8008b3c:	2210      	movs	r2, #16
 8008b3e:	b2d9      	uxtb	r1, r3
 8008b40:	b909      	cbnz	r1, 8008b46 <__lo0bits+0x32>
 8008b42:	3208      	adds	r2, #8
 8008b44:	0a1b      	lsrs	r3, r3, #8
 8008b46:	0719      	lsls	r1, r3, #28
 8008b48:	bf04      	itt	eq
 8008b4a:	091b      	lsreq	r3, r3, #4
 8008b4c:	3204      	addeq	r2, #4
 8008b4e:	0799      	lsls	r1, r3, #30
 8008b50:	bf04      	itt	eq
 8008b52:	089b      	lsreq	r3, r3, #2
 8008b54:	3202      	addeq	r2, #2
 8008b56:	07d9      	lsls	r1, r3, #31
 8008b58:	d403      	bmi.n	8008b62 <__lo0bits+0x4e>
 8008b5a:	085b      	lsrs	r3, r3, #1
 8008b5c:	f102 0201 	add.w	r2, r2, #1
 8008b60:	d003      	beq.n	8008b6a <__lo0bits+0x56>
 8008b62:	6003      	str	r3, [r0, #0]
 8008b64:	e7e5      	b.n	8008b32 <__lo0bits+0x1e>
 8008b66:	2200      	movs	r2, #0
 8008b68:	e7e3      	b.n	8008b32 <__lo0bits+0x1e>
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	e7e1      	b.n	8008b32 <__lo0bits+0x1e>
	...

08008b70 <__i2b>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	460c      	mov	r4, r1
 8008b74:	2101      	movs	r1, #1
 8008b76:	f7ff ff05 	bl	8008984 <_Balloc>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	b928      	cbnz	r0, 8008b8a <__i2b+0x1a>
 8008b7e:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <__i2b+0x24>)
 8008b80:	4805      	ldr	r0, [pc, #20]	; (8008b98 <__i2b+0x28>)
 8008b82:	f240 1145 	movw	r1, #325	; 0x145
 8008b86:	f000 fd1f 	bl	80095c8 <__assert_func>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	6144      	str	r4, [r0, #20]
 8008b8e:	6103      	str	r3, [r0, #16]
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	bf00      	nop
 8008b94:	0800a034 	.word	0x0800a034
 8008b98:	0800a045 	.word	0x0800a045

08008b9c <__multiply>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	4691      	mov	r9, r2
 8008ba2:	690a      	ldr	r2, [r1, #16]
 8008ba4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	bfb8      	it	lt
 8008bac:	460b      	movlt	r3, r1
 8008bae:	460c      	mov	r4, r1
 8008bb0:	bfbc      	itt	lt
 8008bb2:	464c      	movlt	r4, r9
 8008bb4:	4699      	movlt	r9, r3
 8008bb6:	6927      	ldr	r7, [r4, #16]
 8008bb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bbc:	68a3      	ldr	r3, [r4, #8]
 8008bbe:	6861      	ldr	r1, [r4, #4]
 8008bc0:	eb07 060a 	add.w	r6, r7, sl
 8008bc4:	42b3      	cmp	r3, r6
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	bfb8      	it	lt
 8008bca:	3101      	addlt	r1, #1
 8008bcc:	f7ff feda 	bl	8008984 <_Balloc>
 8008bd0:	b930      	cbnz	r0, 8008be0 <__multiply+0x44>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	4b44      	ldr	r3, [pc, #272]	; (8008ce8 <__multiply+0x14c>)
 8008bd6:	4845      	ldr	r0, [pc, #276]	; (8008cec <__multiply+0x150>)
 8008bd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008bdc:	f000 fcf4 	bl	80095c8 <__assert_func>
 8008be0:	f100 0514 	add.w	r5, r0, #20
 8008be4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008be8:	462b      	mov	r3, r5
 8008bea:	2200      	movs	r2, #0
 8008bec:	4543      	cmp	r3, r8
 8008bee:	d321      	bcc.n	8008c34 <__multiply+0x98>
 8008bf0:	f104 0314 	add.w	r3, r4, #20
 8008bf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008bf8:	f109 0314 	add.w	r3, r9, #20
 8008bfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c00:	9202      	str	r2, [sp, #8]
 8008c02:	1b3a      	subs	r2, r7, r4
 8008c04:	3a15      	subs	r2, #21
 8008c06:	f022 0203 	bic.w	r2, r2, #3
 8008c0a:	3204      	adds	r2, #4
 8008c0c:	f104 0115 	add.w	r1, r4, #21
 8008c10:	428f      	cmp	r7, r1
 8008c12:	bf38      	it	cc
 8008c14:	2204      	movcc	r2, #4
 8008c16:	9201      	str	r2, [sp, #4]
 8008c18:	9a02      	ldr	r2, [sp, #8]
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d80c      	bhi.n	8008c3a <__multiply+0x9e>
 8008c20:	2e00      	cmp	r6, #0
 8008c22:	dd03      	ble.n	8008c2c <__multiply+0x90>
 8008c24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d05b      	beq.n	8008ce4 <__multiply+0x148>
 8008c2c:	6106      	str	r6, [r0, #16]
 8008c2e:	b005      	add	sp, #20
 8008c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	f843 2b04 	str.w	r2, [r3], #4
 8008c38:	e7d8      	b.n	8008bec <__multiply+0x50>
 8008c3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c3e:	f1ba 0f00 	cmp.w	sl, #0
 8008c42:	d024      	beq.n	8008c8e <__multiply+0xf2>
 8008c44:	f104 0e14 	add.w	lr, r4, #20
 8008c48:	46a9      	mov	r9, r5
 8008c4a:	f04f 0c00 	mov.w	ip, #0
 8008c4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c52:	f8d9 1000 	ldr.w	r1, [r9]
 8008c56:	fa1f fb82 	uxth.w	fp, r2
 8008c5a:	b289      	uxth	r1, r1
 8008c5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c64:	f8d9 2000 	ldr.w	r2, [r9]
 8008c68:	4461      	add	r1, ip
 8008c6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c76:	b289      	uxth	r1, r1
 8008c78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c7c:	4577      	cmp	r7, lr
 8008c7e:	f849 1b04 	str.w	r1, [r9], #4
 8008c82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c86:	d8e2      	bhi.n	8008c4e <__multiply+0xb2>
 8008c88:	9a01      	ldr	r2, [sp, #4]
 8008c8a:	f845 c002 	str.w	ip, [r5, r2]
 8008c8e:	9a03      	ldr	r2, [sp, #12]
 8008c90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c94:	3304      	adds	r3, #4
 8008c96:	f1b9 0f00 	cmp.w	r9, #0
 8008c9a:	d021      	beq.n	8008ce0 <__multiply+0x144>
 8008c9c:	6829      	ldr	r1, [r5, #0]
 8008c9e:	f104 0c14 	add.w	ip, r4, #20
 8008ca2:	46ae      	mov	lr, r5
 8008ca4:	f04f 0a00 	mov.w	sl, #0
 8008ca8:	f8bc b000 	ldrh.w	fp, [ip]
 8008cac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cb0:	fb09 220b 	mla	r2, r9, fp, r2
 8008cb4:	4452      	add	r2, sl
 8008cb6:	b289      	uxth	r1, r1
 8008cb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008cbc:	f84e 1b04 	str.w	r1, [lr], #4
 8008cc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cc8:	f8be 1000 	ldrh.w	r1, [lr]
 8008ccc:	fb09 110a 	mla	r1, r9, sl, r1
 8008cd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008cd4:	4567      	cmp	r7, ip
 8008cd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cda:	d8e5      	bhi.n	8008ca8 <__multiply+0x10c>
 8008cdc:	9a01      	ldr	r2, [sp, #4]
 8008cde:	50a9      	str	r1, [r5, r2]
 8008ce0:	3504      	adds	r5, #4
 8008ce2:	e799      	b.n	8008c18 <__multiply+0x7c>
 8008ce4:	3e01      	subs	r6, #1
 8008ce6:	e79b      	b.n	8008c20 <__multiply+0x84>
 8008ce8:	0800a034 	.word	0x0800a034
 8008cec:	0800a045 	.word	0x0800a045

08008cf0 <__pow5mult>:
 8008cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf4:	4615      	mov	r5, r2
 8008cf6:	f012 0203 	ands.w	r2, r2, #3
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	d007      	beq.n	8008d10 <__pow5mult+0x20>
 8008d00:	4c25      	ldr	r4, [pc, #148]	; (8008d98 <__pow5mult+0xa8>)
 8008d02:	3a01      	subs	r2, #1
 8008d04:	2300      	movs	r3, #0
 8008d06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d0a:	f7ff fe9d 	bl	8008a48 <__multadd>
 8008d0e:	4607      	mov	r7, r0
 8008d10:	10ad      	asrs	r5, r5, #2
 8008d12:	d03d      	beq.n	8008d90 <__pow5mult+0xa0>
 8008d14:	69f4      	ldr	r4, [r6, #28]
 8008d16:	b97c      	cbnz	r4, 8008d38 <__pow5mult+0x48>
 8008d18:	2010      	movs	r0, #16
 8008d1a:	f7ff fd7f 	bl	800881c <malloc>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	61f0      	str	r0, [r6, #28]
 8008d22:	b928      	cbnz	r0, 8008d30 <__pow5mult+0x40>
 8008d24:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <__pow5mult+0xac>)
 8008d26:	481e      	ldr	r0, [pc, #120]	; (8008da0 <__pow5mult+0xb0>)
 8008d28:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d2c:	f000 fc4c 	bl	80095c8 <__assert_func>
 8008d30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d34:	6004      	str	r4, [r0, #0]
 8008d36:	60c4      	str	r4, [r0, #12]
 8008d38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d40:	b94c      	cbnz	r4, 8008d56 <__pow5mult+0x66>
 8008d42:	f240 2171 	movw	r1, #625	; 0x271
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7ff ff12 	bl	8008b70 <__i2b>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d52:	4604      	mov	r4, r0
 8008d54:	6003      	str	r3, [r0, #0]
 8008d56:	f04f 0900 	mov.w	r9, #0
 8008d5a:	07eb      	lsls	r3, r5, #31
 8008d5c:	d50a      	bpl.n	8008d74 <__pow5mult+0x84>
 8008d5e:	4639      	mov	r1, r7
 8008d60:	4622      	mov	r2, r4
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff ff1a 	bl	8008b9c <__multiply>
 8008d68:	4639      	mov	r1, r7
 8008d6a:	4680      	mov	r8, r0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7ff fe49 	bl	8008a04 <_Bfree>
 8008d72:	4647      	mov	r7, r8
 8008d74:	106d      	asrs	r5, r5, #1
 8008d76:	d00b      	beq.n	8008d90 <__pow5mult+0xa0>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	b938      	cbnz	r0, 8008d8c <__pow5mult+0x9c>
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7ff ff0b 	bl	8008b9c <__multiply>
 8008d86:	6020      	str	r0, [r4, #0]
 8008d88:	f8c0 9000 	str.w	r9, [r0]
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	e7e4      	b.n	8008d5a <__pow5mult+0x6a>
 8008d90:	4638      	mov	r0, r7
 8008d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d96:	bf00      	nop
 8008d98:	0800a190 	.word	0x0800a190
 8008d9c:	08009fc5 	.word	0x08009fc5
 8008da0:	0800a045 	.word	0x0800a045

08008da4 <__lshift>:
 8008da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da8:	460c      	mov	r4, r1
 8008daa:	6849      	ldr	r1, [r1, #4]
 8008dac:	6923      	ldr	r3, [r4, #16]
 8008dae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008db2:	68a3      	ldr	r3, [r4, #8]
 8008db4:	4607      	mov	r7, r0
 8008db6:	4691      	mov	r9, r2
 8008db8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dbc:	f108 0601 	add.w	r6, r8, #1
 8008dc0:	42b3      	cmp	r3, r6
 8008dc2:	db0b      	blt.n	8008ddc <__lshift+0x38>
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7ff fddd 	bl	8008984 <_Balloc>
 8008dca:	4605      	mov	r5, r0
 8008dcc:	b948      	cbnz	r0, 8008de2 <__lshift+0x3e>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	4b28      	ldr	r3, [pc, #160]	; (8008e74 <__lshift+0xd0>)
 8008dd2:	4829      	ldr	r0, [pc, #164]	; (8008e78 <__lshift+0xd4>)
 8008dd4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008dd8:	f000 fbf6 	bl	80095c8 <__assert_func>
 8008ddc:	3101      	adds	r1, #1
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	e7ee      	b.n	8008dc0 <__lshift+0x1c>
 8008de2:	2300      	movs	r3, #0
 8008de4:	f100 0114 	add.w	r1, r0, #20
 8008de8:	f100 0210 	add.w	r2, r0, #16
 8008dec:	4618      	mov	r0, r3
 8008dee:	4553      	cmp	r3, sl
 8008df0:	db33      	blt.n	8008e5a <__lshift+0xb6>
 8008df2:	6920      	ldr	r0, [r4, #16]
 8008df4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008df8:	f104 0314 	add.w	r3, r4, #20
 8008dfc:	f019 091f 	ands.w	r9, r9, #31
 8008e00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e08:	d02b      	beq.n	8008e62 <__lshift+0xbe>
 8008e0a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e0e:	468a      	mov	sl, r1
 8008e10:	2200      	movs	r2, #0
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	fa00 f009 	lsl.w	r0, r0, r9
 8008e18:	4310      	orrs	r0, r2
 8008e1a:	f84a 0b04 	str.w	r0, [sl], #4
 8008e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e22:	459c      	cmp	ip, r3
 8008e24:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e28:	d8f3      	bhi.n	8008e12 <__lshift+0x6e>
 8008e2a:	ebac 0304 	sub.w	r3, ip, r4
 8008e2e:	3b15      	subs	r3, #21
 8008e30:	f023 0303 	bic.w	r3, r3, #3
 8008e34:	3304      	adds	r3, #4
 8008e36:	f104 0015 	add.w	r0, r4, #21
 8008e3a:	4584      	cmp	ip, r0
 8008e3c:	bf38      	it	cc
 8008e3e:	2304      	movcc	r3, #4
 8008e40:	50ca      	str	r2, [r1, r3]
 8008e42:	b10a      	cbz	r2, 8008e48 <__lshift+0xa4>
 8008e44:	f108 0602 	add.w	r6, r8, #2
 8008e48:	3e01      	subs	r6, #1
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	612e      	str	r6, [r5, #16]
 8008e4e:	4621      	mov	r1, r4
 8008e50:	f7ff fdd8 	bl	8008a04 <_Bfree>
 8008e54:	4628      	mov	r0, r5
 8008e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e5e:	3301      	adds	r3, #1
 8008e60:	e7c5      	b.n	8008dee <__lshift+0x4a>
 8008e62:	3904      	subs	r1, #4
 8008e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e68:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e6c:	459c      	cmp	ip, r3
 8008e6e:	d8f9      	bhi.n	8008e64 <__lshift+0xc0>
 8008e70:	e7ea      	b.n	8008e48 <__lshift+0xa4>
 8008e72:	bf00      	nop
 8008e74:	0800a034 	.word	0x0800a034
 8008e78:	0800a045 	.word	0x0800a045

08008e7c <__mcmp>:
 8008e7c:	b530      	push	{r4, r5, lr}
 8008e7e:	6902      	ldr	r2, [r0, #16]
 8008e80:	690c      	ldr	r4, [r1, #16]
 8008e82:	1b12      	subs	r2, r2, r4
 8008e84:	d10e      	bne.n	8008ea4 <__mcmp+0x28>
 8008e86:	f100 0314 	add.w	r3, r0, #20
 8008e8a:	3114      	adds	r1, #20
 8008e8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e9c:	42a5      	cmp	r5, r4
 8008e9e:	d003      	beq.n	8008ea8 <__mcmp+0x2c>
 8008ea0:	d305      	bcc.n	8008eae <__mcmp+0x32>
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	bd30      	pop	{r4, r5, pc}
 8008ea8:	4283      	cmp	r3, r0
 8008eaa:	d3f3      	bcc.n	8008e94 <__mcmp+0x18>
 8008eac:	e7fa      	b.n	8008ea4 <__mcmp+0x28>
 8008eae:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb2:	e7f7      	b.n	8008ea4 <__mcmp+0x28>

08008eb4 <__mdiff>:
 8008eb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	460c      	mov	r4, r1
 8008eba:	4606      	mov	r6, r0
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	4690      	mov	r8, r2
 8008ec2:	f7ff ffdb 	bl	8008e7c <__mcmp>
 8008ec6:	1e05      	subs	r5, r0, #0
 8008ec8:	d110      	bne.n	8008eec <__mdiff+0x38>
 8008eca:	4629      	mov	r1, r5
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff fd59 	bl	8008984 <_Balloc>
 8008ed2:	b930      	cbnz	r0, 8008ee2 <__mdiff+0x2e>
 8008ed4:	4b3a      	ldr	r3, [pc, #232]	; (8008fc0 <__mdiff+0x10c>)
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	f240 2137 	movw	r1, #567	; 0x237
 8008edc:	4839      	ldr	r0, [pc, #228]	; (8008fc4 <__mdiff+0x110>)
 8008ede:	f000 fb73 	bl	80095c8 <__assert_func>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	bfa4      	itt	ge
 8008eee:	4643      	movge	r3, r8
 8008ef0:	46a0      	movge	r8, r4
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ef8:	bfa6      	itte	ge
 8008efa:	461c      	movge	r4, r3
 8008efc:	2500      	movge	r5, #0
 8008efe:	2501      	movlt	r5, #1
 8008f00:	f7ff fd40 	bl	8008984 <_Balloc>
 8008f04:	b920      	cbnz	r0, 8008f10 <__mdiff+0x5c>
 8008f06:	4b2e      	ldr	r3, [pc, #184]	; (8008fc0 <__mdiff+0x10c>)
 8008f08:	4602      	mov	r2, r0
 8008f0a:	f240 2145 	movw	r1, #581	; 0x245
 8008f0e:	e7e5      	b.n	8008edc <__mdiff+0x28>
 8008f10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f14:	6926      	ldr	r6, [r4, #16]
 8008f16:	60c5      	str	r5, [r0, #12]
 8008f18:	f104 0914 	add.w	r9, r4, #20
 8008f1c:	f108 0514 	add.w	r5, r8, #20
 8008f20:	f100 0e14 	add.w	lr, r0, #20
 8008f24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f2c:	f108 0210 	add.w	r2, r8, #16
 8008f30:	46f2      	mov	sl, lr
 8008f32:	2100      	movs	r1, #0
 8008f34:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f3c:	fa11 f88b 	uxtah	r8, r1, fp
 8008f40:	b299      	uxth	r1, r3
 8008f42:	0c1b      	lsrs	r3, r3, #16
 8008f44:	eba8 0801 	sub.w	r8, r8, r1
 8008f48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f50:	fa1f f888 	uxth.w	r8, r8
 8008f54:	1419      	asrs	r1, r3, #16
 8008f56:	454e      	cmp	r6, r9
 8008f58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f5c:	f84a 3b04 	str.w	r3, [sl], #4
 8008f60:	d8e8      	bhi.n	8008f34 <__mdiff+0x80>
 8008f62:	1b33      	subs	r3, r6, r4
 8008f64:	3b15      	subs	r3, #21
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	3415      	adds	r4, #21
 8008f6e:	42a6      	cmp	r6, r4
 8008f70:	bf38      	it	cc
 8008f72:	2304      	movcc	r3, #4
 8008f74:	441d      	add	r5, r3
 8008f76:	4473      	add	r3, lr
 8008f78:	469e      	mov	lr, r3
 8008f7a:	462e      	mov	r6, r5
 8008f7c:	4566      	cmp	r6, ip
 8008f7e:	d30e      	bcc.n	8008f9e <__mdiff+0xea>
 8008f80:	f10c 0203 	add.w	r2, ip, #3
 8008f84:	1b52      	subs	r2, r2, r5
 8008f86:	f022 0203 	bic.w	r2, r2, #3
 8008f8a:	3d03      	subs	r5, #3
 8008f8c:	45ac      	cmp	ip, r5
 8008f8e:	bf38      	it	cc
 8008f90:	2200      	movcc	r2, #0
 8008f92:	4413      	add	r3, r2
 8008f94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008f98:	b17a      	cbz	r2, 8008fba <__mdiff+0x106>
 8008f9a:	6107      	str	r7, [r0, #16]
 8008f9c:	e7a4      	b.n	8008ee8 <__mdiff+0x34>
 8008f9e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008fa2:	fa11 f288 	uxtah	r2, r1, r8
 8008fa6:	1414      	asrs	r4, r2, #16
 8008fa8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fac:	b292      	uxth	r2, r2
 8008fae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fb2:	f84e 2b04 	str.w	r2, [lr], #4
 8008fb6:	1421      	asrs	r1, r4, #16
 8008fb8:	e7e0      	b.n	8008f7c <__mdiff+0xc8>
 8008fba:	3f01      	subs	r7, #1
 8008fbc:	e7ea      	b.n	8008f94 <__mdiff+0xe0>
 8008fbe:	bf00      	nop
 8008fc0:	0800a034 	.word	0x0800a034
 8008fc4:	0800a045 	.word	0x0800a045

08008fc8 <__d2b>:
 8008fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	460f      	mov	r7, r1
 8008fce:	2101      	movs	r1, #1
 8008fd0:	ec59 8b10 	vmov	r8, r9, d0
 8008fd4:	4616      	mov	r6, r2
 8008fd6:	f7ff fcd5 	bl	8008984 <_Balloc>
 8008fda:	4604      	mov	r4, r0
 8008fdc:	b930      	cbnz	r0, 8008fec <__d2b+0x24>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	4b24      	ldr	r3, [pc, #144]	; (8009074 <__d2b+0xac>)
 8008fe2:	4825      	ldr	r0, [pc, #148]	; (8009078 <__d2b+0xb0>)
 8008fe4:	f240 310f 	movw	r1, #783	; 0x30f
 8008fe8:	f000 faee 	bl	80095c8 <__assert_func>
 8008fec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ff4:	bb2d      	cbnz	r5, 8009042 <__d2b+0x7a>
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	f1b8 0300 	subs.w	r3, r8, #0
 8008ffc:	d026      	beq.n	800904c <__d2b+0x84>
 8008ffe:	4668      	mov	r0, sp
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	f7ff fd87 	bl	8008b14 <__lo0bits>
 8009006:	e9dd 1200 	ldrd	r1, r2, [sp]
 800900a:	b1e8      	cbz	r0, 8009048 <__d2b+0x80>
 800900c:	f1c0 0320 	rsb	r3, r0, #32
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	430b      	orrs	r3, r1
 8009016:	40c2      	lsrs	r2, r0
 8009018:	6163      	str	r3, [r4, #20]
 800901a:	9201      	str	r2, [sp, #4]
 800901c:	9b01      	ldr	r3, [sp, #4]
 800901e:	61a3      	str	r3, [r4, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	bf14      	ite	ne
 8009024:	2202      	movne	r2, #2
 8009026:	2201      	moveq	r2, #1
 8009028:	6122      	str	r2, [r4, #16]
 800902a:	b1bd      	cbz	r5, 800905c <__d2b+0x94>
 800902c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009030:	4405      	add	r5, r0
 8009032:	603d      	str	r5, [r7, #0]
 8009034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009038:	6030      	str	r0, [r6, #0]
 800903a:	4620      	mov	r0, r4
 800903c:	b003      	add	sp, #12
 800903e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009046:	e7d6      	b.n	8008ff6 <__d2b+0x2e>
 8009048:	6161      	str	r1, [r4, #20]
 800904a:	e7e7      	b.n	800901c <__d2b+0x54>
 800904c:	a801      	add	r0, sp, #4
 800904e:	f7ff fd61 	bl	8008b14 <__lo0bits>
 8009052:	9b01      	ldr	r3, [sp, #4]
 8009054:	6163      	str	r3, [r4, #20]
 8009056:	3020      	adds	r0, #32
 8009058:	2201      	movs	r2, #1
 800905a:	e7e5      	b.n	8009028 <__d2b+0x60>
 800905c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009060:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009064:	6038      	str	r0, [r7, #0]
 8009066:	6918      	ldr	r0, [r3, #16]
 8009068:	f7ff fd34 	bl	8008ad4 <__hi0bits>
 800906c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009070:	e7e2      	b.n	8009038 <__d2b+0x70>
 8009072:	bf00      	nop
 8009074:	0800a034 	.word	0x0800a034
 8009078:	0800a045 	.word	0x0800a045

0800907c <__sfputc_r>:
 800907c:	6893      	ldr	r3, [r2, #8]
 800907e:	3b01      	subs	r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	b410      	push	{r4}
 8009084:	6093      	str	r3, [r2, #8]
 8009086:	da08      	bge.n	800909a <__sfputc_r+0x1e>
 8009088:	6994      	ldr	r4, [r2, #24]
 800908a:	42a3      	cmp	r3, r4
 800908c:	db01      	blt.n	8009092 <__sfputc_r+0x16>
 800908e:	290a      	cmp	r1, #10
 8009090:	d103      	bne.n	800909a <__sfputc_r+0x1e>
 8009092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009096:	f000 b9e3 	b.w	8009460 <__swbuf_r>
 800909a:	6813      	ldr	r3, [r2, #0]
 800909c:	1c58      	adds	r0, r3, #1
 800909e:	6010      	str	r0, [r2, #0]
 80090a0:	7019      	strb	r1, [r3, #0]
 80090a2:	4608      	mov	r0, r1
 80090a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <__sfputs_r>:
 80090aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	4614      	mov	r4, r2
 80090b2:	18d5      	adds	r5, r2, r3
 80090b4:	42ac      	cmp	r4, r5
 80090b6:	d101      	bne.n	80090bc <__sfputs_r+0x12>
 80090b8:	2000      	movs	r0, #0
 80090ba:	e007      	b.n	80090cc <__sfputs_r+0x22>
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	463a      	mov	r2, r7
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7ff ffda 	bl	800907c <__sfputc_r>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d1f3      	bne.n	80090b4 <__sfputs_r+0xa>
 80090cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090d0 <_vfiprintf_r>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	460d      	mov	r5, r1
 80090d6:	b09d      	sub	sp, #116	; 0x74
 80090d8:	4614      	mov	r4, r2
 80090da:	4698      	mov	r8, r3
 80090dc:	4606      	mov	r6, r0
 80090de:	b118      	cbz	r0, 80090e8 <_vfiprintf_r+0x18>
 80090e0:	6a03      	ldr	r3, [r0, #32]
 80090e2:	b90b      	cbnz	r3, 80090e8 <_vfiprintf_r+0x18>
 80090e4:	f7fe fbc8 	bl	8007878 <__sinit>
 80090e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ea:	07d9      	lsls	r1, r3, #31
 80090ec:	d405      	bmi.n	80090fa <_vfiprintf_r+0x2a>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	059a      	lsls	r2, r3, #22
 80090f2:	d402      	bmi.n	80090fa <_vfiprintf_r+0x2a>
 80090f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090f6:	f7fe fcc8 	bl	8007a8a <__retarget_lock_acquire_recursive>
 80090fa:	89ab      	ldrh	r3, [r5, #12]
 80090fc:	071b      	lsls	r3, r3, #28
 80090fe:	d501      	bpl.n	8009104 <_vfiprintf_r+0x34>
 8009100:	692b      	ldr	r3, [r5, #16]
 8009102:	b99b      	cbnz	r3, 800912c <_vfiprintf_r+0x5c>
 8009104:	4629      	mov	r1, r5
 8009106:	4630      	mov	r0, r6
 8009108:	f000 f9e8 	bl	80094dc <__swsetup_r>
 800910c:	b170      	cbz	r0, 800912c <_vfiprintf_r+0x5c>
 800910e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009110:	07dc      	lsls	r4, r3, #31
 8009112:	d504      	bpl.n	800911e <_vfiprintf_r+0x4e>
 8009114:	f04f 30ff 	mov.w	r0, #4294967295
 8009118:	b01d      	add	sp, #116	; 0x74
 800911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	0598      	lsls	r0, r3, #22
 8009122:	d4f7      	bmi.n	8009114 <_vfiprintf_r+0x44>
 8009124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009126:	f7fe fcb1 	bl	8007a8c <__retarget_lock_release_recursive>
 800912a:	e7f3      	b.n	8009114 <_vfiprintf_r+0x44>
 800912c:	2300      	movs	r3, #0
 800912e:	9309      	str	r3, [sp, #36]	; 0x24
 8009130:	2320      	movs	r3, #32
 8009132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009136:	f8cd 800c 	str.w	r8, [sp, #12]
 800913a:	2330      	movs	r3, #48	; 0x30
 800913c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80092f0 <_vfiprintf_r+0x220>
 8009140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009144:	f04f 0901 	mov.w	r9, #1
 8009148:	4623      	mov	r3, r4
 800914a:	469a      	mov	sl, r3
 800914c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009150:	b10a      	cbz	r2, 8009156 <_vfiprintf_r+0x86>
 8009152:	2a25      	cmp	r2, #37	; 0x25
 8009154:	d1f9      	bne.n	800914a <_vfiprintf_r+0x7a>
 8009156:	ebba 0b04 	subs.w	fp, sl, r4
 800915a:	d00b      	beq.n	8009174 <_vfiprintf_r+0xa4>
 800915c:	465b      	mov	r3, fp
 800915e:	4622      	mov	r2, r4
 8009160:	4629      	mov	r1, r5
 8009162:	4630      	mov	r0, r6
 8009164:	f7ff ffa1 	bl	80090aa <__sfputs_r>
 8009168:	3001      	adds	r0, #1
 800916a:	f000 80a9 	beq.w	80092c0 <_vfiprintf_r+0x1f0>
 800916e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009170:	445a      	add	r2, fp
 8009172:	9209      	str	r2, [sp, #36]	; 0x24
 8009174:	f89a 3000 	ldrb.w	r3, [sl]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 80a1 	beq.w	80092c0 <_vfiprintf_r+0x1f0>
 800917e:	2300      	movs	r3, #0
 8009180:	f04f 32ff 	mov.w	r2, #4294967295
 8009184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009188:	f10a 0a01 	add.w	sl, sl, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009194:	931a      	str	r3, [sp, #104]	; 0x68
 8009196:	4654      	mov	r4, sl
 8009198:	2205      	movs	r2, #5
 800919a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919e:	4854      	ldr	r0, [pc, #336]	; (80092f0 <_vfiprintf_r+0x220>)
 80091a0:	f7f7 f816 	bl	80001d0 <memchr>
 80091a4:	9a04      	ldr	r2, [sp, #16]
 80091a6:	b9d8      	cbnz	r0, 80091e0 <_vfiprintf_r+0x110>
 80091a8:	06d1      	lsls	r1, r2, #27
 80091aa:	bf44      	itt	mi
 80091ac:	2320      	movmi	r3, #32
 80091ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b2:	0713      	lsls	r3, r2, #28
 80091b4:	bf44      	itt	mi
 80091b6:	232b      	movmi	r3, #43	; 0x2b
 80091b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091bc:	f89a 3000 	ldrb.w	r3, [sl]
 80091c0:	2b2a      	cmp	r3, #42	; 0x2a
 80091c2:	d015      	beq.n	80091f0 <_vfiprintf_r+0x120>
 80091c4:	9a07      	ldr	r2, [sp, #28]
 80091c6:	4654      	mov	r4, sl
 80091c8:	2000      	movs	r0, #0
 80091ca:	f04f 0c0a 	mov.w	ip, #10
 80091ce:	4621      	mov	r1, r4
 80091d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d4:	3b30      	subs	r3, #48	; 0x30
 80091d6:	2b09      	cmp	r3, #9
 80091d8:	d94d      	bls.n	8009276 <_vfiprintf_r+0x1a6>
 80091da:	b1b0      	cbz	r0, 800920a <_vfiprintf_r+0x13a>
 80091dc:	9207      	str	r2, [sp, #28]
 80091de:	e014      	b.n	800920a <_vfiprintf_r+0x13a>
 80091e0:	eba0 0308 	sub.w	r3, r0, r8
 80091e4:	fa09 f303 	lsl.w	r3, r9, r3
 80091e8:	4313      	orrs	r3, r2
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	46a2      	mov	sl, r4
 80091ee:	e7d2      	b.n	8009196 <_vfiprintf_r+0xc6>
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	1d19      	adds	r1, r3, #4
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	9103      	str	r1, [sp, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bfbb      	ittet	lt
 80091fc:	425b      	neglt	r3, r3
 80091fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009202:	9307      	strge	r3, [sp, #28]
 8009204:	9307      	strlt	r3, [sp, #28]
 8009206:	bfb8      	it	lt
 8009208:	9204      	strlt	r2, [sp, #16]
 800920a:	7823      	ldrb	r3, [r4, #0]
 800920c:	2b2e      	cmp	r3, #46	; 0x2e
 800920e:	d10c      	bne.n	800922a <_vfiprintf_r+0x15a>
 8009210:	7863      	ldrb	r3, [r4, #1]
 8009212:	2b2a      	cmp	r3, #42	; 0x2a
 8009214:	d134      	bne.n	8009280 <_vfiprintf_r+0x1b0>
 8009216:	9b03      	ldr	r3, [sp, #12]
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	9203      	str	r2, [sp, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	bfb8      	it	lt
 8009222:	f04f 33ff 	movlt.w	r3, #4294967295
 8009226:	3402      	adds	r4, #2
 8009228:	9305      	str	r3, [sp, #20]
 800922a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009300 <_vfiprintf_r+0x230>
 800922e:	7821      	ldrb	r1, [r4, #0]
 8009230:	2203      	movs	r2, #3
 8009232:	4650      	mov	r0, sl
 8009234:	f7f6 ffcc 	bl	80001d0 <memchr>
 8009238:	b138      	cbz	r0, 800924a <_vfiprintf_r+0x17a>
 800923a:	9b04      	ldr	r3, [sp, #16]
 800923c:	eba0 000a 	sub.w	r0, r0, sl
 8009240:	2240      	movs	r2, #64	; 0x40
 8009242:	4082      	lsls	r2, r0
 8009244:	4313      	orrs	r3, r2
 8009246:	3401      	adds	r4, #1
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924e:	4829      	ldr	r0, [pc, #164]	; (80092f4 <_vfiprintf_r+0x224>)
 8009250:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009254:	2206      	movs	r2, #6
 8009256:	f7f6 ffbb 	bl	80001d0 <memchr>
 800925a:	2800      	cmp	r0, #0
 800925c:	d03f      	beq.n	80092de <_vfiprintf_r+0x20e>
 800925e:	4b26      	ldr	r3, [pc, #152]	; (80092f8 <_vfiprintf_r+0x228>)
 8009260:	bb1b      	cbnz	r3, 80092aa <_vfiprintf_r+0x1da>
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	3307      	adds	r3, #7
 8009266:	f023 0307 	bic.w	r3, r3, #7
 800926a:	3308      	adds	r3, #8
 800926c:	9303      	str	r3, [sp, #12]
 800926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009270:	443b      	add	r3, r7
 8009272:	9309      	str	r3, [sp, #36]	; 0x24
 8009274:	e768      	b.n	8009148 <_vfiprintf_r+0x78>
 8009276:	fb0c 3202 	mla	r2, ip, r2, r3
 800927a:	460c      	mov	r4, r1
 800927c:	2001      	movs	r0, #1
 800927e:	e7a6      	b.n	80091ce <_vfiprintf_r+0xfe>
 8009280:	2300      	movs	r3, #0
 8009282:	3401      	adds	r4, #1
 8009284:	9305      	str	r3, [sp, #20]
 8009286:	4619      	mov	r1, r3
 8009288:	f04f 0c0a 	mov.w	ip, #10
 800928c:	4620      	mov	r0, r4
 800928e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009292:	3a30      	subs	r2, #48	; 0x30
 8009294:	2a09      	cmp	r2, #9
 8009296:	d903      	bls.n	80092a0 <_vfiprintf_r+0x1d0>
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0c6      	beq.n	800922a <_vfiprintf_r+0x15a>
 800929c:	9105      	str	r1, [sp, #20]
 800929e:	e7c4      	b.n	800922a <_vfiprintf_r+0x15a>
 80092a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80092a4:	4604      	mov	r4, r0
 80092a6:	2301      	movs	r3, #1
 80092a8:	e7f0      	b.n	800928c <_vfiprintf_r+0x1bc>
 80092aa:	ab03      	add	r3, sp, #12
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	462a      	mov	r2, r5
 80092b0:	4b12      	ldr	r3, [pc, #72]	; (80092fc <_vfiprintf_r+0x22c>)
 80092b2:	a904      	add	r1, sp, #16
 80092b4:	4630      	mov	r0, r6
 80092b6:	f7fd fe8d 	bl	8006fd4 <_printf_float>
 80092ba:	4607      	mov	r7, r0
 80092bc:	1c78      	adds	r0, r7, #1
 80092be:	d1d6      	bne.n	800926e <_vfiprintf_r+0x19e>
 80092c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092c2:	07d9      	lsls	r1, r3, #31
 80092c4:	d405      	bmi.n	80092d2 <_vfiprintf_r+0x202>
 80092c6:	89ab      	ldrh	r3, [r5, #12]
 80092c8:	059a      	lsls	r2, r3, #22
 80092ca:	d402      	bmi.n	80092d2 <_vfiprintf_r+0x202>
 80092cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ce:	f7fe fbdd 	bl	8007a8c <__retarget_lock_release_recursive>
 80092d2:	89ab      	ldrh	r3, [r5, #12]
 80092d4:	065b      	lsls	r3, r3, #25
 80092d6:	f53f af1d 	bmi.w	8009114 <_vfiprintf_r+0x44>
 80092da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092dc:	e71c      	b.n	8009118 <_vfiprintf_r+0x48>
 80092de:	ab03      	add	r3, sp, #12
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	462a      	mov	r2, r5
 80092e4:	4b05      	ldr	r3, [pc, #20]	; (80092fc <_vfiprintf_r+0x22c>)
 80092e6:	a904      	add	r1, sp, #16
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7fe f917 	bl	800751c <_printf_i>
 80092ee:	e7e4      	b.n	80092ba <_vfiprintf_r+0x1ea>
 80092f0:	0800a19c 	.word	0x0800a19c
 80092f4:	0800a1a6 	.word	0x0800a1a6
 80092f8:	08006fd5 	.word	0x08006fd5
 80092fc:	080090ab 	.word	0x080090ab
 8009300:	0800a1a2 	.word	0x0800a1a2

08009304 <__sflush_r>:
 8009304:	898a      	ldrh	r2, [r1, #12]
 8009306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930a:	4605      	mov	r5, r0
 800930c:	0710      	lsls	r0, r2, #28
 800930e:	460c      	mov	r4, r1
 8009310:	d458      	bmi.n	80093c4 <__sflush_r+0xc0>
 8009312:	684b      	ldr	r3, [r1, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc05      	bgt.n	8009324 <__sflush_r+0x20>
 8009318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	dc02      	bgt.n	8009324 <__sflush_r+0x20>
 800931e:	2000      	movs	r0, #0
 8009320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009326:	2e00      	cmp	r6, #0
 8009328:	d0f9      	beq.n	800931e <__sflush_r+0x1a>
 800932a:	2300      	movs	r3, #0
 800932c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009330:	682f      	ldr	r7, [r5, #0]
 8009332:	6a21      	ldr	r1, [r4, #32]
 8009334:	602b      	str	r3, [r5, #0]
 8009336:	d032      	beq.n	800939e <__sflush_r+0x9a>
 8009338:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	075a      	lsls	r2, r3, #29
 800933e:	d505      	bpl.n	800934c <__sflush_r+0x48>
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	1ac0      	subs	r0, r0, r3
 8009344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009346:	b10b      	cbz	r3, 800934c <__sflush_r+0x48>
 8009348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800934a:	1ac0      	subs	r0, r0, r3
 800934c:	2300      	movs	r3, #0
 800934e:	4602      	mov	r2, r0
 8009350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009352:	6a21      	ldr	r1, [r4, #32]
 8009354:	4628      	mov	r0, r5
 8009356:	47b0      	blx	r6
 8009358:	1c43      	adds	r3, r0, #1
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	d106      	bne.n	800936c <__sflush_r+0x68>
 800935e:	6829      	ldr	r1, [r5, #0]
 8009360:	291d      	cmp	r1, #29
 8009362:	d82b      	bhi.n	80093bc <__sflush_r+0xb8>
 8009364:	4a29      	ldr	r2, [pc, #164]	; (800940c <__sflush_r+0x108>)
 8009366:	410a      	asrs	r2, r1
 8009368:	07d6      	lsls	r6, r2, #31
 800936a:	d427      	bmi.n	80093bc <__sflush_r+0xb8>
 800936c:	2200      	movs	r2, #0
 800936e:	6062      	str	r2, [r4, #4]
 8009370:	04d9      	lsls	r1, r3, #19
 8009372:	6922      	ldr	r2, [r4, #16]
 8009374:	6022      	str	r2, [r4, #0]
 8009376:	d504      	bpl.n	8009382 <__sflush_r+0x7e>
 8009378:	1c42      	adds	r2, r0, #1
 800937a:	d101      	bne.n	8009380 <__sflush_r+0x7c>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b903      	cbnz	r3, 8009382 <__sflush_r+0x7e>
 8009380:	6560      	str	r0, [r4, #84]	; 0x54
 8009382:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009384:	602f      	str	r7, [r5, #0]
 8009386:	2900      	cmp	r1, #0
 8009388:	d0c9      	beq.n	800931e <__sflush_r+0x1a>
 800938a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800938e:	4299      	cmp	r1, r3
 8009390:	d002      	beq.n	8009398 <__sflush_r+0x94>
 8009392:	4628      	mov	r0, r5
 8009394:	f7ff f9f6 	bl	8008784 <_free_r>
 8009398:	2000      	movs	r0, #0
 800939a:	6360      	str	r0, [r4, #52]	; 0x34
 800939c:	e7c0      	b.n	8009320 <__sflush_r+0x1c>
 800939e:	2301      	movs	r3, #1
 80093a0:	4628      	mov	r0, r5
 80093a2:	47b0      	blx	r6
 80093a4:	1c41      	adds	r1, r0, #1
 80093a6:	d1c8      	bne.n	800933a <__sflush_r+0x36>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0c5      	beq.n	800933a <__sflush_r+0x36>
 80093ae:	2b1d      	cmp	r3, #29
 80093b0:	d001      	beq.n	80093b6 <__sflush_r+0xb2>
 80093b2:	2b16      	cmp	r3, #22
 80093b4:	d101      	bne.n	80093ba <__sflush_r+0xb6>
 80093b6:	602f      	str	r7, [r5, #0]
 80093b8:	e7b1      	b.n	800931e <__sflush_r+0x1a>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	e7ad      	b.n	8009320 <__sflush_r+0x1c>
 80093c4:	690f      	ldr	r7, [r1, #16]
 80093c6:	2f00      	cmp	r7, #0
 80093c8:	d0a9      	beq.n	800931e <__sflush_r+0x1a>
 80093ca:	0793      	lsls	r3, r2, #30
 80093cc:	680e      	ldr	r6, [r1, #0]
 80093ce:	bf08      	it	eq
 80093d0:	694b      	ldreq	r3, [r1, #20]
 80093d2:	600f      	str	r7, [r1, #0]
 80093d4:	bf18      	it	ne
 80093d6:	2300      	movne	r3, #0
 80093d8:	eba6 0807 	sub.w	r8, r6, r7
 80093dc:	608b      	str	r3, [r1, #8]
 80093de:	f1b8 0f00 	cmp.w	r8, #0
 80093e2:	dd9c      	ble.n	800931e <__sflush_r+0x1a>
 80093e4:	6a21      	ldr	r1, [r4, #32]
 80093e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093e8:	4643      	mov	r3, r8
 80093ea:	463a      	mov	r2, r7
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b0      	blx	r6
 80093f0:	2800      	cmp	r0, #0
 80093f2:	dc06      	bgt.n	8009402 <__sflush_r+0xfe>
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fa:	81a3      	strh	r3, [r4, #12]
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	e78e      	b.n	8009320 <__sflush_r+0x1c>
 8009402:	4407      	add	r7, r0
 8009404:	eba8 0800 	sub.w	r8, r8, r0
 8009408:	e7e9      	b.n	80093de <__sflush_r+0xda>
 800940a:	bf00      	nop
 800940c:	dfbffffe 	.word	0xdfbffffe

08009410 <_fflush_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	690b      	ldr	r3, [r1, #16]
 8009414:	4605      	mov	r5, r0
 8009416:	460c      	mov	r4, r1
 8009418:	b913      	cbnz	r3, 8009420 <_fflush_r+0x10>
 800941a:	2500      	movs	r5, #0
 800941c:	4628      	mov	r0, r5
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	b118      	cbz	r0, 800942a <_fflush_r+0x1a>
 8009422:	6a03      	ldr	r3, [r0, #32]
 8009424:	b90b      	cbnz	r3, 800942a <_fflush_r+0x1a>
 8009426:	f7fe fa27 	bl	8007878 <__sinit>
 800942a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0f3      	beq.n	800941a <_fflush_r+0xa>
 8009432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009434:	07d0      	lsls	r0, r2, #31
 8009436:	d404      	bmi.n	8009442 <_fflush_r+0x32>
 8009438:	0599      	lsls	r1, r3, #22
 800943a:	d402      	bmi.n	8009442 <_fflush_r+0x32>
 800943c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800943e:	f7fe fb24 	bl	8007a8a <__retarget_lock_acquire_recursive>
 8009442:	4628      	mov	r0, r5
 8009444:	4621      	mov	r1, r4
 8009446:	f7ff ff5d 	bl	8009304 <__sflush_r>
 800944a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800944c:	07da      	lsls	r2, r3, #31
 800944e:	4605      	mov	r5, r0
 8009450:	d4e4      	bmi.n	800941c <_fflush_r+0xc>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	059b      	lsls	r3, r3, #22
 8009456:	d4e1      	bmi.n	800941c <_fflush_r+0xc>
 8009458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800945a:	f7fe fb17 	bl	8007a8c <__retarget_lock_release_recursive>
 800945e:	e7dd      	b.n	800941c <_fflush_r+0xc>

08009460 <__swbuf_r>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	460e      	mov	r6, r1
 8009464:	4614      	mov	r4, r2
 8009466:	4605      	mov	r5, r0
 8009468:	b118      	cbz	r0, 8009472 <__swbuf_r+0x12>
 800946a:	6a03      	ldr	r3, [r0, #32]
 800946c:	b90b      	cbnz	r3, 8009472 <__swbuf_r+0x12>
 800946e:	f7fe fa03 	bl	8007878 <__sinit>
 8009472:	69a3      	ldr	r3, [r4, #24]
 8009474:	60a3      	str	r3, [r4, #8]
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	071a      	lsls	r2, r3, #28
 800947a:	d525      	bpl.n	80094c8 <__swbuf_r+0x68>
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	b31b      	cbz	r3, 80094c8 <__swbuf_r+0x68>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	6922      	ldr	r2, [r4, #16]
 8009484:	1a98      	subs	r0, r3, r2
 8009486:	6963      	ldr	r3, [r4, #20]
 8009488:	b2f6      	uxtb	r6, r6
 800948a:	4283      	cmp	r3, r0
 800948c:	4637      	mov	r7, r6
 800948e:	dc04      	bgt.n	800949a <__swbuf_r+0x3a>
 8009490:	4621      	mov	r1, r4
 8009492:	4628      	mov	r0, r5
 8009494:	f7ff ffbc 	bl	8009410 <_fflush_r>
 8009498:	b9e0      	cbnz	r0, 80094d4 <__swbuf_r+0x74>
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	3b01      	subs	r3, #1
 800949e:	60a3      	str	r3, [r4, #8]
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	6022      	str	r2, [r4, #0]
 80094a6:	701e      	strb	r6, [r3, #0]
 80094a8:	6962      	ldr	r2, [r4, #20]
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d004      	beq.n	80094ba <__swbuf_r+0x5a>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	07db      	lsls	r3, r3, #31
 80094b4:	d506      	bpl.n	80094c4 <__swbuf_r+0x64>
 80094b6:	2e0a      	cmp	r6, #10
 80094b8:	d104      	bne.n	80094c4 <__swbuf_r+0x64>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f7ff ffa7 	bl	8009410 <_fflush_r>
 80094c2:	b938      	cbnz	r0, 80094d4 <__swbuf_r+0x74>
 80094c4:	4638      	mov	r0, r7
 80094c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c8:	4621      	mov	r1, r4
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 f806 	bl	80094dc <__swsetup_r>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	d0d5      	beq.n	8009480 <__swbuf_r+0x20>
 80094d4:	f04f 37ff 	mov.w	r7, #4294967295
 80094d8:	e7f4      	b.n	80094c4 <__swbuf_r+0x64>
	...

080094dc <__swsetup_r>:
 80094dc:	b538      	push	{r3, r4, r5, lr}
 80094de:	4b2a      	ldr	r3, [pc, #168]	; (8009588 <__swsetup_r+0xac>)
 80094e0:	4605      	mov	r5, r0
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	460c      	mov	r4, r1
 80094e6:	b118      	cbz	r0, 80094f0 <__swsetup_r+0x14>
 80094e8:	6a03      	ldr	r3, [r0, #32]
 80094ea:	b90b      	cbnz	r3, 80094f0 <__swsetup_r+0x14>
 80094ec:	f7fe f9c4 	bl	8007878 <__sinit>
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094f6:	0718      	lsls	r0, r3, #28
 80094f8:	d422      	bmi.n	8009540 <__swsetup_r+0x64>
 80094fa:	06d9      	lsls	r1, r3, #27
 80094fc:	d407      	bmi.n	800950e <__swsetup_r+0x32>
 80094fe:	2309      	movs	r3, #9
 8009500:	602b      	str	r3, [r5, #0]
 8009502:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009506:	81a3      	strh	r3, [r4, #12]
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	e034      	b.n	8009578 <__swsetup_r+0x9c>
 800950e:	0758      	lsls	r0, r3, #29
 8009510:	d512      	bpl.n	8009538 <__swsetup_r+0x5c>
 8009512:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009514:	b141      	cbz	r1, 8009528 <__swsetup_r+0x4c>
 8009516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800951a:	4299      	cmp	r1, r3
 800951c:	d002      	beq.n	8009524 <__swsetup_r+0x48>
 800951e:	4628      	mov	r0, r5
 8009520:	f7ff f930 	bl	8008784 <_free_r>
 8009524:	2300      	movs	r3, #0
 8009526:	6363      	str	r3, [r4, #52]	; 0x34
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	2300      	movs	r3, #0
 8009532:	6063      	str	r3, [r4, #4]
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	f043 0308 	orr.w	r3, r3, #8
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	b94b      	cbnz	r3, 8009558 <__swsetup_r+0x7c>
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800954a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800954e:	d003      	beq.n	8009558 <__swsetup_r+0x7c>
 8009550:	4621      	mov	r1, r4
 8009552:	4628      	mov	r0, r5
 8009554:	f000 f8c4 	bl	80096e0 <__smakebuf_r>
 8009558:	89a0      	ldrh	r0, [r4, #12]
 800955a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800955e:	f010 0301 	ands.w	r3, r0, #1
 8009562:	d00a      	beq.n	800957a <__swsetup_r+0x9e>
 8009564:	2300      	movs	r3, #0
 8009566:	60a3      	str	r3, [r4, #8]
 8009568:	6963      	ldr	r3, [r4, #20]
 800956a:	425b      	negs	r3, r3
 800956c:	61a3      	str	r3, [r4, #24]
 800956e:	6923      	ldr	r3, [r4, #16]
 8009570:	b943      	cbnz	r3, 8009584 <__swsetup_r+0xa8>
 8009572:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009576:	d1c4      	bne.n	8009502 <__swsetup_r+0x26>
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	0781      	lsls	r1, r0, #30
 800957c:	bf58      	it	pl
 800957e:	6963      	ldrpl	r3, [r4, #20]
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	e7f4      	b.n	800956e <__swsetup_r+0x92>
 8009584:	2000      	movs	r0, #0
 8009586:	e7f7      	b.n	8009578 <__swsetup_r+0x9c>
 8009588:	2000013c 	.word	0x2000013c

0800958c <_sbrk_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d06      	ldr	r5, [pc, #24]	; (80095a8 <_sbrk_r+0x1c>)
 8009590:	2300      	movs	r3, #0
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	602b      	str	r3, [r5, #0]
 8009598:	f7f8 fbc0 	bl	8001d1c <_sbrk>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_sbrk_r+0x1a>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_sbrk_r+0x1a>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	20000508 	.word	0x20000508

080095ac <memcpy>:
 80095ac:	440a      	add	r2, r1
 80095ae:	4291      	cmp	r1, r2
 80095b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b4:	d100      	bne.n	80095b8 <memcpy+0xc>
 80095b6:	4770      	bx	lr
 80095b8:	b510      	push	{r4, lr}
 80095ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c2:	4291      	cmp	r1, r2
 80095c4:	d1f9      	bne.n	80095ba <memcpy+0xe>
 80095c6:	bd10      	pop	{r4, pc}

080095c8 <__assert_func>:
 80095c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095ca:	4614      	mov	r4, r2
 80095cc:	461a      	mov	r2, r3
 80095ce:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <__assert_func+0x2c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4605      	mov	r5, r0
 80095d4:	68d8      	ldr	r0, [r3, #12]
 80095d6:	b14c      	cbz	r4, 80095ec <__assert_func+0x24>
 80095d8:	4b07      	ldr	r3, [pc, #28]	; (80095f8 <__assert_func+0x30>)
 80095da:	9100      	str	r1, [sp, #0]
 80095dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e0:	4906      	ldr	r1, [pc, #24]	; (80095fc <__assert_func+0x34>)
 80095e2:	462b      	mov	r3, r5
 80095e4:	f000 f844 	bl	8009670 <fiprintf>
 80095e8:	f000 f8d8 	bl	800979c <abort>
 80095ec:	4b04      	ldr	r3, [pc, #16]	; (8009600 <__assert_func+0x38>)
 80095ee:	461c      	mov	r4, r3
 80095f0:	e7f3      	b.n	80095da <__assert_func+0x12>
 80095f2:	bf00      	nop
 80095f4:	2000013c 	.word	0x2000013c
 80095f8:	0800a1b7 	.word	0x0800a1b7
 80095fc:	0800a1c4 	.word	0x0800a1c4
 8009600:	0800a1f2 	.word	0x0800a1f2

08009604 <_calloc_r>:
 8009604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009606:	fba1 2402 	umull	r2, r4, r1, r2
 800960a:	b94c      	cbnz	r4, 8009620 <_calloc_r+0x1c>
 800960c:	4611      	mov	r1, r2
 800960e:	9201      	str	r2, [sp, #4]
 8009610:	f7ff f92c 	bl	800886c <_malloc_r>
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	4605      	mov	r5, r0
 8009618:	b930      	cbnz	r0, 8009628 <_calloc_r+0x24>
 800961a:	4628      	mov	r0, r5
 800961c:	b003      	add	sp, #12
 800961e:	bd30      	pop	{r4, r5, pc}
 8009620:	220c      	movs	r2, #12
 8009622:	6002      	str	r2, [r0, #0]
 8009624:	2500      	movs	r5, #0
 8009626:	e7f8      	b.n	800961a <_calloc_r+0x16>
 8009628:	4621      	mov	r1, r4
 800962a:	f7fe f9b0 	bl	800798e <memset>
 800962e:	e7f4      	b.n	800961a <_calloc_r+0x16>

08009630 <__ascii_mbtowc>:
 8009630:	b082      	sub	sp, #8
 8009632:	b901      	cbnz	r1, 8009636 <__ascii_mbtowc+0x6>
 8009634:	a901      	add	r1, sp, #4
 8009636:	b142      	cbz	r2, 800964a <__ascii_mbtowc+0x1a>
 8009638:	b14b      	cbz	r3, 800964e <__ascii_mbtowc+0x1e>
 800963a:	7813      	ldrb	r3, [r2, #0]
 800963c:	600b      	str	r3, [r1, #0]
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	1e10      	subs	r0, r2, #0
 8009642:	bf18      	it	ne
 8009644:	2001      	movne	r0, #1
 8009646:	b002      	add	sp, #8
 8009648:	4770      	bx	lr
 800964a:	4610      	mov	r0, r2
 800964c:	e7fb      	b.n	8009646 <__ascii_mbtowc+0x16>
 800964e:	f06f 0001 	mvn.w	r0, #1
 8009652:	e7f8      	b.n	8009646 <__ascii_mbtowc+0x16>

08009654 <__ascii_wctomb>:
 8009654:	b149      	cbz	r1, 800966a <__ascii_wctomb+0x16>
 8009656:	2aff      	cmp	r2, #255	; 0xff
 8009658:	bf85      	ittet	hi
 800965a:	238a      	movhi	r3, #138	; 0x8a
 800965c:	6003      	strhi	r3, [r0, #0]
 800965e:	700a      	strbls	r2, [r1, #0]
 8009660:	f04f 30ff 	movhi.w	r0, #4294967295
 8009664:	bf98      	it	ls
 8009666:	2001      	movls	r0, #1
 8009668:	4770      	bx	lr
 800966a:	4608      	mov	r0, r1
 800966c:	4770      	bx	lr
	...

08009670 <fiprintf>:
 8009670:	b40e      	push	{r1, r2, r3}
 8009672:	b503      	push	{r0, r1, lr}
 8009674:	4601      	mov	r1, r0
 8009676:	ab03      	add	r3, sp, #12
 8009678:	4805      	ldr	r0, [pc, #20]	; (8009690 <fiprintf+0x20>)
 800967a:	f853 2b04 	ldr.w	r2, [r3], #4
 800967e:	6800      	ldr	r0, [r0, #0]
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	f7ff fd25 	bl	80090d0 <_vfiprintf_r>
 8009686:	b002      	add	sp, #8
 8009688:	f85d eb04 	ldr.w	lr, [sp], #4
 800968c:	b003      	add	sp, #12
 800968e:	4770      	bx	lr
 8009690:	2000013c 	.word	0x2000013c

08009694 <__swhatbuf_r>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	460c      	mov	r4, r1
 8009698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969c:	2900      	cmp	r1, #0
 800969e:	b096      	sub	sp, #88	; 0x58
 80096a0:	4615      	mov	r5, r2
 80096a2:	461e      	mov	r6, r3
 80096a4:	da0d      	bge.n	80096c2 <__swhatbuf_r+0x2e>
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096ac:	f04f 0100 	mov.w	r1, #0
 80096b0:	bf0c      	ite	eq
 80096b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096b6:	2340      	movne	r3, #64	; 0x40
 80096b8:	2000      	movs	r0, #0
 80096ba:	6031      	str	r1, [r6, #0]
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	b016      	add	sp, #88	; 0x58
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	466a      	mov	r2, sp
 80096c4:	f000 f848 	bl	8009758 <_fstat_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	dbec      	blt.n	80096a6 <__swhatbuf_r+0x12>
 80096cc:	9901      	ldr	r1, [sp, #4]
 80096ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096d6:	4259      	negs	r1, r3
 80096d8:	4159      	adcs	r1, r3
 80096da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096de:	e7eb      	b.n	80096b8 <__swhatbuf_r+0x24>

080096e0 <__smakebuf_r>:
 80096e0:	898b      	ldrh	r3, [r1, #12]
 80096e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096e4:	079d      	lsls	r5, r3, #30
 80096e6:	4606      	mov	r6, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	d507      	bpl.n	80096fc <__smakebuf_r+0x1c>
 80096ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	6123      	str	r3, [r4, #16]
 80096f4:	2301      	movs	r3, #1
 80096f6:	6163      	str	r3, [r4, #20]
 80096f8:	b002      	add	sp, #8
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	ab01      	add	r3, sp, #4
 80096fe:	466a      	mov	r2, sp
 8009700:	f7ff ffc8 	bl	8009694 <__swhatbuf_r>
 8009704:	9900      	ldr	r1, [sp, #0]
 8009706:	4605      	mov	r5, r0
 8009708:	4630      	mov	r0, r6
 800970a:	f7ff f8af 	bl	800886c <_malloc_r>
 800970e:	b948      	cbnz	r0, 8009724 <__smakebuf_r+0x44>
 8009710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009714:	059a      	lsls	r2, r3, #22
 8009716:	d4ef      	bmi.n	80096f8 <__smakebuf_r+0x18>
 8009718:	f023 0303 	bic.w	r3, r3, #3
 800971c:	f043 0302 	orr.w	r3, r3, #2
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	e7e3      	b.n	80096ec <__smakebuf_r+0xc>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	6020      	str	r0, [r4, #0]
 8009728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972c:	81a3      	strh	r3, [r4, #12]
 800972e:	9b00      	ldr	r3, [sp, #0]
 8009730:	6163      	str	r3, [r4, #20]
 8009732:	9b01      	ldr	r3, [sp, #4]
 8009734:	6120      	str	r0, [r4, #16]
 8009736:	b15b      	cbz	r3, 8009750 <__smakebuf_r+0x70>
 8009738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800973c:	4630      	mov	r0, r6
 800973e:	f000 f81d 	bl	800977c <_isatty_r>
 8009742:	b128      	cbz	r0, 8009750 <__smakebuf_r+0x70>
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	f023 0303 	bic.w	r3, r3, #3
 800974a:	f043 0301 	orr.w	r3, r3, #1
 800974e:	81a3      	strh	r3, [r4, #12]
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	431d      	orrs	r5, r3
 8009754:	81a5      	strh	r5, [r4, #12]
 8009756:	e7cf      	b.n	80096f8 <__smakebuf_r+0x18>

08009758 <_fstat_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d07      	ldr	r5, [pc, #28]	; (8009778 <_fstat_r+0x20>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	4611      	mov	r1, r2
 8009764:	602b      	str	r3, [r5, #0]
 8009766:	f7f8 fab0 	bl	8001cca <_fstat>
 800976a:	1c43      	adds	r3, r0, #1
 800976c:	d102      	bne.n	8009774 <_fstat_r+0x1c>
 800976e:	682b      	ldr	r3, [r5, #0]
 8009770:	b103      	cbz	r3, 8009774 <_fstat_r+0x1c>
 8009772:	6023      	str	r3, [r4, #0]
 8009774:	bd38      	pop	{r3, r4, r5, pc}
 8009776:	bf00      	nop
 8009778:	20000508 	.word	0x20000508

0800977c <_isatty_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d06      	ldr	r5, [pc, #24]	; (8009798 <_isatty_r+0x1c>)
 8009780:	2300      	movs	r3, #0
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	f7f8 faaf 	bl	8001cea <_isatty>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_isatty_r+0x1a>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_isatty_r+0x1a>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	20000508 	.word	0x20000508

0800979c <abort>:
 800979c:	b508      	push	{r3, lr}
 800979e:	2006      	movs	r0, #6
 80097a0:	f000 f82c 	bl	80097fc <raise>
 80097a4:	2001      	movs	r0, #1
 80097a6:	f7f8 fa41 	bl	8001c2c <_exit>

080097aa <_raise_r>:
 80097aa:	291f      	cmp	r1, #31
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4604      	mov	r4, r0
 80097b0:	460d      	mov	r5, r1
 80097b2:	d904      	bls.n	80097be <_raise_r+0x14>
 80097b4:	2316      	movs	r3, #22
 80097b6:	6003      	str	r3, [r0, #0]
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80097c0:	b112      	cbz	r2, 80097c8 <_raise_r+0x1e>
 80097c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097c6:	b94b      	cbnz	r3, 80097dc <_raise_r+0x32>
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 f831 	bl	8009830 <_getpid_r>
 80097ce:	462a      	mov	r2, r5
 80097d0:	4601      	mov	r1, r0
 80097d2:	4620      	mov	r0, r4
 80097d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d8:	f000 b818 	b.w	800980c <_kill_r>
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d00a      	beq.n	80097f6 <_raise_r+0x4c>
 80097e0:	1c59      	adds	r1, r3, #1
 80097e2:	d103      	bne.n	80097ec <_raise_r+0x42>
 80097e4:	2316      	movs	r3, #22
 80097e6:	6003      	str	r3, [r0, #0]
 80097e8:	2001      	movs	r0, #1
 80097ea:	e7e7      	b.n	80097bc <_raise_r+0x12>
 80097ec:	2400      	movs	r4, #0
 80097ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097f2:	4628      	mov	r0, r5
 80097f4:	4798      	blx	r3
 80097f6:	2000      	movs	r0, #0
 80097f8:	e7e0      	b.n	80097bc <_raise_r+0x12>
	...

080097fc <raise>:
 80097fc:	4b02      	ldr	r3, [pc, #8]	; (8009808 <raise+0xc>)
 80097fe:	4601      	mov	r1, r0
 8009800:	6818      	ldr	r0, [r3, #0]
 8009802:	f7ff bfd2 	b.w	80097aa <_raise_r>
 8009806:	bf00      	nop
 8009808:	2000013c 	.word	0x2000013c

0800980c <_kill_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d07      	ldr	r5, [pc, #28]	; (800982c <_kill_r+0x20>)
 8009810:	2300      	movs	r3, #0
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	4611      	mov	r1, r2
 8009818:	602b      	str	r3, [r5, #0]
 800981a:	f7f8 f9f7 	bl	8001c0c <_kill>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d102      	bne.n	8009828 <_kill_r+0x1c>
 8009822:	682b      	ldr	r3, [r5, #0]
 8009824:	b103      	cbz	r3, 8009828 <_kill_r+0x1c>
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	bd38      	pop	{r3, r4, r5, pc}
 800982a:	bf00      	nop
 800982c:	20000508 	.word	0x20000508

08009830 <_getpid_r>:
 8009830:	f7f8 b9e4 	b.w	8001bfc <_getpid>

08009834 <atan2>:
 8009834:	f000 b908 	b.w	8009a48 <__ieee754_atan2>

08009838 <sqrt>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	ed2d 8b02 	vpush	{d8}
 800983e:	ec55 4b10 	vmov	r4, r5, d0
 8009842:	f000 f825 	bl	8009890 <__ieee754_sqrt>
 8009846:	4622      	mov	r2, r4
 8009848:	462b      	mov	r3, r5
 800984a:	4620      	mov	r0, r4
 800984c:	4629      	mov	r1, r5
 800984e:	eeb0 8a40 	vmov.f32	s16, s0
 8009852:	eef0 8a60 	vmov.f32	s17, s1
 8009856:	f7f7 f969 	bl	8000b2c <__aeabi_dcmpun>
 800985a:	b990      	cbnz	r0, 8009882 <sqrt+0x4a>
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	4620      	mov	r0, r4
 8009862:	4629      	mov	r1, r5
 8009864:	f7f7 f93a 	bl	8000adc <__aeabi_dcmplt>
 8009868:	b158      	cbz	r0, 8009882 <sqrt+0x4a>
 800986a:	f7fe f8e3 	bl	8007a34 <__errno>
 800986e:	2321      	movs	r3, #33	; 0x21
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	2200      	movs	r2, #0
 8009874:	2300      	movs	r3, #0
 8009876:	4610      	mov	r0, r2
 8009878:	4619      	mov	r1, r3
 800987a:	f7f6 ffe7 	bl	800084c <__aeabi_ddiv>
 800987e:	ec41 0b18 	vmov	d8, r0, r1
 8009882:	eeb0 0a48 	vmov.f32	s0, s16
 8009886:	eef0 0a68 	vmov.f32	s1, s17
 800988a:	ecbd 8b02 	vpop	{d8}
 800988e:	bd38      	pop	{r3, r4, r5, pc}

08009890 <__ieee754_sqrt>:
 8009890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	ec55 4b10 	vmov	r4, r5, d0
 8009898:	4e67      	ldr	r6, [pc, #412]	; (8009a38 <__ieee754_sqrt+0x1a8>)
 800989a:	43ae      	bics	r6, r5
 800989c:	ee10 0a10 	vmov	r0, s0
 80098a0:	ee10 2a10 	vmov	r2, s0
 80098a4:	4629      	mov	r1, r5
 80098a6:	462b      	mov	r3, r5
 80098a8:	d10d      	bne.n	80098c6 <__ieee754_sqrt+0x36>
 80098aa:	f7f6 fea5 	bl	80005f8 <__aeabi_dmul>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	f7f6 fce9 	bl	800028c <__adddf3>
 80098ba:	4604      	mov	r4, r0
 80098bc:	460d      	mov	r5, r1
 80098be:	ec45 4b10 	vmov	d0, r4, r5
 80098c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c6:	2d00      	cmp	r5, #0
 80098c8:	dc0b      	bgt.n	80098e2 <__ieee754_sqrt+0x52>
 80098ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80098ce:	4326      	orrs	r6, r4
 80098d0:	d0f5      	beq.n	80098be <__ieee754_sqrt+0x2e>
 80098d2:	b135      	cbz	r5, 80098e2 <__ieee754_sqrt+0x52>
 80098d4:	f7f6 fcd8 	bl	8000288 <__aeabi_dsub>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	f7f6 ffb6 	bl	800084c <__aeabi_ddiv>
 80098e0:	e7eb      	b.n	80098ba <__ieee754_sqrt+0x2a>
 80098e2:	1509      	asrs	r1, r1, #20
 80098e4:	f000 808d 	beq.w	8009a02 <__ieee754_sqrt+0x172>
 80098e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ec:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80098f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098f4:	07c9      	lsls	r1, r1, #31
 80098f6:	bf5c      	itt	pl
 80098f8:	005b      	lslpl	r3, r3, #1
 80098fa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80098fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009902:	bf58      	it	pl
 8009904:	0052      	lslpl	r2, r2, #1
 8009906:	2500      	movs	r5, #0
 8009908:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800990c:	1076      	asrs	r6, r6, #1
 800990e:	0052      	lsls	r2, r2, #1
 8009910:	f04f 0e16 	mov.w	lr, #22
 8009914:	46ac      	mov	ip, r5
 8009916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800991a:	eb0c 0001 	add.w	r0, ip, r1
 800991e:	4298      	cmp	r0, r3
 8009920:	bfde      	ittt	le
 8009922:	1a1b      	suble	r3, r3, r0
 8009924:	eb00 0c01 	addle.w	ip, r0, r1
 8009928:	186d      	addle	r5, r5, r1
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	f1be 0e01 	subs.w	lr, lr, #1
 8009930:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009934:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009938:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800993c:	d1ed      	bne.n	800991a <__ieee754_sqrt+0x8a>
 800993e:	4674      	mov	r4, lr
 8009940:	2720      	movs	r7, #32
 8009942:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009946:	4563      	cmp	r3, ip
 8009948:	eb01 000e 	add.w	r0, r1, lr
 800994c:	dc02      	bgt.n	8009954 <__ieee754_sqrt+0xc4>
 800994e:	d113      	bne.n	8009978 <__ieee754_sqrt+0xe8>
 8009950:	4290      	cmp	r0, r2
 8009952:	d811      	bhi.n	8009978 <__ieee754_sqrt+0xe8>
 8009954:	2800      	cmp	r0, #0
 8009956:	eb00 0e01 	add.w	lr, r0, r1
 800995a:	da57      	bge.n	8009a0c <__ieee754_sqrt+0x17c>
 800995c:	f1be 0f00 	cmp.w	lr, #0
 8009960:	db54      	blt.n	8009a0c <__ieee754_sqrt+0x17c>
 8009962:	f10c 0801 	add.w	r8, ip, #1
 8009966:	eba3 030c 	sub.w	r3, r3, ip
 800996a:	4290      	cmp	r0, r2
 800996c:	bf88      	it	hi
 800996e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009972:	1a12      	subs	r2, r2, r0
 8009974:	440c      	add	r4, r1
 8009976:	46c4      	mov	ip, r8
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	3f01      	subs	r7, #1
 800997c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009980:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009984:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009988:	d1dd      	bne.n	8009946 <__ieee754_sqrt+0xb6>
 800998a:	4313      	orrs	r3, r2
 800998c:	d01b      	beq.n	80099c6 <__ieee754_sqrt+0x136>
 800998e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009a3c <__ieee754_sqrt+0x1ac>
 8009992:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009a40 <__ieee754_sqrt+0x1b0>
 8009996:	e9da 0100 	ldrd	r0, r1, [sl]
 800999a:	e9db 2300 	ldrd	r2, r3, [fp]
 800999e:	f7f6 fc73 	bl	8000288 <__aeabi_dsub>
 80099a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4640      	mov	r0, r8
 80099ac:	4649      	mov	r1, r9
 80099ae:	f7f7 f89f 	bl	8000af0 <__aeabi_dcmple>
 80099b2:	b140      	cbz	r0, 80099c6 <__ieee754_sqrt+0x136>
 80099b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80099b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80099bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80099c0:	d126      	bne.n	8009a10 <__ieee754_sqrt+0x180>
 80099c2:	3501      	adds	r5, #1
 80099c4:	463c      	mov	r4, r7
 80099c6:	106a      	asrs	r2, r5, #1
 80099c8:	0863      	lsrs	r3, r4, #1
 80099ca:	07e9      	lsls	r1, r5, #31
 80099cc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80099d0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80099d4:	bf48      	it	mi
 80099d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80099da:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80099de:	461c      	mov	r4, r3
 80099e0:	e76d      	b.n	80098be <__ieee754_sqrt+0x2e>
 80099e2:	0ad3      	lsrs	r3, r2, #11
 80099e4:	3815      	subs	r0, #21
 80099e6:	0552      	lsls	r2, r2, #21
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0fa      	beq.n	80099e2 <__ieee754_sqrt+0x152>
 80099ec:	02dc      	lsls	r4, r3, #11
 80099ee:	d50a      	bpl.n	8009a06 <__ieee754_sqrt+0x176>
 80099f0:	f1c1 0420 	rsb	r4, r1, #32
 80099f4:	fa22 f404 	lsr.w	r4, r2, r4
 80099f8:	1e4d      	subs	r5, r1, #1
 80099fa:	408a      	lsls	r2, r1
 80099fc:	4323      	orrs	r3, r4
 80099fe:	1b41      	subs	r1, r0, r5
 8009a00:	e772      	b.n	80098e8 <__ieee754_sqrt+0x58>
 8009a02:	4608      	mov	r0, r1
 8009a04:	e7f0      	b.n	80099e8 <__ieee754_sqrt+0x158>
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	3101      	adds	r1, #1
 8009a0a:	e7ef      	b.n	80099ec <__ieee754_sqrt+0x15c>
 8009a0c:	46e0      	mov	r8, ip
 8009a0e:	e7aa      	b.n	8009966 <__ieee754_sqrt+0xd6>
 8009a10:	f7f6 fc3c 	bl	800028c <__adddf3>
 8009a14:	e9da 8900 	ldrd	r8, r9, [sl]
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	4649      	mov	r1, r9
 8009a20:	f7f7 f85c 	bl	8000adc <__aeabi_dcmplt>
 8009a24:	b120      	cbz	r0, 8009a30 <__ieee754_sqrt+0x1a0>
 8009a26:	1ca0      	adds	r0, r4, #2
 8009a28:	bf08      	it	eq
 8009a2a:	3501      	addeq	r5, #1
 8009a2c:	3402      	adds	r4, #2
 8009a2e:	e7ca      	b.n	80099c6 <__ieee754_sqrt+0x136>
 8009a30:	3401      	adds	r4, #1
 8009a32:	f024 0401 	bic.w	r4, r4, #1
 8009a36:	e7c6      	b.n	80099c6 <__ieee754_sqrt+0x136>
 8009a38:	7ff00000 	.word	0x7ff00000
 8009a3c:	200002b0 	.word	0x200002b0
 8009a40:	200002b8 	.word	0x200002b8
 8009a44:	00000000 	.word	0x00000000

08009a48 <__ieee754_atan2>:
 8009a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a4c:	ec57 6b11 	vmov	r6, r7, d1
 8009a50:	4273      	negs	r3, r6
 8009a52:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009bd0 <__ieee754_atan2+0x188>
 8009a56:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009a5a:	4333      	orrs	r3, r6
 8009a5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009a60:	4543      	cmp	r3, r8
 8009a62:	ec51 0b10 	vmov	r0, r1, d0
 8009a66:	ee11 5a10 	vmov	r5, s2
 8009a6a:	d80a      	bhi.n	8009a82 <__ieee754_atan2+0x3a>
 8009a6c:	4244      	negs	r4, r0
 8009a6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a72:	4304      	orrs	r4, r0
 8009a74:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009a78:	4544      	cmp	r4, r8
 8009a7a:	ee10 9a10 	vmov	r9, s0
 8009a7e:	468e      	mov	lr, r1
 8009a80:	d907      	bls.n	8009a92 <__ieee754_atan2+0x4a>
 8009a82:	4632      	mov	r2, r6
 8009a84:	463b      	mov	r3, r7
 8009a86:	f7f6 fc01 	bl	800028c <__adddf3>
 8009a8a:	ec41 0b10 	vmov	d0, r0, r1
 8009a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a92:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009a96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009a9a:	4334      	orrs	r4, r6
 8009a9c:	d103      	bne.n	8009aa6 <__ieee754_atan2+0x5e>
 8009a9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa2:	f000 b899 	b.w	8009bd8 <atan>
 8009aa6:	17bc      	asrs	r4, r7, #30
 8009aa8:	f004 0402 	and.w	r4, r4, #2
 8009aac:	ea53 0909 	orrs.w	r9, r3, r9
 8009ab0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009ab4:	d107      	bne.n	8009ac6 <__ieee754_atan2+0x7e>
 8009ab6:	2c02      	cmp	r4, #2
 8009ab8:	d05f      	beq.n	8009b7a <__ieee754_atan2+0x132>
 8009aba:	2c03      	cmp	r4, #3
 8009abc:	d1e5      	bne.n	8009a8a <__ieee754_atan2+0x42>
 8009abe:	a140      	add	r1, pc, #256	; (adr r1, 8009bc0 <__ieee754_atan2+0x178>)
 8009ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac4:	e7e1      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009ac6:	4315      	orrs	r5, r2
 8009ac8:	d106      	bne.n	8009ad8 <__ieee754_atan2+0x90>
 8009aca:	f1be 0f00 	cmp.w	lr, #0
 8009ace:	da5f      	bge.n	8009b90 <__ieee754_atan2+0x148>
 8009ad0:	a13d      	add	r1, pc, #244	; (adr r1, 8009bc8 <__ieee754_atan2+0x180>)
 8009ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ad6:	e7d8      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009ad8:	4542      	cmp	r2, r8
 8009ada:	d10f      	bne.n	8009afc <__ieee754_atan2+0xb4>
 8009adc:	4293      	cmp	r3, r2
 8009ade:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ae2:	d107      	bne.n	8009af4 <__ieee754_atan2+0xac>
 8009ae4:	2c02      	cmp	r4, #2
 8009ae6:	d84c      	bhi.n	8009b82 <__ieee754_atan2+0x13a>
 8009ae8:	4b33      	ldr	r3, [pc, #204]	; (8009bb8 <__ieee754_atan2+0x170>)
 8009aea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009aee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009af2:	e7ca      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009af4:	2c02      	cmp	r4, #2
 8009af6:	d848      	bhi.n	8009b8a <__ieee754_atan2+0x142>
 8009af8:	4b30      	ldr	r3, [pc, #192]	; (8009bbc <__ieee754_atan2+0x174>)
 8009afa:	e7f6      	b.n	8009aea <__ieee754_atan2+0xa2>
 8009afc:	4543      	cmp	r3, r8
 8009afe:	d0e4      	beq.n	8009aca <__ieee754_atan2+0x82>
 8009b00:	1a9b      	subs	r3, r3, r2
 8009b02:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009b06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b0a:	da1e      	bge.n	8009b4a <__ieee754_atan2+0x102>
 8009b0c:	2f00      	cmp	r7, #0
 8009b0e:	da01      	bge.n	8009b14 <__ieee754_atan2+0xcc>
 8009b10:	323c      	adds	r2, #60	; 0x3c
 8009b12:	db1e      	blt.n	8009b52 <__ieee754_atan2+0x10a>
 8009b14:	4632      	mov	r2, r6
 8009b16:	463b      	mov	r3, r7
 8009b18:	f7f6 fe98 	bl	800084c <__aeabi_ddiv>
 8009b1c:	ec41 0b10 	vmov	d0, r0, r1
 8009b20:	f000 f9fa 	bl	8009f18 <fabs>
 8009b24:	f000 f858 	bl	8009bd8 <atan>
 8009b28:	ec51 0b10 	vmov	r0, r1, d0
 8009b2c:	2c01      	cmp	r4, #1
 8009b2e:	d013      	beq.n	8009b58 <__ieee754_atan2+0x110>
 8009b30:	2c02      	cmp	r4, #2
 8009b32:	d015      	beq.n	8009b60 <__ieee754_atan2+0x118>
 8009b34:	2c00      	cmp	r4, #0
 8009b36:	d0a8      	beq.n	8009a8a <__ieee754_atan2+0x42>
 8009b38:	a317      	add	r3, pc, #92	; (adr r3, 8009b98 <__ieee754_atan2+0x150>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fba3 	bl	8000288 <__aeabi_dsub>
 8009b42:	a317      	add	r3, pc, #92	; (adr r3, 8009ba0 <__ieee754_atan2+0x158>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	e014      	b.n	8009b74 <__ieee754_atan2+0x12c>
 8009b4a:	a117      	add	r1, pc, #92	; (adr r1, 8009ba8 <__ieee754_atan2+0x160>)
 8009b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b50:	e7ec      	b.n	8009b2c <__ieee754_atan2+0xe4>
 8009b52:	2000      	movs	r0, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	e7e9      	b.n	8009b2c <__ieee754_atan2+0xe4>
 8009b58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	e794      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009b60:	a30d      	add	r3, pc, #52	; (adr r3, 8009b98 <__ieee754_atan2+0x150>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fb8f 	bl	8000288 <__aeabi_dsub>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	a10c      	add	r1, pc, #48	; (adr r1, 8009ba0 <__ieee754_atan2+0x158>)
 8009b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b74:	f7f6 fb88 	bl	8000288 <__aeabi_dsub>
 8009b78:	e787      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009b7a:	a109      	add	r1, pc, #36	; (adr r1, 8009ba0 <__ieee754_atan2+0x158>)
 8009b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b80:	e783      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009b82:	a10b      	add	r1, pc, #44	; (adr r1, 8009bb0 <__ieee754_atan2+0x168>)
 8009b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b88:	e77f      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	e77c      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009b90:	a105      	add	r1, pc, #20	; (adr r1, 8009ba8 <__ieee754_atan2+0x160>)
 8009b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b96:	e778      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009b98:	33145c07 	.word	0x33145c07
 8009b9c:	3ca1a626 	.word	0x3ca1a626
 8009ba0:	54442d18 	.word	0x54442d18
 8009ba4:	400921fb 	.word	0x400921fb
 8009ba8:	54442d18 	.word	0x54442d18
 8009bac:	3ff921fb 	.word	0x3ff921fb
 8009bb0:	54442d18 	.word	0x54442d18
 8009bb4:	3fe921fb 	.word	0x3fe921fb
 8009bb8:	0800a2f8 	.word	0x0800a2f8
 8009bbc:	0800a310 	.word	0x0800a310
 8009bc0:	54442d18 	.word	0x54442d18
 8009bc4:	c00921fb 	.word	0xc00921fb
 8009bc8:	54442d18 	.word	0x54442d18
 8009bcc:	bff921fb 	.word	0xbff921fb
 8009bd0:	7ff00000 	.word	0x7ff00000
 8009bd4:	00000000 	.word	0x00000000

08009bd8 <atan>:
 8009bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	ec55 4b10 	vmov	r4, r5, d0
 8009be0:	4bc3      	ldr	r3, [pc, #780]	; (8009ef0 <atan+0x318>)
 8009be2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009be6:	429e      	cmp	r6, r3
 8009be8:	46ab      	mov	fp, r5
 8009bea:	dd18      	ble.n	8009c1e <atan+0x46>
 8009bec:	4bc1      	ldr	r3, [pc, #772]	; (8009ef4 <atan+0x31c>)
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	dc01      	bgt.n	8009bf6 <atan+0x1e>
 8009bf2:	d109      	bne.n	8009c08 <atan+0x30>
 8009bf4:	b144      	cbz	r4, 8009c08 <atan+0x30>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 fb45 	bl	800028c <__adddf3>
 8009c02:	4604      	mov	r4, r0
 8009c04:	460d      	mov	r5, r1
 8009c06:	e006      	b.n	8009c16 <atan+0x3e>
 8009c08:	f1bb 0f00 	cmp.w	fp, #0
 8009c0c:	f300 8131 	bgt.w	8009e72 <atan+0x29a>
 8009c10:	a59b      	add	r5, pc, #620	; (adr r5, 8009e80 <atan+0x2a8>)
 8009c12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c16:	ec45 4b10 	vmov	d0, r4, r5
 8009c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	4bb6      	ldr	r3, [pc, #728]	; (8009ef8 <atan+0x320>)
 8009c20:	429e      	cmp	r6, r3
 8009c22:	dc14      	bgt.n	8009c4e <atan+0x76>
 8009c24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009c28:	429e      	cmp	r6, r3
 8009c2a:	dc0d      	bgt.n	8009c48 <atan+0x70>
 8009c2c:	a396      	add	r3, pc, #600	; (adr r3, 8009e88 <atan+0x2b0>)
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	ee10 0a10 	vmov	r0, s0
 8009c36:	4629      	mov	r1, r5
 8009c38:	f7f6 fb28 	bl	800028c <__adddf3>
 8009c3c:	4baf      	ldr	r3, [pc, #700]	; (8009efc <atan+0x324>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f7f6 ff6a 	bl	8000b18 <__aeabi_dcmpgt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d1e6      	bne.n	8009c16 <atan+0x3e>
 8009c48:	f04f 3aff 	mov.w	sl, #4294967295
 8009c4c:	e02b      	b.n	8009ca6 <atan+0xce>
 8009c4e:	f000 f963 	bl	8009f18 <fabs>
 8009c52:	4bab      	ldr	r3, [pc, #684]	; (8009f00 <atan+0x328>)
 8009c54:	429e      	cmp	r6, r3
 8009c56:	ec55 4b10 	vmov	r4, r5, d0
 8009c5a:	f300 80bf 	bgt.w	8009ddc <atan+0x204>
 8009c5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009c62:	429e      	cmp	r6, r3
 8009c64:	f300 80a0 	bgt.w	8009da8 <atan+0x1d0>
 8009c68:	ee10 2a10 	vmov	r2, s0
 8009c6c:	ee10 0a10 	vmov	r0, s0
 8009c70:	462b      	mov	r3, r5
 8009c72:	4629      	mov	r1, r5
 8009c74:	f7f6 fb0a 	bl	800028c <__adddf3>
 8009c78:	4ba0      	ldr	r3, [pc, #640]	; (8009efc <atan+0x324>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f7f6 fb04 	bl	8000288 <__aeabi_dsub>
 8009c80:	2200      	movs	r2, #0
 8009c82:	4606      	mov	r6, r0
 8009c84:	460f      	mov	r7, r1
 8009c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7f6 fafd 	bl	800028c <__adddf3>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 fdd7 	bl	800084c <__aeabi_ddiv>
 8009c9e:	f04f 0a00 	mov.w	sl, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	462b      	mov	r3, r5
 8009caa:	4620      	mov	r0, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 fca3 	bl	80005f8 <__aeabi_dmul>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	4689      	mov	r9, r1
 8009cba:	f7f6 fc9d 	bl	80005f8 <__aeabi_dmul>
 8009cbe:	a374      	add	r3, pc, #464	; (adr r3, 8009e90 <atan+0x2b8>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	f7f6 fc96 	bl	80005f8 <__aeabi_dmul>
 8009ccc:	a372      	add	r3, pc, #456	; (adr r3, 8009e98 <atan+0x2c0>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fadb 	bl	800028c <__adddf3>
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	463b      	mov	r3, r7
 8009cda:	f7f6 fc8d 	bl	80005f8 <__aeabi_dmul>
 8009cde:	a370      	add	r3, pc, #448	; (adr r3, 8009ea0 <atan+0x2c8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fad2 	bl	800028c <__adddf3>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	f7f6 fc84 	bl	80005f8 <__aeabi_dmul>
 8009cf0:	a36d      	add	r3, pc, #436	; (adr r3, 8009ea8 <atan+0x2d0>)
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f7f6 fac9 	bl	800028c <__adddf3>
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	f7f6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8009d02:	a36b      	add	r3, pc, #428	; (adr r3, 8009eb0 <atan+0x2d8>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f7f6 fac0 	bl	800028c <__adddf3>
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	f7f6 fc72 	bl	80005f8 <__aeabi_dmul>
 8009d14:	a368      	add	r3, pc, #416	; (adr r3, 8009eb8 <atan+0x2e0>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fab7 	bl	800028c <__adddf3>
 8009d1e:	4642      	mov	r2, r8
 8009d20:	464b      	mov	r3, r9
 8009d22:	f7f6 fc69 	bl	80005f8 <__aeabi_dmul>
 8009d26:	a366      	add	r3, pc, #408	; (adr r3, 8009ec0 <atan+0x2e8>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fc60 	bl	80005f8 <__aeabi_dmul>
 8009d38:	a363      	add	r3, pc, #396	; (adr r3, 8009ec8 <atan+0x2f0>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	f7f6 faa3 	bl	8000288 <__aeabi_dsub>
 8009d42:	4632      	mov	r2, r6
 8009d44:	463b      	mov	r3, r7
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	a361      	add	r3, pc, #388	; (adr r3, 8009ed0 <atan+0x2f8>)
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	f7f6 fa9a 	bl	8000288 <__aeabi_dsub>
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	f7f6 fc4e 	bl	80005f8 <__aeabi_dmul>
 8009d5c:	a35e      	add	r3, pc, #376	; (adr r3, 8009ed8 <atan+0x300>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fa91 	bl	8000288 <__aeabi_dsub>
 8009d66:	4632      	mov	r2, r6
 8009d68:	463b      	mov	r3, r7
 8009d6a:	f7f6 fc45 	bl	80005f8 <__aeabi_dmul>
 8009d6e:	a35c      	add	r3, pc, #368	; (adr r3, 8009ee0 <atan+0x308>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fa88 	bl	8000288 <__aeabi_dsub>
 8009d78:	4632      	mov	r2, r6
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	f7f6 fc3c 	bl	80005f8 <__aeabi_dmul>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4640      	mov	r0, r8
 8009d86:	4649      	mov	r1, r9
 8009d88:	f7f6 fa80 	bl	800028c <__adddf3>
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	462b      	mov	r3, r5
 8009d90:	f7f6 fc32 	bl	80005f8 <__aeabi_dmul>
 8009d94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	d14b      	bne.n	8009e36 <atan+0x25e>
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7f6 fa71 	bl	8000288 <__aeabi_dsub>
 8009da6:	e72c      	b.n	8009c02 <atan+0x2a>
 8009da8:	ee10 0a10 	vmov	r0, s0
 8009dac:	4b53      	ldr	r3, [pc, #332]	; (8009efc <atan+0x324>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7f6 fa69 	bl	8000288 <__aeabi_dsub>
 8009db6:	4b51      	ldr	r3, [pc, #324]	; (8009efc <atan+0x324>)
 8009db8:	4606      	mov	r6, r0
 8009dba:	460f      	mov	r7, r1
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f7f6 fa63 	bl	800028c <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fd3d 	bl	800084c <__aeabi_ddiv>
 8009dd2:	f04f 0a01 	mov.w	sl, #1
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	e764      	b.n	8009ca6 <atan+0xce>
 8009ddc:	4b49      	ldr	r3, [pc, #292]	; (8009f04 <atan+0x32c>)
 8009dde:	429e      	cmp	r6, r3
 8009de0:	da1d      	bge.n	8009e1e <atan+0x246>
 8009de2:	ee10 0a10 	vmov	r0, s0
 8009de6:	4b48      	ldr	r3, [pc, #288]	; (8009f08 <atan+0x330>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7f6 fa4c 	bl	8000288 <__aeabi_dsub>
 8009df0:	4b45      	ldr	r3, [pc, #276]	; (8009f08 <atan+0x330>)
 8009df2:	4606      	mov	r6, r0
 8009df4:	460f      	mov	r7, r1
 8009df6:	2200      	movs	r2, #0
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 fbfc 	bl	80005f8 <__aeabi_dmul>
 8009e00:	4b3e      	ldr	r3, [pc, #248]	; (8009efc <atan+0x324>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	f7f6 fa42 	bl	800028c <__adddf3>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7f6 fd1c 	bl	800084c <__aeabi_ddiv>
 8009e14:	f04f 0a02 	mov.w	sl, #2
 8009e18:	4604      	mov	r4, r0
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	e743      	b.n	8009ca6 <atan+0xce>
 8009e1e:	462b      	mov	r3, r5
 8009e20:	ee10 2a10 	vmov	r2, s0
 8009e24:	4939      	ldr	r1, [pc, #228]	; (8009f0c <atan+0x334>)
 8009e26:	2000      	movs	r0, #0
 8009e28:	f7f6 fd10 	bl	800084c <__aeabi_ddiv>
 8009e2c:	f04f 0a03 	mov.w	sl, #3
 8009e30:	4604      	mov	r4, r0
 8009e32:	460d      	mov	r5, r1
 8009e34:	e737      	b.n	8009ca6 <atan+0xce>
 8009e36:	4b36      	ldr	r3, [pc, #216]	; (8009f10 <atan+0x338>)
 8009e38:	4e36      	ldr	r6, [pc, #216]	; (8009f14 <atan+0x33c>)
 8009e3a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 fa21 	bl	8000288 <__aeabi_dsub>
 8009e46:	4622      	mov	r2, r4
 8009e48:	462b      	mov	r3, r5
 8009e4a:	f7f6 fa1d 	bl	8000288 <__aeabi_dsub>
 8009e4e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009e5a:	f7f6 fa15 	bl	8000288 <__aeabi_dsub>
 8009e5e:	f1bb 0f00 	cmp.w	fp, #0
 8009e62:	4604      	mov	r4, r0
 8009e64:	460d      	mov	r5, r1
 8009e66:	f6bf aed6 	bge.w	8009c16 <atan+0x3e>
 8009e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e6e:	461d      	mov	r5, r3
 8009e70:	e6d1      	b.n	8009c16 <atan+0x3e>
 8009e72:	a51d      	add	r5, pc, #116	; (adr r5, 8009ee8 <atan+0x310>)
 8009e74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e78:	e6cd      	b.n	8009c16 <atan+0x3e>
 8009e7a:	bf00      	nop
 8009e7c:	f3af 8000 	nop.w
 8009e80:	54442d18 	.word	0x54442d18
 8009e84:	bff921fb 	.word	0xbff921fb
 8009e88:	8800759c 	.word	0x8800759c
 8009e8c:	7e37e43c 	.word	0x7e37e43c
 8009e90:	e322da11 	.word	0xe322da11
 8009e94:	3f90ad3a 	.word	0x3f90ad3a
 8009e98:	24760deb 	.word	0x24760deb
 8009e9c:	3fa97b4b 	.word	0x3fa97b4b
 8009ea0:	a0d03d51 	.word	0xa0d03d51
 8009ea4:	3fb10d66 	.word	0x3fb10d66
 8009ea8:	c54c206e 	.word	0xc54c206e
 8009eac:	3fb745cd 	.word	0x3fb745cd
 8009eb0:	920083ff 	.word	0x920083ff
 8009eb4:	3fc24924 	.word	0x3fc24924
 8009eb8:	5555550d 	.word	0x5555550d
 8009ebc:	3fd55555 	.word	0x3fd55555
 8009ec0:	2c6a6c2f 	.word	0x2c6a6c2f
 8009ec4:	bfa2b444 	.word	0xbfa2b444
 8009ec8:	52defd9a 	.word	0x52defd9a
 8009ecc:	3fadde2d 	.word	0x3fadde2d
 8009ed0:	af749a6d 	.word	0xaf749a6d
 8009ed4:	3fb3b0f2 	.word	0x3fb3b0f2
 8009ed8:	fe231671 	.word	0xfe231671
 8009edc:	3fbc71c6 	.word	0x3fbc71c6
 8009ee0:	9998ebc4 	.word	0x9998ebc4
 8009ee4:	3fc99999 	.word	0x3fc99999
 8009ee8:	54442d18 	.word	0x54442d18
 8009eec:	3ff921fb 	.word	0x3ff921fb
 8009ef0:	440fffff 	.word	0x440fffff
 8009ef4:	7ff00000 	.word	0x7ff00000
 8009ef8:	3fdbffff 	.word	0x3fdbffff
 8009efc:	3ff00000 	.word	0x3ff00000
 8009f00:	3ff2ffff 	.word	0x3ff2ffff
 8009f04:	40038000 	.word	0x40038000
 8009f08:	3ff80000 	.word	0x3ff80000
 8009f0c:	bff00000 	.word	0xbff00000
 8009f10:	0800a348 	.word	0x0800a348
 8009f14:	0800a328 	.word	0x0800a328

08009f18 <fabs>:
 8009f18:	ec51 0b10 	vmov	r0, r1, d0
 8009f1c:	ee10 2a10 	vmov	r2, s0
 8009f20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f24:	ec43 2b10 	vmov	d0, r2, r3
 8009f28:	4770      	bx	lr
	...

08009f2c <_init>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr

08009f38 <_fini>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr
