
cubemx_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800a548  0800a548  0001a548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a968  0800a968  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a968  0800a968  0001a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a970  0800a970  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a970  0800a970  0001a970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0800a978  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c0  2**0
                  CONTENTS
 10 .bss          000002a0  200002c0  200002c0  000202c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000560  20000560  000202c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012100  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002652  00000000  00000000  00032433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001100  00000000  00000000  00034a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d6c  00000000  00000000  00035b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f96  00000000  00000000  000368f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014daf  00000000  00000000  0005a88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd19a  00000000  00000000  0006f639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a60  00000000  00000000  0014c7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00152234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a52c 	.word	0x0800a52c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0800a52c 	.word	0x0800a52c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MPU9250_Init>:
        .R_measure = 0.03f
};


uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af04      	add	r7, sp, #16
 8000eaa:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDR, WHO_AM_I_MPU9250, 1, &check, 1, i2c_timeout);
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	f107 030f 	add.w	r3, r7, #15
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	2275      	movs	r2, #117	; 0x75
 8000ebe:	21d0      	movs	r1, #208	; 0xd0
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f002 f8ed 	bl	80030a0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b68      	cmp	r3, #104	; 0x68
 8000eca:	d14f      	bne.n	8000f6c <MPU9250_Init+0xc8>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f107 030e 	add.w	r3, r7, #14
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	226b      	movs	r2, #107	; 0x6b
 8000ee2:	21d0      	movs	r1, #208	; 0xd0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 ffe1 	bl	8002eac <HAL_I2C_Mem_Write>
        HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f001 f896 	bl	800201c <HAL_Delay>


        Data = 0x01;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73bb      	strb	r3, [r7, #14]
	    HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, PWR_MGMT_1, 1, &Data, 1, i2c_timeout);
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	f107 030e 	add.w	r3, r7, #14
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2301      	movs	r3, #1
 8000f04:	226b      	movs	r2, #107	; 0x6b
 8000f06:	21d0      	movs	r1, #208	; 0xd0
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f001 ffcf 	bl	8002eac <HAL_I2C_Mem_Write>
        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, SMPLRT_DIV, 1, &Data, 1, i2c_timeout);
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	f107 030e 	add.w	r3, r7, #14
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	2219      	movs	r2, #25
 8000f24:	21d0      	movs	r1, #208	; 0xd0
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f001 ffc0 	bl	8002eac <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, ACCEL_CONFIG, 1, &Data, 1, i2c_timeout);
 8000f30:	2364      	movs	r3, #100	; 0x64
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	f107 030e 	add.w	r3, r7, #14
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	221c      	movs	r2, #28
 8000f42:	21d0      	movs	r1, #208	; 0xd0
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f001 ffb1 	bl	8002eac <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDR, GYRO_CONFIG, 1, &Data, 1, i2c_timeout);
 8000f4e:	2364      	movs	r3, #100	; 0x64
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	f107 030e 	add.w	r3, r7, #14
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	221b      	movs	r2, #27
 8000f60:	21d0      	movs	r1, #208	; 0xd0
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f001 ffa2 	bl	8002eac <HAL_I2C_Mem_Write>
        return 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <MPU9250_Init+0xca>
    }
    return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <MPU9250_Read_All>:
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
}

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f7c:	b094      	sub	sp, #80	; 0x50
 8000f7e:	af04      	add	r7, sp, #16
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	double yaw;
	double pitch;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDR, ACCEL_XOUT_H, 1, Rec_Data, 14, i2c_timeout);
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	230e      	movs	r3, #14
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	223b      	movs	r2, #59	; 0x3b
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f002 f881 	bl	80030a0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8000f9e:	7a3b      	ldrb	r3, [r7, #8]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	7a7b      	ldrb	r3, [r7, #9]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000fb0:	7abb      	ldrb	r3, [r7, #10]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8000fc2:	7b3b      	ldrb	r3, [r7, #12]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	7b7b      	ldrb	r3, [r7, #13]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	809a      	strh	r2, [r3, #4]

    //temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);

    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8000fd4:	7c3b      	ldrb	r3, [r7, #16]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	7c7b      	ldrb	r3, [r7, #17]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8000fe6:	7cbb      	ldrb	r3, [r7, #18]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7cfb      	ldrb	r3, [r7, #19]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8000ff8:	7d3b      	ldrb	r3, [r7, #20]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21a      	sxth	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	849a      	strh	r2, [r3, #36]	; 0x24
    	Ayaver = Axsum/500.;
    	flag = 1;
    	DataStruct->Accel_X_RAW  = DataStruct->Accel_X_RAW  - Axaver;
    	DataStruct->Accel_Y_RAW  = DataStruct->Accel_Y_RAW  - Ayaver;
    }*/
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa87 	bl	8000524 <__aeabi_i2d>
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4bb9      	ldr	r3, [pc, #740]	; (8001300 <MPU9250_Read_All+0x388>)
 800101c:	f7ff fc16 	bl	800084c <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa77 	bl	8000524 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4bb1      	ldr	r3, [pc, #708]	; (8001300 <MPU9250_Read_All+0x388>)
 800103c:	f7ff fc06 	bl	800084c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	6839      	ldr	r1, [r7, #0]
 8001046:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / 16384.0;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa67 	bl	8000524 <__aeabi_i2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4ba9      	ldr	r3, [pc, #676]	; (8001300 <MPU9250_Read_All+0x388>)
 800105c:	f7ff fbf6 	bl	800084c <__aeabi_ddiv>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	6839      	ldr	r1, [r7, #0]
 8001066:	e9c1 2306 	strd	r2, r3, [r1, #24]

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa57 	bl	8000524 <__aeabi_i2d>
 8001076:	a39e      	add	r3, pc, #632	; (adr r3, 80012f0 <MPU9250_Read_All+0x378>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fbe6 	bl	800084c <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa47 	bl	8000524 <__aeabi_i2d>
 8001096:	a396      	add	r3, pc, #600	; (adr r3, 80012f0 <MPU9250_Read_All+0x378>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fbd6 	bl	800084c <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa37 	bl	8000524 <__aeabi_i2d>
 80010b6:	a38e      	add	r3, pc, #568	; (adr r3, 80012f0 <MPU9250_Read_All+0x378>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fbc6 	bl	800084c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	6839      	ldr	r1, [r7, #0]
 80010c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    // DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
    // Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer_1) / 1000;
 80010ca:	f000 ff9b 	bl	8002004 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	4b8c      	ldr	r3, [pc, #560]	; (8001304 <MPU9250_Read_All+0x38c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa14 	bl	8000504 <__aeabi_ui2d>
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b89      	ldr	r3, [pc, #548]	; (8001308 <MPU9250_Read_All+0x390>)
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer_1 = HAL_GetTick();
 80010ee:	f000 ff89 	bl	8002004 <HAL_GetTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a83      	ldr	r2, [pc, #524]	; (8001304 <MPU9250_Read_All+0x38c>)
 80010f6:	6013      	str	r3, [r2, #0]
	DataStruct->sdt = dt;
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010fe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58


	double roll_sqrt = sqrt(DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001108:	461a      	mov	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001110:	fb03 f202 	mul.w	r2, r3, r2
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800111a:	4619      	mov	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001122:	fb01 f303 	mul.w	r3, r1, r3
 8001126:	4413      	add	r3, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9fb 	bl	8000524 <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	ec43 2b10 	vmov	d0, r2, r3
 8001136:	f008 fe7f 	bl	8009e38 <sqrt>
 800113a:	ed87 0b08 	vstr	d0, [r7, #32]
	//double roll_sqrt_cal =  sqrt(0.2*(DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW) + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
	pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	425b      	negs	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9ec 	bl	8000524 <__aeabi_i2d>
 800114c:	4682      	mov	sl, r0
 800114e:	468b      	mov	fp, r1
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9e4 	bl	8000524 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	ec43 2b11 	vmov	d1, r2, r3
 8001164:	ec4b ab10 	vmov	d0, sl, fp
 8001168:	f008 fe64 	bl	8009e34 <atan2>
 800116c:	ec51 0b10 	vmov	r0, r1, d0
 8001170:	a361      	add	r3, pc, #388	; (adr r3, 80012f8 <MPU9250_Read_All+0x380>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa3f 	bl	80005f8 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	if (roll_sqrt != 0.0)
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800118e:	f7ff fc9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d119      	bne.n	80011cc <MPU9250_Read_All+0x254>
	{
		roll = atan2(DataStruct->Accel_Y_RAW , roll_sqrt) * RAD_TO_DEG;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c0 	bl	8000524 <__aeabi_i2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ed97 1b08 	vldr	d1, [r7, #32]
 80011ac:	ec43 2b10 	vmov	d0, r2, r3
 80011b0:	f008 fe40 	bl	8009e34 <atan2>
 80011b4:	ec51 0b10 	vmov	r0, r1, d0
 80011b8:	a34f      	add	r3, pc, #316	; (adr r3, 80012f8 <MPU9250_Read_All+0x380>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa1b 	bl	80005f8 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80011ca:	e005      	b.n	80011d8 <MPU9250_Read_All+0x260>
	}
	else
	{
		roll = 0.0;
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}


	if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <MPU9250_Read_All+0x394>)
 80011de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011e2:	f7ff fc7b 	bl	8000adc <__aeabi_dcmplt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00a      	beq.n	8001202 <MPU9250_Read_All+0x28a>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b46      	ldr	r3, [pc, #280]	; (8001310 <MPU9250_Read_All+0x398>)
 80011f8:	f7ff fc8e 	bl	8000b18 <__aeabi_dcmpgt>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d114      	bne.n	800122c <MPU9250_Read_All+0x2b4>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MPU9250_Read_All+0x398>)
 8001208:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800120c:	f7ff fc84 	bl	8000b18 <__aeabi_dcmpgt>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d015      	beq.n	8001242 <MPU9250_Read_All+0x2ca>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b3a      	ldr	r3, [pc, #232]	; (800130c <MPU9250_Read_All+0x394>)
 8001222:	f7ff fc5b 	bl	8000adc <__aeabi_dcmplt>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00a      	beq.n	8001242 <MPU9250_Read_All+0x2ca>
	{
		KalmanY_1.angle = pitch;
 800122c:	4939      	ldr	r1, [pc, #228]	; (8001314 <MPU9250_Read_All+0x39c>)
 800122e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001232:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800123c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8001240:	e014      	b.n	800126c <MPU9250_Read_All+0x2f4>
	}
	else
	{
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY_1, pitch, DataStruct->Gy, dt);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001248:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800124c:	eeb0 1a47 	vmov.f32	s2, s14
 8001250:	eef0 1a67 	vmov.f32	s3, s15
 8001254:	ed97 0b06 	vldr	d0, [r7, #24]
 8001258:	482e      	ldr	r0, [pc, #184]	; (8001314 <MPU9250_Read_All+0x39c>)
 800125a:	f000 f897 	bl	800138c <Kalman_getAngle>
 800125e:	eeb0 7a40 	vmov.f32	s14, s0
 8001262:	eef0 7a60 	vmov.f32	s15, s1
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001272:	4690      	mov	r8, r2
 8001274:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MPU9250_Read_All+0x398>)
 800127e:	4640      	mov	r0, r8
 8001280:	4649      	mov	r1, r9
 8001282:	f7ff fc49 	bl	8000b18 <__aeabi_dcmpgt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <MPU9250_Read_All+0x326>
		DataStruct->Gx = -DataStruct->Gx;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001292:	4614      	mov	r4, r2
 8001294:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	if(DataStruct->Accel_Z_RAW != 0)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d037      	beq.n	8001318 <MPU9250_Read_All+0x3a0>
	{
		yaw = atan2(DataStruct->Accel_Z_RAW, DataStruct->Accel_X_RAW) * RAD_TO_DEG;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f938 	bl	8000524 <__aeabi_i2d>
 80012b4:	4604      	mov	r4, r0
 80012b6:	460d      	mov	r5, r1
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f930 	bl	8000524 <__aeabi_i2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	ec43 2b11 	vmov	d1, r2, r3
 80012cc:	ec45 4b10 	vmov	d0, r4, r5
 80012d0:	f008 fdb0 	bl	8009e34 <atan2>
 80012d4:	ec51 0b10 	vmov	r0, r1, d0
 80012d8:	a307      	add	r3, pc, #28	; (adr r3, 80012f8 <MPU9250_Read_All+0x380>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f98b 	bl	80005f8 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80012ea:	e01b      	b.n	8001324 <MPU9250_Read_All+0x3ac>
 80012ec:	f3af 8000 	nop.w
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40606000 	.word	0x40606000
 80012f8:	1a63c1f8 	.word	0x1a63c1f8
 80012fc:	404ca5dc 	.word	0x404ca5dc
 8001300:	40d00000 	.word	0x40d00000
 8001304:	200002dc 	.word	0x200002dc
 8001308:	408f4000 	.word	0x408f4000
 800130c:	c0568000 	.word	0xc0568000
 8001310:	40568000 	.word	0x40568000
 8001314:	20000048 	.word	0x20000048
	}
	else
	{
		yaw = 0.0;
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX_1, roll, DataStruct->Gx, dt);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800132a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800132e:	eeb0 1a47 	vmov.f32	s2, s14
 8001332:	eef0 1a67 	vmov.f32	s3, s15
 8001336:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800133a:	4812      	ldr	r0, [pc, #72]	; (8001384 <MPU9250_Read_All+0x40c>)
 800133c:	f000 f826 	bl	800138c <Kalman_getAngle>
 8001340:	eeb0 7a40 	vmov.f32	s14, s0
 8001344:	eef0 7a60 	vmov.f32	s15, s1
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	DataStruct->KalmanAngleZ = Kalman_getAngle(&KalmanZ_1, yaw, DataStruct->Gz, dt);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001354:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001358:	eeb0 1a47 	vmov.f32	s2, s14
 800135c:	eef0 1a67 	vmov.f32	s3, s15
 8001360:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <MPU9250_Read_All+0x410>)
 8001366:	f000 f811 	bl	800138c <Kalman_getAngle>
 800136a:	eeb0 7a40 	vmov.f32	s14, s0
 800136e:	eef0 7a60 	vmov.f32	s15, s1
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
}
 8001378:	bf00      	nop
 800137a:	3740      	adds	r7, #64	; 0x40
 800137c:	46bd      	mov	sp, r7
 800137e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000
 8001388:	20000090 	.word	0x20000090

0800138c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b096      	sub	sp, #88	; 0x58
 8001390:	af00      	add	r7, sp, #0
 8001392:	61f8      	str	r0, [r7, #28]
 8001394:	ed87 0b04 	vstr	d0, [r7, #16]
 8001398:	ed87 1b02 	vstr	d1, [r7, #8]
 800139c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80013a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013aa:	f7fe ff6d 	bl	8000288 <__aeabi_dsub>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80013c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c4:	f7ff f918 	bl	80005f8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7fe ff5c 	bl	800028c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	69f9      	ldr	r1, [r7, #28]
 80013da:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80013ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ee:	f7ff f903 	bl	80005f8 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001400:	f7fe ff42 	bl	8000288 <__aeabi_dsub>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001412:	f7fe ff39 	bl	8000288 <__aeabi_dsub>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7fe ff32 	bl	800028c <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001434:	f7ff f8e0 	bl	80005f8 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe ff24 	bl	800028c <__adddf3>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	69f9      	ldr	r1, [r7, #28]
 800144a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800145a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800145e:	f7ff f8cb 	bl	80005f8 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7fe ff0d 	bl	8000288 <__aeabi_dsub>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	69f9      	ldr	r1, [r7, #28]
 8001474:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001488:	f7ff f8b6 	bl	80005f8 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7fe fef8 	bl	8000288 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	69f9      	ldr	r1, [r7, #28]
 800149e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b2:	f7ff f8a1 	bl	80005f8 <__aeabi_dmul>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4620      	mov	r0, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	f7fe fee5 	bl	800028c <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	69f9      	ldr	r1, [r7, #28]
 80014c8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014d8:	f7fe fed8 	bl	800028c <__adddf3>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014ee:	f7ff f9ad 	bl	800084c <__aeabi_ddiv>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001500:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001504:	f7ff f9a2 	bl	800084c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800151a:	f7fe feb5 	bl	8000288 <__aeabi_dsub>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800152c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001530:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001534:	f7ff f860 	bl	80005f8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7fe fea4 	bl	800028c <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	69f9      	ldr	r1, [r7, #28]
 800154a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001554:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001558:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800155c:	f7ff f84c 	bl	80005f8 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4620      	mov	r0, r4
 8001566:	4629      	mov	r1, r5
 8001568:	f7fe fe90 	bl	800028c <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	69f9      	ldr	r1, [r7, #28]
 8001572:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800157c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001586:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001598:	f7ff f82e 	bl	80005f8 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fe70 	bl	8000288 <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	69f9      	ldr	r1, [r7, #28]
 80015ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015c0:	f7ff f81a 	bl	80005f8 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4620      	mov	r0, r4
 80015ca:	4629      	mov	r1, r5
 80015cc:	f7fe fe5c 	bl	8000288 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	69f9      	ldr	r1, [r7, #28]
 80015d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80015e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015e8:	f7ff f806 	bl	80005f8 <__aeabi_dmul>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7fe fe48 	bl	8000288 <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	69f9      	ldr	r1, [r7, #28]
 80015fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001608:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800160c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001610:	f7fe fff2 	bl	80005f8 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7fe fe34 	bl	8000288 <__aeabi_dsub>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	69f9      	ldr	r1, [r7, #28]
 8001626:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001630:	ec43 2b17 	vmov	d7, r2, r3
};
 8001634:	eeb0 0a47 	vmov.f32	s0, s14
 8001638:	eef0 0a67 	vmov.f32	s1, s15
 800163c:	3758      	adds	r7, #88	; 0x58
 800163e:	46bd      	mov	sp, r7
 8001640:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001644 <MX_I2C1_Init>:

extern I2C_HandleTypeDef hi2c1;
static void MX_I2C1_Init(void);

static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x50>)
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <MX_I2C1_Init+0x54>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C1_Init+0x50>)
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_I2C1_Init+0x58>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_I2C1_Init+0x50>)
 8001662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MX_I2C1_Init+0x50>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_I2C1_Init+0x50>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <MX_I2C1_Init+0x50>)
 8001682:	f001 fab9 	bl	8002bf8 <HAL_I2C_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800168c:	f000 f9dc 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000328 	.word	0x20000328
 8001698:	40005400 	.word	0x40005400
 800169c:	000186a0 	.word	0x000186a0

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b09e      	sub	sp, #120	; 0x78
 80016a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a6:	f000 fc47 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016aa:	f000 f82d 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ae:	f000 f95f 	bl	8001970 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b2:	f7ff ffc7 	bl	8001644 <MX_I2C1_Init>
  MX_TIM7_Init();
 80016b6:	f000 f8fb 	bl	80018b0 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80016ba:	f000 f92f 	bl	800191c <MX_USART2_UART_Init>
  MX_ADC3_Init();
 80016be:	f000 f8a5 	bl	800180c <MX_ADC3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80016c2:	f000 f87f 	bl	80017c4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_t mpu9250;
  MPU9250_Init(&hi2c1);
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <main+0x60>)
 80016c8:	f7ff fbec 	bl	8000ea4 <MPU9250_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	MPU9250_Read_All(&hi2c1, &mpu9250);
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	; (8001700 <main+0x60>)
 80016d2:	f7ff fc51 	bl	8000f78 <MPU9250_Read_All>
	HAL_Delay(500);
 80016d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016da:	f000 fc9f 	bl	800201c <HAL_Delay>
	printf("pitch: %lf roll: %lf yaw: %lf \r\n", mpu9250.KalmanAngleX, mpu9250.KalmanAngleY, mpu9250.KalmanAngleZ);
 80016de:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80016e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016ee:	e9cd 2300 	strd	r2, r3, [sp]
 80016f2:	4622      	mov	r2, r4
 80016f4:	462b      	mov	r3, r5
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <main+0x64>)
 80016f8:	f006 fbf2 	bl	8007ee0 <iprintf>
	MPU9250_Read_All(&hi2c1, &mpu9250);
 80016fc:	e7e6      	b.n	80016cc <main+0x2c>
 80016fe:	bf00      	nop
 8001700:	20000328 	.word	0x20000328
 8001704:	0800a548 	.word	0x0800a548

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	; 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2230      	movs	r2, #48	; 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f006 fc37 	bl	8007f8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <SystemClock_Config+0xb4>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a21      	ldr	r2, [pc, #132]	; (80017bc <SystemClock_Config+0xb4>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <SystemClock_Config+0xb4>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <SystemClock_Config+0xb8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <SystemClock_Config+0xb8>)
 8001752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <SystemClock_Config+0xb8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001764:	2301      	movs	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800176e:	2300      	movs	r3, #0
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	4618      	mov	r0, r3
 8001778:	f003 ff4c 	bl	8005614 <HAL_RCC_OscConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001782:	f000 f961 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001786:	230f      	movs	r3, #15
 8001788:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800178a:	2301      	movs	r3, #1
 800178c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f9ae 	bl	8005b04 <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017ae:	f000 f94b 	bl	8001a48 <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3750      	adds	r7, #80	; 0x50
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000

080017c4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2037      	movs	r0, #55	; 0x37
 80017ce:	f000 ff86 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017d2:	2037      	movs	r0, #55	; 0x37
 80017d4:	f000 ff9f 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2020      	movs	r0, #32
 80017de:	f000 ff7e 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017e2:	2020      	movs	r0, #32
 80017e4:	f000 ff97 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	201f      	movs	r0, #31
 80017ee:	f000 ff76 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017f2:	201f      	movs	r0, #31
 80017f4:	f000 ff8f 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2026      	movs	r0, #38	; 0x26
 80017fe:	f000 ff6e 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001802:	2026      	movs	r0, #38	; 0x26
 8001804:	f000 ff87 	bl	8002716 <HAL_NVIC_EnableIRQ>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <MX_ADC3_Init+0x9c>)
 8001822:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <MX_ADC3_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_ADC3_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001846:	2200      	movs	r2, #0
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_ADC3_Init+0x98>)
 800184c:	4a17      	ldr	r2, [pc, #92]	; (80018ac <MX_ADC3_Init+0xa0>)
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_ADC3_Init+0x98>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001866:	2201      	movs	r2, #1
 8001868:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_ADC3_Init+0x98>)
 800186c:	f000 fbfa 	bl	8002064 <HAL_ADC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001876:	f000 f8e7 	bl	8001a48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800187a:	230b      	movs	r3, #11
 800187c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800187e:	2301      	movs	r3, #1
 8001880:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <MX_ADC3_Init+0x98>)
 800188c:	f000 fc2e 	bl	80020ec <HAL_ADC_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001896:	f000 f8d7 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002e0 	.word	0x200002e0
 80018a8:	40012200 	.word	0x40012200
 80018ac:	0f000001 	.word	0x0f000001

080018b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_TIM7_Init+0x64>)
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <MX_TIM7_Init+0x68>)
 80018c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000;
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <MX_TIM7_Init+0x64>)
 80018c6:	f242 3228 	movw	r2, #9000	; 0x2328
 80018ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_TIM7_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 300;
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <MX_TIM7_Init+0x64>)
 80018d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_TIM7_Init+0x64>)
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_TIM7_Init+0x64>)
 80018e2:	f004 fb2f 	bl	8005f44 <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80018ec:	f000 f8ac 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_TIM7_Init+0x64>)
 80018fe:	f004 fd35 	bl	800636c <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001908:	f000 f89e 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000037c 	.word	0x2000037c
 8001918:	40001400 	.word	0x40001400

0800191c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <MX_USART2_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_USART2_UART_Init+0x4c>)
 8001954:	f004 fd9a 	bl	800648c <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f000 f873 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200003c4 	.word	0x200003c4
 800196c:	40004400 	.word	0x40004400

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <MX_GPIO_Init+0x84>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <MX_GPIO_Init+0x84>)
 8001980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <MX_GPIO_Init+0x84>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_GPIO_Init+0x84>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <MX_GPIO_Init+0x84>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_GPIO_Init+0x84>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <MX_GPIO_Init+0x84>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <MX_GPIO_Init+0x84>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <MX_GPIO_Init+0x84>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_GPIO_Init+0x84>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <MX_GPIO_Init+0x84>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_GPIO_Init+0x84>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if (htim == &htim7) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d104      	bne.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a0e:	f001 f8d9 	bl	8002bc4 <HAL_GPIO_TogglePin>
  }
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000037c 	.word	0x2000037c
 8001a20:	40020c00 	.word	0x40020c00

08001a24 <__io_putchar>:

int __io_putchar (int ch)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8001a2c:	1d39      	adds	r1, r7, #4
 8001a2e:	2364      	movs	r3, #100	; 0x64
 8001a30:	2201      	movs	r2, #1
 8001a32:	4804      	ldr	r0, [pc, #16]	; (8001a44 <__io_putchar+0x20>)
 8001a34:	f004 fd7a 	bl	800652c <HAL_UART_Transmit>
  return ch;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200003c4 	.word	0x200003c4

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <Error_Handler+0x8>
	...

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_ADC_MspInit+0x7c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d127      	bne.n	8001b16 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_ADC_MspInit+0x80>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <HAL_ADC_MspInit+0x80>)
 8001ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_ADC_MspInit+0x80>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_ADC_MspInit+0x80>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <HAL_ADC_MspInit+0x80>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_ADC_MspInit+0x80>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001afe:	2302      	movs	r3, #2
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b02:	2303      	movs	r3, #3
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <HAL_ADC_MspInit+0x84>)
 8001b12:	f000 febb 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40012200 	.word	0x40012200
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020800 	.word	0x40020800

08001b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_I2C_MspInit+0x84>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12b      	bne.n	8001ba6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6a:	23c0      	movs	r3, #192	; 0xc0
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6e:	2312      	movs	r3, #18
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <HAL_I2C_MspInit+0x8c>)
 8001b86:	f000 fe81 	bl	800288c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400

08001bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10d      	bne.n	8001bea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_TIM_Base_MspInit+0x40>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_TIM_Base_MspInit+0x40>)
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_TIM_Base_MspInit+0x40>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40001400 	.word	0x40001400
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_UART_MspInit+0x84>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d12b      	bne.n	8001c7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <HAL_UART_MspInit+0x88>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_UART_MspInit+0x88>)
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_UART_MspInit+0x88>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_UART_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <HAL_UART_MspInit+0x88>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_UART_MspInit+0x88>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <HAL_UART_MspInit+0x8c>)
 8001c76:	f000 fe09 	bl	800288c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40004400 	.word	0x40004400
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020000 	.word	0x40020000

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c94:	e7fe      	b.n	8001c94 <NMI_Handler+0x4>

08001c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <UsageFault_Handler+0x4>

08001cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cdc:	f000 f97e 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <I2C1_EV_IRQHandler+0x10>)
 8001cea:	f001 fc0b 	bl	8003504 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000328 	.word	0x20000328

08001cf8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <I2C1_ER_IRQHandler+0x10>)
 8001cfe:	f001 fd54 	bl	80037aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000328 	.word	0x20000328

08001d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART2_IRQHandler+0x10>)
 8001d12:	f004 fc97 	bl	8006644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200003c4 	.word	0x200003c4

08001d20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM7_IRQHandler+0x10>)
 8001d26:	f004 f95c 	bl	8005fe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000037c 	.word	0x2000037c

08001d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_kill>:

int _kill(int pid, int sig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d4e:	f006 f96f 	bl	8008030 <__errno>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2216      	movs	r2, #22
 8001d56:	601a      	str	r2, [r3, #0]
  return -1;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_exit>:

void _exit (int status)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffe7 	bl	8001d44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d76:	e7fe      	b.n	8001d76 <_exit+0x12>

08001d78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e00a      	b.n	8001da0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d8a:	f3af 8000 	nop.w
 8001d8e:	4601      	mov	r1, r0
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	60ba      	str	r2, [r7, #8]
 8001d96:	b2ca      	uxtb	r2, r1
 8001d98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbf0      	blt.n	8001d8a <_read+0x12>
  }

  return len;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	60f8      	str	r0, [r7, #12]
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e009      	b.n	8001dd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	60ba      	str	r2, [r7, #8]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fe29 	bl	8001a24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbf1      	blt.n	8001dc4 <_write+0x12>
  }
  return len;
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_close>:

int _close(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e12:	605a      	str	r2, [r3, #4]
  return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_isatty>:

int _isatty(int file)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f006 f8d4 	bl	8008030 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20020000 	.word	0x20020000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	2000040c 	.word	0x2000040c
 8001ebc:	20000560 	.word	0x20000560

08001ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ee8:	f7ff ffea 	bl	8001ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	; (8001f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	; (8001f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f006 f893 	bl	800803c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff fbc3 	bl	80016a0 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8001f28:	0800a978 	.word	0x0800a978
  ldr r2, =_sbss
 8001f2c:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8001f30:	20000560 	.word	0x20000560

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 fbb1 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	200f      	movs	r0, #15
 8001f68:	f000 f808 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fd72 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x54>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x58>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fbc9 	bl	8002732 <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00e      	b.n	8001fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d80a      	bhi.n	8001fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f000 fb91 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fbc:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <HAL_InitTick+0x5c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200000d8 	.word	0x200000d8
 8001fd4:	200000e0 	.word	0x200000e0
 8001fd8:	200000dc 	.word	0x200000dc

08001fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	200000e0 	.word	0x200000e0
 8002000:	20000410 	.word	0x20000410

08002004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000410 	.word	0x20000410

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200000e0 	.word	0x200000e0

08002064 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e033      	b.n	80020e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fd0e 	bl	8001aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d118      	bne.n	80020d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020aa:	f023 0302 	bic.w	r3, r3, #2
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f93a 	bl	8002330 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
 80020d2:	e001      	b.n	80020d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x1c>
 8002104:	2302      	movs	r3, #2
 8002106:	e105      	b.n	8002314 <HAL_ADC_ConfigChannel+0x228>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b09      	cmp	r3, #9
 8002116:	d925      	bls.n	8002164 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68d9      	ldr	r1, [r3, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	3b1e      	subs	r3, #30
 800212e:	2207      	movs	r2, #7
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43da      	mvns	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	400a      	ands	r2, r1
 800213c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	4603      	mov	r3, r0
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4403      	add	r3, r0
 8002156:	3b1e      	subs	r3, #30
 8002158:	409a      	lsls	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	e022      	b.n	80021aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6919      	ldr	r1, [r3, #16]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4413      	add	r3, r2
 8002178:	2207      	movs	r2, #7
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	4618      	mov	r0, r3
 800219a:	4603      	mov	r3, r0
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4403      	add	r3, r0
 80021a0:	409a      	lsls	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d824      	bhi.n	80021fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	3b05      	subs	r3, #5
 80021c4:	221f      	movs	r2, #31
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	3b05      	subs	r3, #5
 80021ee:	fa00 f203 	lsl.w	r2, r0, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
 80021fa:	e04c      	b.n	8002296 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	d824      	bhi.n	800224e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	3b23      	subs	r3, #35	; 0x23
 8002216:	221f      	movs	r2, #31
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43da      	mvns	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	400a      	ands	r2, r1
 8002224:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	3b23      	subs	r3, #35	; 0x23
 8002240:	fa00 f203 	lsl.w	r2, r0, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
 800224c:	e023      	b.n	8002296 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	3b41      	subs	r3, #65	; 0x41
 8002260:	221f      	movs	r2, #31
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b41      	subs	r3, #65	; 0x41
 800228a:	fa00 f203 	lsl.w	r2, r0, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_ADC_ConfigChannel+0x234>)
 8002298:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_ADC_ConfigChannel+0x238>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d109      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1cc>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b12      	cmp	r3, #18
 80022aa:	d105      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_ADC_ConfigChannel+0x238>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d123      	bne.n	800230a <HAL_ADC_ConfigChannel+0x21e>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d003      	beq.n	80022d2 <HAL_ADC_ConfigChannel+0x1e6>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b11      	cmp	r3, #17
 80022d0:	d11b      	bne.n	800230a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d111      	bne.n	800230a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_ADC_ConfigChannel+0x23c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_ADC_ConfigChannel+0x240>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	0c9a      	lsrs	r2, r3, #18
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022fc:	e002      	b.n	8002304 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3b01      	subs	r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f9      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	40012300 	.word	0x40012300
 8002324:	40012000 	.word	0x40012000
 8002328:	200000d8 	.word	0x200000d8
 800232c:	431bde83 	.word	0x431bde83

08002330 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002338:	4b79      	ldr	r3, [pc, #484]	; (8002520 <ADC_Init+0x1f0>)
 800233a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	431a      	orrs	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	4a58      	ldr	r2, [pc, #352]	; (8002524 <ADC_Init+0x1f4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d022      	beq.n	800240e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6899      	ldr	r1, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6899      	ldr	r1, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	e00f      	b.n	800242e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800241c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800242c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0202 	bic.w	r2, r2, #2
 800243c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7e1b      	ldrb	r3, [r3, #24]
 8002448:	005a      	lsls	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01b      	beq.n	8002494 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800247a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	3b01      	subs	r3, #1
 8002488:	035a      	lsls	r2, r3, #13
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	e007      	b.n	80024a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	3b01      	subs	r3, #1
 80024c0:	051a      	lsls	r2, r3, #20
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024e6:	025a      	lsls	r2, r3, #9
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	029a      	lsls	r2, r3, #10
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40012300 	.word	0x40012300
 8002524:	0f000001 	.word	0x0f000001

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60d3      	str	r3, [r2, #12]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	; (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff3e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff8e 	bl	800261c <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5d 	bl	80025c8 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff31 	bl	800258c <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff fc54 	bl	8002004 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d008      	beq.n	800277c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e052      	b.n	8002822 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0216 	bic.w	r2, r2, #22
 800278a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800279a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <HAL_DMA_Abort+0x62>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0208 	bic.w	r2, r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027cc:	e013      	b.n	80027f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ce:	f7ff fc19 	bl	8002004 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d90c      	bls.n	80027f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2203      	movs	r2, #3
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e015      	b.n	8002822 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1e4      	bne.n	80027ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	223f      	movs	r2, #63	; 0x3f
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d004      	beq.n	8002848 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e00c      	b.n	8002862 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2205      	movs	r2, #5
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287c:	b2db      	uxtb	r3, r3
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e16b      	b.n	8002b80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 815a 	bne.w	8002b7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d005      	beq.n	80028de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d130      	bne.n	8002940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 0201 	and.w	r2, r3, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b03      	cmp	r3, #3
 800294a:	d017      	beq.n	800297c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d123      	bne.n	80029d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80b4 	beq.w	8002b7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b60      	ldr	r3, [pc, #384]	; (8002b98 <HAL_GPIO_Init+0x30c>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a5f      	ldr	r2, [pc, #380]	; (8002b98 <HAL_GPIO_Init+0x30c>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b5d      	ldr	r3, [pc, #372]	; (8002b98 <HAL_GPIO_Init+0x30c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2e:	4a5b      	ldr	r2, [pc, #364]	; (8002b9c <HAL_GPIO_Init+0x310>)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_GPIO_Init+0x314>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d02b      	beq.n	8002ab2 <HAL_GPIO_Init+0x226>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a51      	ldr	r2, [pc, #324]	; (8002ba4 <HAL_GPIO_Init+0x318>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d025      	beq.n	8002aae <HAL_GPIO_Init+0x222>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a50      	ldr	r2, [pc, #320]	; (8002ba8 <HAL_GPIO_Init+0x31c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01f      	beq.n	8002aaa <HAL_GPIO_Init+0x21e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4f      	ldr	r2, [pc, #316]	; (8002bac <HAL_GPIO_Init+0x320>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d019      	beq.n	8002aa6 <HAL_GPIO_Init+0x21a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4e      	ldr	r2, [pc, #312]	; (8002bb0 <HAL_GPIO_Init+0x324>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_GPIO_Init+0x216>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4d      	ldr	r2, [pc, #308]	; (8002bb4 <HAL_GPIO_Init+0x328>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00d      	beq.n	8002a9e <HAL_GPIO_Init+0x212>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4c      	ldr	r2, [pc, #304]	; (8002bb8 <HAL_GPIO_Init+0x32c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <HAL_GPIO_Init+0x20e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	; (8002bbc <HAL_GPIO_Init+0x330>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d101      	bne.n	8002a96 <HAL_GPIO_Init+0x20a>
 8002a92:	2307      	movs	r3, #7
 8002a94:	e00e      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002a96:	2308      	movs	r3, #8
 8002a98:	e00c      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e00a      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e008      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x228>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f002 0203 	and.w	r2, r2, #3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4093      	lsls	r3, r2
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac4:	4935      	ldr	r1, [pc, #212]	; (8002b9c <HAL_GPIO_Init+0x310>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_GPIO_Init+0x334>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af6:	4a32      	ldr	r2, [pc, #200]	; (8002bc0 <HAL_GPIO_Init+0x334>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002afc:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <HAL_GPIO_Init+0x334>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b20:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_GPIO_Init+0x334>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	f67f ae90 	bls.w	80028a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40021400 	.word	0x40021400
 8002bb8:	40021800 	.word	0x40021800
 8002bbc:	40021c00 	.word	0x40021c00
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	041a      	lsls	r2, r3, #16
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43d9      	mvns	r1, r3
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	400b      	ands	r3, r1
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e12b      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe ff84 	bl	8001b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c5c:	f003 f94a 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a81      	ldr	r2, [pc, #516]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d807      	bhi.n	8002c7c <HAL_I2C_Init+0x84>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <HAL_I2C_Init+0x278>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e006      	b.n	8002c8a <HAL_I2C_Init+0x92>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a7d      	ldr	r2, [pc, #500]	; (8002e74 <HAL_I2C_Init+0x27c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	bf94      	ite	ls
 8002c84:	2301      	movls	r3, #1
 8002c86:	2300      	movhi	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0e7      	b.n	8002e62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a78      	ldr	r2, [pc, #480]	; (8002e78 <HAL_I2C_Init+0x280>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d802      	bhi.n	8002ccc <HAL_I2C_Init+0xd4>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	e009      	b.n	8002ce0 <HAL_I2C_Init+0xe8>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <HAL_I2C_Init+0x284>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	3301      	adds	r3, #1
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cf2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	495c      	ldr	r1, [pc, #368]	; (8002e6c <HAL_I2C_Init+0x274>)
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d819      	bhi.n	8002d34 <HAL_I2C_Init+0x13c>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e59      	subs	r1, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0e:	1c59      	adds	r1, r3, #1
 8002d10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d14:	400b      	ands	r3, r1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_I2C_Init+0x138>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e59      	subs	r1, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	e051      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d30:	2304      	movs	r3, #4
 8002d32:	e04f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <HAL_I2C_Init+0x168>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e012      	b.n	8002d86 <HAL_I2C_Init+0x18e>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	0099      	lsls	r1, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Init+0x196>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <HAL_I2C_Init+0x1bc>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1e58      	subs	r0, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	440b      	add	r3, r1
 8002da4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db2:	e00f      	b.n	8002dd4 <HAL_I2C_Init+0x1dc>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	0099      	lsls	r1, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6809      	ldr	r1, [r1, #0]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6911      	ldr	r1, [r2, #16]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68d2      	ldr	r2, [r2, #12]
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	000186a0 	.word	0x000186a0
 8002e70:	001e847f 	.word	0x001e847f
 8002e74:	003d08ff 	.word	0x003d08ff
 8002e78:	431bde83 	.word	0x431bde83
 8002e7c:	10624dd3 	.word	0x10624dd3

08002e80 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b80      	cmp	r3, #128	; 0x80
 8002e94:	d103      	bne.n	8002e9e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	817b      	strh	r3, [r7, #10]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	813b      	strh	r3, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ec6:	f7ff f89d 	bl	8002004 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	f040 80d9 	bne.w	800308c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2319      	movs	r3, #25
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	496d      	ldr	r1, [pc, #436]	; (8003098 <HAL_I2C_Mem_Write+0x1ec>)
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f002 f911 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e0cc      	b.n	800308e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_Mem_Write+0x56>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0c5      	b.n	800308e <HAL_I2C_Mem_Write+0x1e2>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d007      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2221      	movs	r2, #33	; 0x21
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a4d      	ldr	r2, [pc, #308]	; (800309c <HAL_I2C_Mem_Write+0x1f0>)
 8002f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f6a:	88f8      	ldrh	r0, [r7, #6]
 8002f6c:	893a      	ldrh	r2, [r7, #8]
 8002f6e:	8979      	ldrh	r1, [r7, #10]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	4603      	mov	r3, r0
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f001 fea0 	bl	8004cc0 <I2C_RequestMemoryWrite>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d052      	beq.n	800302c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e081      	b.n	800308e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f002 f9d6 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d107      	bne.n	8002fb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06b      	b.n	800308e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d11b      	bne.n	800302c <HAL_I2C_Mem_Write+0x180>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d017      	beq.n	800302c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1aa      	bne.n	8002f8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f002 f9c9 	bl	80053d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00d      	beq.n	8003060 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2b04      	cmp	r3, #4
 800304a:	d107      	bne.n	800305c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e016      	b.n	800308e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	00100002 	.word	0x00100002
 800309c:	ffff0000 	.word	0xffff0000

080030a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	817b      	strh	r3, [r7, #10]
 80030b2:	460b      	mov	r3, r1
 80030b4:	813b      	strh	r3, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ba:	f7fe ffa3 	bl	8002004 <HAL_GetTick>
 80030be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	f040 8214 	bne.w	80034f6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2319      	movs	r3, #25
 80030d4:	2201      	movs	r2, #1
 80030d6:	497b      	ldr	r1, [pc, #492]	; (80032c4 <HAL_I2C_Mem_Read+0x224>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f002 f817 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
 80030e6:	e207      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_I2C_Mem_Read+0x56>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e200      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d007      	beq.n	800311c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800312a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2222      	movs	r2, #34	; 0x22
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a5b      	ldr	r2, [pc, #364]	; (80032c8 <HAL_I2C_Mem_Read+0x228>)
 800315c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800315e:	88f8      	ldrh	r0, [r7, #6]
 8003160:	893a      	ldrh	r2, [r7, #8]
 8003162:	8979      	ldrh	r1, [r7, #10]
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4603      	mov	r3, r0
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f001 fe3c 	bl	8004dec <I2C_RequestMemoryRead>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e1bc      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d113      	bne.n	80031ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e190      	b.n	80034d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d11b      	bne.n	80031ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e170      	b.n	80034d0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d11b      	bne.n	800322e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003204:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003214:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	e150      	b.n	80034d0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003244:	e144      	b.n	80034d0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	2b03      	cmp	r3, #3
 800324c:	f200 80f1 	bhi.w	8003432 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b01      	cmp	r3, #1
 8003256:	d123      	bne.n	80032a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f002 f931 	bl	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e145      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800329e:	e117      	b.n	80034d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d14e      	bne.n	8003346 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	2200      	movs	r2, #0
 80032b0:	4906      	ldr	r1, [pc, #24]	; (80032cc <HAL_I2C_Mem_Read+0x22c>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f001 ff2a 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e11a      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
 80032c2:	bf00      	nop
 80032c4:	00100002 	.word	0x00100002
 80032c8:	ffff0000 	.word	0xffff0000
 80032cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003344:	e0c4      	b.n	80034d0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	2200      	movs	r2, #0
 800334e:	496c      	ldr	r1, [pc, #432]	; (8003500 <HAL_I2C_Mem_Read+0x460>)
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f001 fedb 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0cb      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	2200      	movs	r2, #0
 80033aa:	4955      	ldr	r1, [pc, #340]	; (8003500 <HAL_I2C_Mem_Read+0x460>)
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f001 fead 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e09d      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003430:	e04e      	b.n	80034d0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f002 f844 	bl	80054c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e058      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d124      	bne.n	80034d0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	2b03      	cmp	r3, #3
 800348c:	d107      	bne.n	800349e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f aeb6 	bne.w	8003246 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
  }
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	00010004 	.word	0x00010004

08003504 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003524:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b10      	cmp	r3, #16
 8003532:	d003      	beq.n	800353c <HAL_I2C_EV_IRQHandler+0x38>
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	f040 80b1 	bne.w	800369e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <HAL_I2C_EV_IRQHandler+0x6e>
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800355c:	d003      	beq.n	8003566 <HAL_I2C_EV_IRQHandler+0x62>
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003564:	d101      	bne.n	800356a <HAL_I2C_EV_IRQHandler+0x66>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_I2C_EV_IRQHandler+0x68>
 800356a:	2300      	movs	r3, #0
 800356c:	2b01      	cmp	r3, #1
 800356e:	f000 8114 	beq.w	800379a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <HAL_I2C_EV_IRQHandler+0x90>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f002 f828 	bl	80055dc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fd7a 	bl	8004086 <I2C_Master_SB>
 8003592:	e083      	b.n	800369c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_I2C_EV_IRQHandler+0xac>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fdf2 	bl	8004192 <I2C_Master_ADD10>
 80035ae:	e075      	b.n	800369c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_I2C_EV_IRQHandler+0xc8>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fe0e 	bl	80041e6 <I2C_Master_ADDR>
 80035ca:	e067      	b.n	800369c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d036      	beq.n	8003644 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e4:	f000 80db 	beq.w	800379e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x10a>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x10a>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9d6 	bl	80039b8 <I2C_MasterTransmit_TXE>
 800360c:	e046      	b.n	800369c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80c2 	beq.w	800379e <HAL_I2C_EV_IRQHandler+0x29a>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80bc 	beq.w	800379e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003626:	7bbb      	ldrb	r3, [r7, #14]
 8003628:	2b21      	cmp	r3, #33	; 0x21
 800362a:	d103      	bne.n	8003634 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fa5f 	bl	8003af0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003632:	e0b4      	b.n	800379e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	f040 80b1 	bne.w	800379e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 facd 	bl	8003bdc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003642:	e0ac      	b.n	800379e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003652:	f000 80a4 	beq.w	800379e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_I2C_EV_IRQHandler+0x178>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_I2C_EV_IRQHandler+0x178>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb49 	bl	8003d0c <I2C_MasterReceive_RXNE>
 800367a:	e00f      	b.n	800369c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 808b 	beq.w	800379e <HAL_I2C_EV_IRQHandler+0x29a>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8085 	beq.w	800379e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fc01 	bl	8003e9c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800369a:	e080      	b.n	800379e <HAL_I2C_EV_IRQHandler+0x29a>
 800369c:	e07f      	b.n	800379e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	e007      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d011      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x1ea>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80036e4:	69b9      	ldr	r1, [r7, #24]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 ffcc 	bl	8004684 <I2C_Slave_ADDR>
 80036ec:	e05a      	b.n	80037a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_I2C_EV_IRQHandler+0x206>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f001 f806 	bl	8004714 <I2C_Slave_STOPF>
 8003708:	e04c      	b.n	80037a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800370a:	7bbb      	ldrb	r3, [r7, #14]
 800370c:	2b21      	cmp	r3, #33	; 0x21
 800370e:	d002      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x212>
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	2b29      	cmp	r3, #41	; 0x29
 8003714:	d120      	bne.n	8003758 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <HAL_I2C_EV_IRQHandler+0x238>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_I2C_EV_IRQHandler+0x238>
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fee7 	bl	8004508 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800373a:	e032      	b.n	80037a2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02d      	beq.n	80037a2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374c:	2b00      	cmp	r3, #0
 800374e:	d028      	beq.n	80037a2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 ff16 	bl	8004582 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003756:	e024      	b.n	80037a2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <HAL_I2C_EV_IRQHandler+0x27a>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_I2C_EV_IRQHandler+0x27a>
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 ff24 	bl	80045c4 <I2C_SlaveReceive_RXNE>
 800377c:	e012      	b.n	80037a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 ff54 	bl	8004640 <I2C_SlaveReceive_BTF>
 8003798:	e004      	b.n	80037a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800379a:	bf00      	nop
 800379c:	e002      	b.n	80037a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800379e:	bf00      	nop
 80037a0:	e000      	b.n	80037a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08a      	sub	sp, #40	; 0x28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00d      	beq.n	80037f4 <HAL_I2C_ER_IRQHandler+0x4a>
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_I2C_ER_IRQHandler+0x70>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003818:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03e      	beq.n	80038a2 <HAL_I2C_ER_IRQHandler+0xf8>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d039      	beq.n	80038a2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800382e:	7efb      	ldrb	r3, [r7, #27]
 8003830:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003848:	7ebb      	ldrb	r3, [r7, #26]
 800384a:	2b20      	cmp	r3, #32
 800384c:	d112      	bne.n	8003874 <HAL_I2C_ER_IRQHandler+0xca>
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10f      	bne.n	8003874 <HAL_I2C_ER_IRQHandler+0xca>
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b21      	cmp	r3, #33	; 0x21
 8003858:	d008      	beq.n	800386c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b29      	cmp	r3, #41	; 0x29
 800385e:	d005      	beq.n	800386c <HAL_I2C_ER_IRQHandler+0xc2>
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b28      	cmp	r3, #40	; 0x28
 8003864:	d106      	bne.n	8003874 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b21      	cmp	r3, #33	; 0x21
 800386a:	d103      	bne.n	8003874 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f001 f881 	bl	8004974 <I2C_Slave_AF>
 8003872:	e016      	b.n	80038a2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800387c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003886:	7efb      	ldrb	r3, [r7, #27]
 8003888:	2b10      	cmp	r3, #16
 800388a:	d002      	beq.n	8003892 <HAL_I2C_ER_IRQHandler+0xe8>
 800388c:	7efb      	ldrb	r3, [r7, #27]
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d107      	bne.n	80038a2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <HAL_I2C_ER_IRQHandler+0x11e>
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80038c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f001 f8be 	bl	8004a5c <I2C_ITError>
  }
}
 80038e0:	bf00      	nop
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
 8003944:	4613      	mov	r3, r2
 8003946:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d150      	bne.n	8003a80 <I2C_MasterTransmit_TXE+0xc8>
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b21      	cmp	r3, #33	; 0x21
 80039e2:	d14d      	bne.n	8003a80 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d01d      	beq.n	8003a26 <I2C_MasterTransmit_TXE+0x6e>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d01a      	beq.n	8003a26 <I2C_MasterTransmit_TXE+0x6e>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039f6:	d016      	beq.n	8003a26 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a06:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2211      	movs	r2, #17
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff62 	bl	80038e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a24:	e060      	b.n	8003ae8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a34:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a44:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d107      	bne.n	8003a70 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff7d 	bl	8003968 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a6e:	e03b      	b.n	8003ae8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff35 	bl	80038e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a7e:	e033      	b.n	8003ae8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b21      	cmp	r3, #33	; 0x21
 8003a84:	d005      	beq.n	8003a92 <I2C_MasterTransmit_TXE+0xda>
 8003a86:	7bbb      	ldrb	r3, [r7, #14]
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d12d      	bne.n	8003ae8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b22      	cmp	r3, #34	; 0x22
 8003a90:	d12a      	bne.n	8003ae8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d108      	bne.n	8003aae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aaa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003aac:	e01c      	b.n	8003ae8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d103      	bne.n	8003ac2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f88e 	bl	8003bdc <I2C_MemoryTransmit_TXE_BTF>
}
 8003ac0:	e012      	b.n	8003ae8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ae6:	e7ff      	b.n	8003ae8 <I2C_MasterTransmit_TXE+0x130>
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b21      	cmp	r3, #33	; 0x21
 8003b08:	d164      	bne.n	8003bd4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d012      	beq.n	8003b3a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b38:	e04c      	b.n	8003bd4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d01d      	beq.n	8003b7c <I2C_MasterTransmit_BTF+0x8c>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d01a      	beq.n	8003b7c <I2C_MasterTransmit_BTF+0x8c>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b4c:	d016      	beq.n	8003b7c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b5c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2211      	movs	r2, #17
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff feb7 	bl	80038e8 <HAL_I2C_MasterTxCpltCallback>
}
 8003b7a:	e02b      	b.n	8003bd4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b8a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d107      	bne.n	8003bc6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fed2 	bl	8003968 <HAL_I2C_MemTxCpltCallback>
}
 8003bc4:	e006      	b.n	8003bd4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff fe8a 	bl	80038e8 <HAL_I2C_MasterTxCpltCallback>
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11d      	bne.n	8003c30 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10b      	bne.n	8003c14 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0c:	1c9a      	adds	r2, r3, #2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003c12:	e077      	b.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	121b      	asrs	r3, r3, #8
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c2e:	e069      	b.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d10b      	bne.n	8003c50 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c4e:	e059      	b.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d152      	bne.n	8003cfe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b22      	cmp	r3, #34	; 0x22
 8003c5c:	d10d      	bne.n	8003c7a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c78:	e044      	b.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b21      	cmp	r3, #33	; 0x21
 8003c88:	d112      	bne.n	8003cb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cae:	e029      	b.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d124      	bne.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b21      	cmp	r3, #33	; 0x21
 8003cbe:	d121      	bne.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff fe36 	bl	8003968 <HAL_I2C_MemTxCpltCallback>
}
 8003cfc:	e002      	b.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff f8be 	bl	8002e80 <I2C_Flush_DR>
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b22      	cmp	r3, #34	; 0x22
 8003d1e:	f040 80b9 	bne.w	8003e94 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d921      	bls.n	8003d7a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	f040 8096 	bne.w	8003e94 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003d78:	e08c      	b.n	8003e94 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d07f      	beq.n	8003e82 <I2C_MasterReceive_RXNE+0x176>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d002      	beq.n	8003d8e <I2C_MasterReceive_RXNE+0x82>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d179      	bne.n	8003e82 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f001 fb66 	bl	8005460 <I2C_WaitOnSTOPRequestThroughIT>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d14c      	bne.n	8003e34 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003db8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d10a      	bne.n	8003e0a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fdba 	bl	800397c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e08:	e044      	b.n	8003e94 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d002      	beq.n	8003e1e <I2C_MasterReceive_RXNE+0x112>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d103      	bne.n	8003e26 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
 8003e24:	e002      	b.n	8003e2c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2212      	movs	r2, #18
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fd65 	bl	80038fc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e32:	e02f      	b.n	8003e94 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fd88 	bl	8003990 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e80:	e008      	b.n	8003e94 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e90:	605a      	str	r2, [r3, #4]
}
 8003e92:	e7ff      	b.n	8003e94 <I2C_MasterReceive_RXNE+0x188>
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d11b      	bne.n	8003eec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003eea:	e0c8      	b.n	800407e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d129      	bne.n	8003f4a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d00a      	beq.n	8003f22 <I2C_MasterReceive_BTF+0x86>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d007      	beq.n	8003f22 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f20:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f48:	e099      	b.n	800407e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	f040 8081 	bne.w	8004058 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d002      	beq.n	8003f62 <I2C_MasterReceive_BTF+0xc6>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d108      	bne.n	8003f74 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e019      	b.n	8003fa8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d002      	beq.n	8003f80 <I2C_MasterReceive_BTF+0xe4>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d108      	bne.n	8003f92 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e00a      	b.n	8003fa8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d007      	beq.n	8003fa8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004002:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d10a      	bne.n	800402e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fca8 	bl	800397c <HAL_I2C_MemRxCpltCallback>
}
 800402c:	e027      	b.n	800407e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d002      	beq.n	8004042 <I2C_MasterReceive_BTF+0x1a6>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b20      	cmp	r3, #32
 8004040:	d103      	bne.n	800404a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
 8004048:	e002      	b.n	8004050 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2212      	movs	r2, #18
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff fc53 	bl	80038fc <HAL_I2C_MasterRxCpltCallback>
}
 8004056:	e012      	b.n	800407e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d117      	bne.n	80040ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040b4:	e067      	b.n	8004186 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]
}
 80040c8:	e05d      	b.n	8004186 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d2:	d133      	bne.n	800413c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b21      	cmp	r3, #33	; 0x21
 80040de:	d109      	bne.n	80040f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040f0:	611a      	str	r2, [r3, #16]
 80040f2:	e008      	b.n	8004106 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d004      	beq.n	8004118 <I2C_Master_SB+0x92>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d108      	bne.n	800412a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	2b00      	cmp	r3, #0
 800411e:	d032      	beq.n	8004186 <I2C_Master_SB+0x100>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02d      	beq.n	8004186 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004138:	605a      	str	r2, [r3, #4]
}
 800413a:	e024      	b.n	8004186 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10e      	bne.n	8004162 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	b29b      	uxth	r3, r3
 800414a:	11db      	asrs	r3, r3, #7
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0306 	and.w	r3, r3, #6
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f063 030f 	orn	r3, r3, #15
 8004158:	b2da      	uxtb	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	611a      	str	r2, [r3, #16]
}
 8004160:	e011      	b.n	8004186 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004166:	2b01      	cmp	r3, #1
 8004168:	d10d      	bne.n	8004186 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	b29b      	uxth	r3, r3
 8004170:	11db      	asrs	r3, r3, #7
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 0306 	and.w	r3, r3, #6
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f063 030e 	orn	r3, r3, #14
 800417e:	b2da      	uxtb	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	611a      	str	r2, [r3, #16]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <I2C_Master_ADD10+0x26>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <I2C_Master_ADD10+0x48>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d8:	605a      	str	r2, [r3, #4]
  }
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b091      	sub	sp, #68	; 0x44
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b22      	cmp	r3, #34	; 0x22
 800420e:	f040 8169 	bne.w	80044e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <I2C_Master_ADDR+0x54>
 800421a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d10b      	bne.n	800423a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	e160      	b.n	80044fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11d      	bne.n	800427e <I2C_Master_ADDR+0x98>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800424a:	d118      	bne.n	800427e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004270:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	651a      	str	r2, [r3, #80]	; 0x50
 800427c:	e13e      	b.n	80044fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d113      	bne.n	80042b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004288:	2300      	movs	r3, #0
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e115      	b.n	80044dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	f040 808a 	bne.w	80043d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c2:	d137      	bne.n	8004334 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e2:	d113      	bne.n	800430c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	e0e7      	b.n	80044dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430c:	2300      	movs	r3, #0
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e0d3      	b.n	80044dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	2b08      	cmp	r3, #8
 8004338:	d02e      	beq.n	8004398 <I2C_Master_ADDR+0x1b2>
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	2b20      	cmp	r3, #32
 800433e:	d02b      	beq.n	8004398 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004342:	2b12      	cmp	r3, #18
 8004344:	d102      	bne.n	800434c <I2C_Master_ADDR+0x166>
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b01      	cmp	r3, #1
 800434a:	d125      	bne.n	8004398 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	2b04      	cmp	r3, #4
 8004350:	d00e      	beq.n	8004370 <I2C_Master_ADDR+0x18a>
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	2b02      	cmp	r3, #2
 8004356:	d00b      	beq.n	8004370 <I2C_Master_ADDR+0x18a>
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	2b10      	cmp	r3, #16
 800435c:	d008      	beq.n	8004370 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e007      	b.n	8004380 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800437e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	e0a1      	b.n	80044dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e085      	b.n	80044dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d14d      	bne.n	8004476 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d016      	beq.n	800440e <I2C_Master_ADDR+0x228>
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d013      	beq.n	800440e <I2C_Master_ADDR+0x228>
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d010      	beq.n	800440e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	e007      	b.n	800441e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800441c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442c:	d117      	bne.n	800445e <I2C_Master_ADDR+0x278>
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004434:	d00b      	beq.n	800444e <I2C_Master_ADDR+0x268>
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	2b01      	cmp	r3, #1
 800443a:	d008      	beq.n	800444e <I2C_Master_ADDR+0x268>
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	2b08      	cmp	r3, #8
 8004440:	d005      	beq.n	800444e <I2C_Master_ADDR+0x268>
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b10      	cmp	r3, #16
 8004446:	d002      	beq.n	800444e <I2C_Master_ADDR+0x268>
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	2b20      	cmp	r3, #32
 800444c:	d107      	bne.n	800445e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800445c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	e032      	b.n	80044dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004484:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004494:	d117      	bne.n	80044c6 <I2C_Master_ADDR+0x2e0>
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800449c:	d00b      	beq.n	80044b6 <I2C_Master_ADDR+0x2d0>
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d008      	beq.n	80044b6 <I2C_Master_ADDR+0x2d0>
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d005      	beq.n	80044b6 <I2C_Master_ADDR+0x2d0>
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d002      	beq.n	80044b6 <I2C_Master_ADDR+0x2d0>
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d107      	bne.n	80044c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80044e2:	e00b      	b.n	80044fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
}
 80044fa:	e7ff      	b.n	80044fc <I2C_Master_ADDR+0x316>
 80044fc:	bf00      	nop
 80044fe:	3744      	adds	r7, #68	; 0x44
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004516:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d02b      	beq.n	800457a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	781a      	ldrb	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d114      	bne.n	800457a <I2C_SlaveTransmit_TXE+0x72>
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b29      	cmp	r3, #41	; 0x29
 8004554:	d111      	bne.n	800457a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2221      	movs	r2, #33	; 0x21
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2228      	movs	r2, #40	; 0x28
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff f9cb 	bl	8003910 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d011      	beq.n	80045b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02c      	beq.n	8004638 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d114      	bne.n	8004638 <I2C_SlaveReceive_RXNE+0x74>
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b2a      	cmp	r3, #42	; 0x2a
 8004612:	d111      	bne.n	8004638 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004622:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2222      	movs	r2, #34	; 0x22
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2228      	movs	r2, #40	; 0x28
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff f976 	bl	8003924 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d012      	beq.n	8004678 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800469e:	2b28      	cmp	r3, #40	; 0x28
 80046a0:	d125      	bne.n	80046ee <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	81bb      	strh	r3, [r7, #12]
 80046d0:	e002      	b.n	80046d8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80046e0:	89ba      	ldrh	r2, [r7, #12]
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff f926 	bl	8003938 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80046ec:	e00e      	b.n	800470c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004732:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004734:	2300      	movs	r3, #0
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004760:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004770:	d172      	bne.n	8004858 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b22      	cmp	r3, #34	; 0x22
 8004776:	d002      	beq.n	800477e <I2C_Slave_STOPF+0x6a>
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b2a      	cmp	r3, #42	; 0x2a
 800477c:	d135      	bne.n	80047ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f043 0204 	orr.w	r2, r3, #4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe f859 	bl	800286e <HAL_DMA_GetState>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d049      	beq.n	8004856 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	4a69      	ldr	r2, [pc, #420]	; (800496c <I2C_Slave_STOPF+0x258>)
 80047c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe f82b 	bl	800282a <HAL_DMA_Abort_IT>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d03d      	beq.n	8004856 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e4:	4610      	mov	r0, r2
 80047e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047e8:	e035      	b.n	8004856 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0204 	orr.w	r2, r3, #4
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800481c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe f823 	bl	800286e <HAL_DMA_GetState>
 8004828:	4603      	mov	r3, r0
 800482a:	2b01      	cmp	r3, #1
 800482c:	d014      	beq.n	8004858 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	4a4e      	ldr	r2, [pc, #312]	; (800496c <I2C_Slave_STOPF+0x258>)
 8004834:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fff5 	bl	800282a <HAL_DMA_Abort_IT>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004850:	4610      	mov	r0, r2
 8004852:	4798      	blx	r3
 8004854:	e000      	b.n	8004858 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004856:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d03e      	beq.n	80048e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b04      	cmp	r3, #4
 800486e:	d112      	bne.n	8004896 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d112      	bne.n	80048ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	f043 0204 	orr.w	r2, r3, #4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8b7 	bl	8004a5c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80048ee:	e039      	b.n	8004964 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b2a      	cmp	r3, #42	; 0x2a
 80048f4:	d109      	bne.n	800490a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2228      	movs	r2, #40	; 0x28
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff f80d 	bl	8003924 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b28      	cmp	r3, #40	; 0x28
 8004914:	d111      	bne.n	800493a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a15      	ldr	r2, [pc, #84]	; (8004970 <I2C_Slave_STOPF+0x25c>)
 800491a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff f80e 	bl	8003954 <HAL_I2C_ListenCpltCallback>
}
 8004938:	e014      	b.n	8004964 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	2b22      	cmp	r3, #34	; 0x22
 8004940:	d002      	beq.n	8004948 <I2C_Slave_STOPF+0x234>
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b22      	cmp	r3, #34	; 0x22
 8004946:	d10d      	bne.n	8004964 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fe ffe0 	bl	8003924 <HAL_I2C_SlaveRxCpltCallback>
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	08004fbd 	.word	0x08004fbd
 8004970:	ffff0000 	.word	0xffff0000

08004974 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d002      	beq.n	8004996 <I2C_Slave_AF+0x22>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b20      	cmp	r3, #32
 8004994:	d129      	bne.n	80049ea <I2C_Slave_AF+0x76>
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b28      	cmp	r3, #40	; 0x28
 800499a:	d126      	bne.n	80049ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a2e      	ldr	r2, [pc, #184]	; (8004a58 <I2C_Slave_AF+0xe4>)
 80049a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fe ffb6 	bl	8003954 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80049e8:	e031      	b.n	8004a4e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b21      	cmp	r3, #33	; 0x21
 80049ee:	d129      	bne.n	8004a44 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <I2C_Slave_AF+0xe4>)
 80049f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2221      	movs	r2, #33	; 0x21
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a1a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a24:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a34:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fe fa22 	bl	8002e80 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fe ff67 	bl	8003910 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a42:	e004      	b.n	8004a4e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a4c:	615a      	str	r2, [r3, #20]
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	ffff0000 	.word	0xffff0000

08004a5c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a74:	7bbb      	ldrb	r3, [r7, #14]
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d002      	beq.n	8004a80 <I2C_ITError+0x24>
 8004a7a:	7bbb      	ldrb	r3, [r7, #14]
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d10a      	bne.n	8004a96 <I2C_ITError+0x3a>
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b22      	cmp	r3, #34	; 0x22
 8004a84:	d107      	bne.n	8004a96 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a9c:	2b28      	cmp	r3, #40	; 0x28
 8004a9e:	d107      	bne.n	8004ab0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2228      	movs	r2, #40	; 0x28
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aae:	e015      	b.n	8004adc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abe:	d00a      	beq.n	8004ad6 <I2C_ITError+0x7a>
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b60      	cmp	r3, #96	; 0x60
 8004ac4:	d007      	beq.n	8004ad6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aea:	d162      	bne.n	8004bb2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004afa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d020      	beq.n	8004b4c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	4a6a      	ldr	r2, [pc, #424]	; (8004cb8 <I2C_ITError+0x25c>)
 8004b10:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd fe87 	bl	800282a <HAL_DMA_Abort_IT>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8089 	beq.w	8004c36 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b46:	4610      	mov	r0, r2
 8004b48:	4798      	blx	r3
 8004b4a:	e074      	b.n	8004c36 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	4a59      	ldr	r2, [pc, #356]	; (8004cb8 <I2C_ITError+0x25c>)
 8004b52:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fd fe66 	bl	800282a <HAL_DMA_Abort_IT>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d068      	beq.n	8004c36 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d10b      	bne.n	8004b8a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0201 	bic.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bac:	4610      	mov	r0, r2
 8004bae:	4798      	blx	r3
 8004bb0:	e041      	b.n	8004c36 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b60      	cmp	r3, #96	; 0x60
 8004bbc:	d125      	bne.n	8004c0a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d10b      	bne.n	8004bf2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fe fece 	bl	80039a4 <HAL_I2C_AbortCpltCallback>
 8004c08:	e015      	b.n	8004c36 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d10b      	bne.n	8004c30 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7fe fead 	bl	8003990 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10e      	bne.n	8004c64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c72:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d113      	bne.n	8004cb0 <I2C_ITError+0x254>
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b28      	cmp	r3, #40	; 0x28
 8004c8c:	d110      	bne.n	8004cb0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <I2C_ITError+0x260>)
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fe fe52 	bl	8003954 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	08004fbd 	.word	0x08004fbd
 8004cbc:	ffff0000 	.word	0xffff0000

08004cc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	817b      	strh	r3, [r7, #10]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	813b      	strh	r3, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 fa08 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00d      	beq.n	8004d1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d10:	d103      	bne.n	8004d1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e05f      	b.n	8004dde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d1e:	897b      	ldrh	r3, [r7, #10]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	492d      	ldr	r1, [pc, #180]	; (8004de8 <I2C_RequestMemoryWrite+0x128>)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fa63 	bl	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e04c      	b.n	8004dde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5c:	6a39      	ldr	r1, [r7, #32]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 faee 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d107      	bne.n	8004d82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e02b      	b.n	8004dde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d105      	bne.n	8004d98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d8c:	893b      	ldrh	r3, [r7, #8]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	611a      	str	r2, [r3, #16]
 8004d96:	e021      	b.n	8004ddc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d98:	893b      	ldrh	r3, [r7, #8]
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	6a39      	ldr	r1, [r7, #32]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fac8 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d107      	bne.n	8004dce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e005      	b.n	8004dde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dd2:	893b      	ldrh	r3, [r7, #8]
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	00010002 	.word	0x00010002

08004dec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	817b      	strh	r3, [r7, #10]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	813b      	strh	r3, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f96a 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00d      	beq.n	8004e5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4c:	d103      	bne.n	8004e56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e0aa      	b.n	8004fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e5a:	897b      	ldrh	r3, [r7, #10]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	6a3a      	ldr	r2, [r7, #32]
 8004e6e:	4952      	ldr	r1, [pc, #328]	; (8004fb8 <I2C_RequestMemoryRead+0x1cc>)
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f9c5 	bl	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e097      	b.n	8004fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e98:	6a39      	ldr	r1, [r7, #32]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fa50 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d107      	bne.n	8004ebe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ebc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e076      	b.n	8004fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d105      	bne.n	8004ed4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec8:	893b      	ldrh	r3, [r7, #8]
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	611a      	str	r2, [r3, #16]
 8004ed2:	e021      	b.n	8004f18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ed4:	893b      	ldrh	r3, [r7, #8]
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee4:	6a39      	ldr	r1, [r7, #32]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fa2a 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d107      	bne.n	8004f0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e050      	b.n	8004fb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0e:	893b      	ldrh	r3, [r7, #8]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1a:	6a39      	ldr	r1, [r7, #32]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fa0f 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d107      	bne.n	8004f40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e035      	b.n	8004fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f8d3 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7a:	d103      	bne.n	8004f84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e013      	b.n	8004fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f88:	897b      	ldrh	r3, [r7, #10]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	6a3a      	ldr	r2, [r7, #32]
 8004f9c:	4906      	ldr	r1, [pc, #24]	; (8004fb8 <I2C_RequestMemoryRead+0x1cc>)
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f92e 	bl	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	00010002 	.word	0x00010002

08004fbc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fd6:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <I2C_DMAAbort+0x148>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	4a4a      	ldr	r2, [pc, #296]	; (8005108 <I2C_DMAAbort+0x14c>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0a1a      	lsrs	r2, r3, #8
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	00da      	lsls	r2, r3, #3
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f043 0220 	orr.w	r2, r3, #32
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005002:	e00a      	b.n	800501a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	3b01      	subs	r3, #1
 8005008:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d0ea      	beq.n	8004ff0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	2200      	movs	r2, #0
 8005028:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	2200      	movs	r2, #0
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2200      	movs	r2, #0
 800504e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	2200      	movs	r2, #0
 800505e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	2200      	movs	r2, #0
 800506e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b60      	cmp	r3, #96	; 0x60
 800508a:	d10e      	bne.n	80050aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2200      	movs	r2, #0
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050a2:	6978      	ldr	r0, [r7, #20]
 80050a4:	f7fe fc7e 	bl	80039a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050a8:	e027      	b.n	80050fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050aa:	7cfb      	ldrb	r3, [r7, #19]
 80050ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050b0:	2b28      	cmp	r3, #40	; 0x28
 80050b2:	d117      	bne.n	80050e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2228      	movs	r2, #40	; 0x28
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050e2:	e007      	b.n	80050f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80050f4:	6978      	ldr	r0, [r7, #20]
 80050f6:	f7fe fc4b 	bl	8003990 <HAL_I2C_ErrorCallback>
}
 80050fa:	bf00      	nop
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200000d8 	.word	0x200000d8
 8005108:	14f8b589 	.word	0x14f8b589

0800510c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800511c:	e048      	b.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d044      	beq.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005126:	f7fc ff6d 	bl	8002004 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d302      	bcc.n	800513c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d139      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d10d      	bne.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	43da      	mvns	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4013      	ands	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	e00c      	b.n	800517c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	43da      	mvns	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d116      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e023      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10d      	bne.n	80051d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	43da      	mvns	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	e00c      	b.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	43da      	mvns	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4013      	ands	r3, r2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d093      	beq.n	800511e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800520e:	e071      	b.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521e:	d123      	bne.n	8005268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	f043 0204 	orr.w	r2, r3, #4
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e067      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d041      	beq.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005270:	f7fc fec8 	bl	8002004 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d136      	bne.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10c      	bne.n	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	43da      	mvns	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e00b      	b.n	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	43da      	mvns	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	f043 0220 	orr.w	r2, r3, #32
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e021      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10c      	bne.n	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	43da      	mvns	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4013      	ands	r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e00b      	b.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	bf14      	ite	ne
 800532a:	2301      	movne	r3, #1
 800532c:	2300      	moveq	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f af6d 	bne.w	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800534c:	e034      	b.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f915 	bl	800557e <I2C_IsAcknowledgeFailed>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e034      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d028      	beq.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fc fe4d 	bl	8002004 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d11d      	bne.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d016      	beq.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e007      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d1c3      	bne.n	800534e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053dc:	e034      	b.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f8cd 	bl	800557e <I2C_IsAcknowledgeFailed>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e034      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d028      	beq.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fc fe05 	bl	8002004 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d11d      	bne.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d016      	beq.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e007      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d1c3      	bne.n	80053de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800546c:	4b13      	ldr	r3, [pc, #76]	; (80054bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	08db      	lsrs	r3, r3, #3
 8005472:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	0a1a      	lsrs	r2, r3, #8
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3b01      	subs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d107      	bne.n	800549e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e008      	b.n	80054b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ac:	d0e9      	beq.n	8005482 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	200000d8 	.word	0x200000d8
 80054c0:	14f8b589 	.word	0x14f8b589

080054c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054d0:	e049      	b.n	8005566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d119      	bne.n	8005514 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0210 	mvn.w	r2, #16
 80054e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e030      	b.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005514:	f7fc fd76 	bl	8002004 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11d      	bne.n	8005566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005534:	2b40      	cmp	r3, #64	; 0x40
 8005536:	d016      	beq.n	8005566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e007      	b.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d1ae      	bne.n	80054d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d11b      	bne.n	80055ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800559e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80055ec:	d103      	bne.n	80055f6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80055f4:	e007      	b.n	8005606 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80055fe:	d102      	bne.n	8005606 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2208      	movs	r2, #8
 8005604:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e267      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d075      	beq.n	800571e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005632:	4b88      	ldr	r3, [pc, #544]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
 800563a:	2b04      	cmp	r3, #4
 800563c:	d00c      	beq.n	8005658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800563e:	4b85      	ldr	r3, [pc, #532]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005646:	2b08      	cmp	r3, #8
 8005648:	d112      	bne.n	8005670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564a:	4b82      	ldr	r3, [pc, #520]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005656:	d10b      	bne.n	8005670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005658:	4b7e      	ldr	r3, [pc, #504]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d05b      	beq.n	800571c <HAL_RCC_OscConfig+0x108>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d157      	bne.n	800571c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e242      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005678:	d106      	bne.n	8005688 <HAL_RCC_OscConfig+0x74>
 800567a:	4b76      	ldr	r3, [pc, #472]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a75      	ldr	r2, [pc, #468]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e01d      	b.n	80056c4 <HAL_RCC_OscConfig+0xb0>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005690:	d10c      	bne.n	80056ac <HAL_RCC_OscConfig+0x98>
 8005692:	4b70      	ldr	r3, [pc, #448]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6f      	ldr	r2, [pc, #444]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b6d      	ldr	r3, [pc, #436]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6c      	ldr	r2, [pc, #432]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80056a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e00b      	b.n	80056c4 <HAL_RCC_OscConfig+0xb0>
 80056ac:	4b69      	ldr	r3, [pc, #420]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a68      	ldr	r2, [pc, #416]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80056b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4b66      	ldr	r3, [pc, #408]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a65      	ldr	r2, [pc, #404]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80056be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d013      	beq.n	80056f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056cc:	f7fc fc9a 	bl	8002004 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d4:	f7fc fc96 	bl	8002004 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e207      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e6:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f0      	beq.n	80056d4 <HAL_RCC_OscConfig+0xc0>
 80056f2:	e014      	b.n	800571e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fc fc86 	bl	8002004 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fc fc82 	bl	8002004 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1f3      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800570e:	4b51      	ldr	r3, [pc, #324]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0xe8>
 800571a:	e000      	b.n	800571e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800571c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d063      	beq.n	80057f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800572a:	4b4a      	ldr	r3, [pc, #296]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005736:	4b47      	ldr	r3, [pc, #284]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800573e:	2b08      	cmp	r3, #8
 8005740:	d11c      	bne.n	800577c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005742:	4b44      	ldr	r3, [pc, #272]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d116      	bne.n	800577c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574e:	4b41      	ldr	r3, [pc, #260]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_RCC_OscConfig+0x152>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d001      	beq.n	8005766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e1c7      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005766:	4b3b      	ldr	r3, [pc, #236]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	4937      	ldr	r1, [pc, #220]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577a:	e03a      	b.n	80057f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d020      	beq.n	80057c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005784:	4b34      	ldr	r3, [pc, #208]	; (8005858 <HAL_RCC_OscConfig+0x244>)
 8005786:	2201      	movs	r2, #1
 8005788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578a:	f7fc fc3b 	bl	8002004 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005792:	f7fc fc37 	bl	8002004 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e1a8      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a4:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f0      	beq.n	8005792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b0:	4b28      	ldr	r3, [pc, #160]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	4925      	ldr	r1, [pc, #148]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]
 80057c4:	e015      	b.n	80057f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057c6:	4b24      	ldr	r3, [pc, #144]	; (8005858 <HAL_RCC_OscConfig+0x244>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fc fc1a 	bl	8002004 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d4:	f7fc fc16 	bl	8002004 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e187      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057e6:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d036      	beq.n	800586c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d016      	beq.n	8005834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005806:	4b15      	ldr	r3, [pc, #84]	; (800585c <HAL_RCC_OscConfig+0x248>)
 8005808:	2201      	movs	r2, #1
 800580a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fc fbfa 	bl	8002004 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005814:	f7fc fbf6 	bl	8002004 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e167      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_OscConfig+0x240>)
 8005828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x200>
 8005832:	e01b      	b.n	800586c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005834:	4b09      	ldr	r3, [pc, #36]	; (800585c <HAL_RCC_OscConfig+0x248>)
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583a:	f7fc fbe3 	bl	8002004 <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005840:	e00e      	b.n	8005860 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005842:	f7fc fbdf 	bl	8002004 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d907      	bls.n	8005860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e150      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
 8005854:	40023800 	.word	0x40023800
 8005858:	42470000 	.word	0x42470000
 800585c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005860:	4b88      	ldr	r3, [pc, #544]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1ea      	bne.n	8005842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8097 	beq.w	80059a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800587e:	4b81      	ldr	r3, [pc, #516]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	4b7d      	ldr	r3, [pc, #500]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4a7c      	ldr	r2, [pc, #496]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005898:	6413      	str	r3, [r2, #64]	; 0x40
 800589a:	4b7a      	ldr	r3, [pc, #488]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058aa:	4b77      	ldr	r3, [pc, #476]	; (8005a88 <HAL_RCC_OscConfig+0x474>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d118      	bne.n	80058e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058b6:	4b74      	ldr	r3, [pc, #464]	; (8005a88 <HAL_RCC_OscConfig+0x474>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a73      	ldr	r2, [pc, #460]	; (8005a88 <HAL_RCC_OscConfig+0x474>)
 80058bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c2:	f7fc fb9f 	bl	8002004 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ca:	f7fc fb9b 	bl	8002004 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e10c      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058dc:	4b6a      	ldr	r3, [pc, #424]	; (8005a88 <HAL_RCC_OscConfig+0x474>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d106      	bne.n	80058fe <HAL_RCC_OscConfig+0x2ea>
 80058f0:	4b64      	ldr	r3, [pc, #400]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	4a63      	ldr	r2, [pc, #396]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	6713      	str	r3, [r2, #112]	; 0x70
 80058fc:	e01c      	b.n	8005938 <HAL_RCC_OscConfig+0x324>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b05      	cmp	r3, #5
 8005904:	d10c      	bne.n	8005920 <HAL_RCC_OscConfig+0x30c>
 8005906:	4b5f      	ldr	r3, [pc, #380]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	4a5e      	ldr	r2, [pc, #376]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 800590c:	f043 0304 	orr.w	r3, r3, #4
 8005910:	6713      	str	r3, [r2, #112]	; 0x70
 8005912:	4b5c      	ldr	r3, [pc, #368]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4a5b      	ldr	r2, [pc, #364]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6713      	str	r3, [r2, #112]	; 0x70
 800591e:	e00b      	b.n	8005938 <HAL_RCC_OscConfig+0x324>
 8005920:	4b58      	ldr	r3, [pc, #352]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	4a57      	ldr	r2, [pc, #348]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	6713      	str	r3, [r2, #112]	; 0x70
 800592c:	4b55      	ldr	r3, [pc, #340]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	4a54      	ldr	r2, [pc, #336]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005932:	f023 0304 	bic.w	r3, r3, #4
 8005936:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d015      	beq.n	800596c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fc fb60 	bl	8002004 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005946:	e00a      	b.n	800595e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7fc fb5c 	bl	8002004 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	; 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e0cb      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595e:	4b49      	ldr	r3, [pc, #292]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0ee      	beq.n	8005948 <HAL_RCC_OscConfig+0x334>
 800596a:	e014      	b.n	8005996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596c:	f7fc fb4a 	bl	8002004 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005972:	e00a      	b.n	800598a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005974:	f7fc fb46 	bl	8002004 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e0b5      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598a:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1ee      	bne.n	8005974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d105      	bne.n	80059a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800599c:	4b39      	ldr	r3, [pc, #228]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	4a38      	ldr	r2, [pc, #224]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 80059a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80a1 	beq.w	8005af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059b2:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d05c      	beq.n	8005a78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d141      	bne.n	8005a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c6:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <HAL_RCC_OscConfig+0x478>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fc fb1a 	bl	8002004 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d4:	f7fc fb16 	bl	8002004 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e087      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e6:	4b27      	ldr	r3, [pc, #156]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69da      	ldr	r2, [r3, #28]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	019b      	lsls	r3, r3, #6
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	061b      	lsls	r3, r3, #24
 8005a16:	491b      	ldr	r1, [pc, #108]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a1c:	4b1b      	ldr	r3, [pc, #108]	; (8005a8c <HAL_RCC_OscConfig+0x478>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a22:	f7fc faef 	bl	8002004 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a2a:	f7fc faeb 	bl	8002004 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e05c      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3c:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x416>
 8005a48:	e054      	b.n	8005af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <HAL_RCC_OscConfig+0x478>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a50:	f7fc fad8 	bl	8002004 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a58:	f7fc fad4 	bl	8002004 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e045      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_RCC_OscConfig+0x470>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f0      	bne.n	8005a58 <HAL_RCC_OscConfig+0x444>
 8005a76:	e03d      	b.n	8005af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d107      	bne.n	8005a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e038      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
 8005a84:	40023800 	.word	0x40023800
 8005a88:	40007000 	.word	0x40007000
 8005a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a90:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x4ec>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d028      	beq.n	8005af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d121      	bne.n	8005af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d11a      	bne.n	8005af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d111      	bne.n	8005af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	085b      	lsrs	r3, r3, #1
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d107      	bne.n	8005af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d001      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023800 	.word	0x40023800

08005b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0cc      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b18:	4b68      	ldr	r3, [pc, #416]	; (8005cbc <HAL_RCC_ClockConfig+0x1b8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d90c      	bls.n	8005b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b26:	4b65      	ldr	r3, [pc, #404]	; (8005cbc <HAL_RCC_ClockConfig+0x1b8>)
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2e:	4b63      	ldr	r3, [pc, #396]	; (8005cbc <HAL_RCC_ClockConfig+0x1b8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0b8      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d020      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b58:	4b59      	ldr	r3, [pc, #356]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4a58      	ldr	r2, [pc, #352]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b70:	4b53      	ldr	r3, [pc, #332]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a52      	ldr	r2, [pc, #328]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b7c:	4b50      	ldr	r3, [pc, #320]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	494d      	ldr	r1, [pc, #308]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d044      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba2:	4b47      	ldr	r3, [pc, #284]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d119      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e07f      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d003      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc2:	4b3f      	ldr	r3, [pc, #252]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e06f      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd2:	4b3b      	ldr	r3, [pc, #236]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e067      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005be2:	4b37      	ldr	r3, [pc, #220]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f023 0203 	bic.w	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4934      	ldr	r1, [pc, #208]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bf4:	f7fc fa06 	bl	8002004 <HAL_GetTick>
 8005bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfc:	f7fc fa02 	bl	8002004 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e04f      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	4b2b      	ldr	r3, [pc, #172]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 020c 	and.w	r2, r3, #12
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d1eb      	bne.n	8005bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c24:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <HAL_RCC_ClockConfig+0x1b8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d20c      	bcs.n	8005c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c32:	4b22      	ldr	r3, [pc, #136]	; (8005cbc <HAL_RCC_ClockConfig+0x1b8>)
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3a:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <HAL_RCC_ClockConfig+0x1b8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0307 	and.w	r3, r3, #7
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e032      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c58:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4916      	ldr	r1, [pc, #88]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c76:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	490e      	ldr	r1, [pc, #56]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c8a:	f000 f821 	bl	8005cd0 <HAL_RCC_GetSysClockFreq>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	091b      	lsrs	r3, r3, #4
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	490a      	ldr	r1, [pc, #40]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c9c:	5ccb      	ldrb	r3, [r1, r3]
 8005c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca2:	4a09      	ldr	r2, [pc, #36]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ca6:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <HAL_RCC_ClockConfig+0x1c8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fc f966 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40023c00 	.word	0x40023c00
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	0800a56c 	.word	0x0800a56c
 8005cc8:	200000d8 	.word	0x200000d8
 8005ccc:	200000dc 	.word	0x200000dc

08005cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd4:	b094      	sub	sp, #80	; 0x50
 8005cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	647b      	str	r3, [r7, #68]	; 0x44
 8005cdc:	2300      	movs	r3, #0
 8005cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ce8:	4b79      	ldr	r3, [pc, #484]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 030c 	and.w	r3, r3, #12
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d00d      	beq.n	8005d10 <HAL_RCC_GetSysClockFreq+0x40>
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	f200 80e1 	bhi.w	8005ebc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <HAL_RCC_GetSysClockFreq+0x34>
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d003      	beq.n	8005d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8005d02:	e0db      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d04:	4b73      	ldr	r3, [pc, #460]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d08:	e0db      	b.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d0a:	4b73      	ldr	r3, [pc, #460]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d0e:	e0d8      	b.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d10:	4b6f      	ldr	r3, [pc, #444]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d1a:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d063      	beq.n	8005dee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d26:	4b6a      	ldr	r3, [pc, #424]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	099b      	lsrs	r3, r3, #6
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d42:	4622      	mov	r2, r4
 8005d44:	462b      	mov	r3, r5
 8005d46:	f04f 0000 	mov.w	r0, #0
 8005d4a:	f04f 0100 	mov.w	r1, #0
 8005d4e:	0159      	lsls	r1, r3, #5
 8005d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d54:	0150      	lsls	r0, r2, #5
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	1a51      	subs	r1, r2, r1
 8005d5e:	6139      	str	r1, [r7, #16]
 8005d60:	4629      	mov	r1, r5
 8005d62:	eb63 0301 	sbc.w	r3, r3, r1
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d74:	4659      	mov	r1, fp
 8005d76:	018b      	lsls	r3, r1, #6
 8005d78:	4651      	mov	r1, sl
 8005d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d7e:	4651      	mov	r1, sl
 8005d80:	018a      	lsls	r2, r1, #6
 8005d82:	4651      	mov	r1, sl
 8005d84:	ebb2 0801 	subs.w	r8, r2, r1
 8005d88:	4659      	mov	r1, fp
 8005d8a:	eb63 0901 	sbc.w	r9, r3, r1
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005da2:	4690      	mov	r8, r2
 8005da4:	4699      	mov	r9, r3
 8005da6:	4623      	mov	r3, r4
 8005da8:	eb18 0303 	adds.w	r3, r8, r3
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	462b      	mov	r3, r5
 8005db0:	eb49 0303 	adc.w	r3, r9, r3
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	024b      	lsls	r3, r1, #9
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005dcc:	4621      	mov	r1, r4
 8005dce:	024a      	lsls	r2, r1, #9
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ddc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005de0:	f7fa fee2 	bl	8000ba8 <__aeabi_uldivmod>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4613      	mov	r3, r2
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dec:	e058      	b.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dee:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	099b      	lsrs	r3, r3, #6
 8005df4:	2200      	movs	r2, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	4611      	mov	r1, r2
 8005dfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dfe:	623b      	str	r3, [r7, #32]
 8005e00:	2300      	movs	r3, #0
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
 8005e04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	f04f 0000 	mov.w	r0, #0
 8005e10:	f04f 0100 	mov.w	r1, #0
 8005e14:	0159      	lsls	r1, r3, #5
 8005e16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e1a:	0150      	lsls	r0, r2, #5
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4641      	mov	r1, r8
 8005e22:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e26:	4649      	mov	r1, r9
 8005e28:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e40:	ebb2 040a 	subs.w	r4, r2, sl
 8005e44:	eb63 050b 	sbc.w	r5, r3, fp
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	00eb      	lsls	r3, r5, #3
 8005e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e56:	00e2      	lsls	r2, r4, #3
 8005e58:	4614      	mov	r4, r2
 8005e5a:	461d      	mov	r5, r3
 8005e5c:	4643      	mov	r3, r8
 8005e5e:	18e3      	adds	r3, r4, r3
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	464b      	mov	r3, r9
 8005e64:	eb45 0303 	adc.w	r3, r5, r3
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	f04f 0300 	mov.w	r3, #0
 8005e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e76:	4629      	mov	r1, r5
 8005e78:	028b      	lsls	r3, r1, #10
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e80:	4621      	mov	r1, r4
 8005e82:	028a      	lsls	r2, r1, #10
 8005e84:	4610      	mov	r0, r2
 8005e86:	4619      	mov	r1, r3
 8005e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	61fa      	str	r2, [r7, #28]
 8005e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e94:	f7fa fe88 	bl	8000ba8 <__aeabi_uldivmod>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	3301      	adds	r3, #1
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005eba:	e002      	b.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ebc:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3750      	adds	r7, #80	; 0x50
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	00f42400 	.word	0x00f42400
 8005ed8:	007a1200 	.word	0x007a1200

08005edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ee0:	4b03      	ldr	r3, [pc, #12]	; (8005ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	200000d8 	.word	0x200000d8

08005ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ef8:	f7ff fff0 	bl	8005edc <HAL_RCC_GetHCLKFreq>
 8005efc:	4602      	mov	r2, r0
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	0a9b      	lsrs	r3, r3, #10
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	4903      	ldr	r1, [pc, #12]	; (8005f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f0a:	5ccb      	ldrb	r3, [r1, r3]
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40023800 	.word	0x40023800
 8005f18:	0800a57c 	.word	0x0800a57c

08005f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f20:	f7ff ffdc 	bl	8005edc <HAL_RCC_GetHCLKFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	0b5b      	lsrs	r3, r3, #13
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4903      	ldr	r1, [pc, #12]	; (8005f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f32:	5ccb      	ldrb	r3, [r1, r3]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	0800a57c 	.word	0x0800a57c

08005f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e041      	b.n	8005fda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fb fe26 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f000 f946 	bl	8006214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01b      	beq.n	8006046 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f06f 0202 	mvn.w	r2, #2
 8006016:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8d2 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8006032:	e005      	b.n	8006040 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8c4 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8d5 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d020      	beq.n	8006092 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01b      	beq.n	8006092 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f06f 0204 	mvn.w	r2, #4
 8006062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f8ac 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 800607e:	e005      	b.n	800608c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f89e 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8af 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d020      	beq.n	80060de <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01b      	beq.n	80060de <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f06f 0208 	mvn.w	r2, #8
 80060ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2204      	movs	r2, #4
 80060b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f886 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 80060ca:	e005      	b.n	80060d8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f878 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f889 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d020      	beq.n	800612a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01b      	beq.n	800612a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0210 	mvn.w	r2, #16
 80060fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2208      	movs	r2, #8
 8006100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f860 	bl	80061d6 <HAL_TIM_IC_CaptureCallback>
 8006116:	e005      	b.n	8006124 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f852 	bl	80061c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f863 	bl	80061ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f06f 0201 	mvn.w	r2, #1
 8006146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fb fc55 	bl	80019f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00c      	beq.n	8006172 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f983 	bl	8006478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00c      	beq.n	8006196 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800618e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f834 	bl	80061fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00c      	beq.n	80061ba <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0220 	mvn.w	r2, #32
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f955 	bl	8006464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a46      	ldr	r2, [pc, #280]	; (8006340 <TIM_Base_SetConfig+0x12c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d013      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006232:	d00f      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a43      	ldr	r2, [pc, #268]	; (8006344 <TIM_Base_SetConfig+0x130>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00b      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a42      	ldr	r2, [pc, #264]	; (8006348 <TIM_Base_SetConfig+0x134>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d007      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a41      	ldr	r2, [pc, #260]	; (800634c <TIM_Base_SetConfig+0x138>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_Base_SetConfig+0x40>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a40      	ldr	r2, [pc, #256]	; (8006350 <TIM_Base_SetConfig+0x13c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d108      	bne.n	8006266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a35      	ldr	r2, [pc, #212]	; (8006340 <TIM_Base_SetConfig+0x12c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d02b      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006274:	d027      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a32      	ldr	r2, [pc, #200]	; (8006344 <TIM_Base_SetConfig+0x130>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d023      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a31      	ldr	r2, [pc, #196]	; (8006348 <TIM_Base_SetConfig+0x134>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01f      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a30      	ldr	r2, [pc, #192]	; (800634c <TIM_Base_SetConfig+0x138>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01b      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <TIM_Base_SetConfig+0x13c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d017      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2e      	ldr	r2, [pc, #184]	; (8006354 <TIM_Base_SetConfig+0x140>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2d      	ldr	r2, [pc, #180]	; (8006358 <TIM_Base_SetConfig+0x144>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00f      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2c      	ldr	r2, [pc, #176]	; (800635c <TIM_Base_SetConfig+0x148>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00b      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <TIM_Base_SetConfig+0x14c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d007      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <TIM_Base_SetConfig+0x150>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d003      	beq.n	80062c6 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <TIM_Base_SetConfig+0x154>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d108      	bne.n	80062d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a10      	ldr	r2, [pc, #64]	; (8006340 <TIM_Base_SetConfig+0x12c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_Base_SetConfig+0xf8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a12      	ldr	r2, [pc, #72]	; (8006350 <TIM_Base_SetConfig+0x13c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d103      	bne.n	8006314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b01      	cmp	r3, #1
 8006324:	d105      	bne.n	8006332 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f023 0201 	bic.w	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	611a      	str	r2, [r3, #16]
  }
}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40010400 	.word	0x40010400
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400
 800635c:	40014800 	.word	0x40014800
 8006360:	40001800 	.word	0x40001800
 8006364:	40001c00 	.word	0x40001c00
 8006368:	40002000 	.word	0x40002000

0800636c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006380:	2302      	movs	r3, #2
 8006382:	e05a      	b.n	800643a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a21      	ldr	r2, [pc, #132]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d022      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d0:	d01d      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1d      	ldr	r2, [pc, #116]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d018      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00e      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d009      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a17      	ldr	r2, [pc, #92]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a15      	ldr	r2, [pc, #84]	; (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d10c      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	4313      	orrs	r3, r2
 800641e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40010400 	.word	0x40010400
 800645c:	40014000 	.word	0x40014000
 8006460:	40001800 	.word	0x40001800

08006464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e042      	b.n	8006524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fb fba4 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2224      	movs	r2, #36	; 0x24
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fd69 	bl	8006fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08a      	sub	sp, #40	; 0x28
 8006530:	af02      	add	r7, sp, #8
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b20      	cmp	r3, #32
 800654a:	d175      	bne.n	8006638 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_UART_Transmit+0x2c>
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e06e      	b.n	800663a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2221      	movs	r2, #33	; 0x21
 8006566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800656a:	f7fb fd4b 	bl	8002004 <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006584:	d108      	bne.n	8006598 <HAL_UART_Transmit+0x6c>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e003      	b.n	80065a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800659c:	2300      	movs	r3, #0
 800659e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065a0:	e02e      	b.n	8006600 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2200      	movs	r2, #0
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fb05 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e03a      	b.n	800663a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	3302      	adds	r3, #2
 80065de:	61bb      	str	r3, [r7, #24]
 80065e0:	e007      	b.n	80065f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3301      	adds	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006604:	b29b      	uxth	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1cb      	bne.n	80065a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2200      	movs	r2, #0
 8006612:	2140      	movs	r1, #64	; 0x40
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fad1 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e006      	b.n	800663a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e000      	b.n	800663a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006638:	2302      	movs	r3, #2
  }
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b0ba      	sub	sp, #232	; 0xe8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800666a:	2300      	movs	r3, #0
 800666c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10f      	bne.n	80066aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <HAL_UART_IRQHandler+0x66>
 8006696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fbc2 	bl	8006e2c <UART_Receive_IT>
      return;
 80066a8:	e25b      	b.n	8006b62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80de 	beq.w	8006870 <HAL_UART_IRQHandler+0x22c>
 80066b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 80d1 	beq.w	8006870 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00b      	beq.n	80066f2 <HAL_UART_IRQHandler+0xae>
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f043 0201 	orr.w	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <HAL_UART_IRQHandler+0xd2>
 80066fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	f043 0202 	orr.w	r2, r3, #2
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00b      	beq.n	800673a <HAL_UART_IRQHandler+0xf6>
 8006722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	f043 0204 	orr.w	r2, r3, #4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d011      	beq.n	800676a <HAL_UART_IRQHandler+0x126>
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d105      	bne.n	800675e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	f043 0208 	orr.w	r2, r3, #8
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 81f2 	beq.w	8006b58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_UART_IRQHandler+0x14e>
 8006780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fb4d 	bl	8006e2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <HAL_UART_IRQHandler+0x17a>
 80067b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d04f      	beq.n	800685e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa55 	bl	8006c6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d141      	bne.n	8006856 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3314      	adds	r3, #20
 80067d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3314      	adds	r3, #20
 80067fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800680a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1d9      	bne.n	80067d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d013      	beq.n	800684e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	4a7e      	ldr	r2, [pc, #504]	; (8006a24 <HAL_UART_IRQHandler+0x3e0>)
 800682c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	4618      	mov	r0, r3
 8006834:	f7fb fff9 	bl	800282a <HAL_DMA_Abort_IT>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d016      	beq.n	800686c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006848:	4610      	mov	r0, r2
 800684a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	e00e      	b.n	800686c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f99e 	bl	8006b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	e00a      	b.n	800686c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f99a 	bl	8006b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	e006      	b.n	800686c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f996 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800686a:	e175      	b.n	8006b58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	bf00      	nop
    return;
 800686e:	e173      	b.n	8006b58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	2b01      	cmp	r3, #1
 8006876:	f040 814f 	bne.w	8006b18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800687a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687e:	f003 0310 	and.w	r3, r3, #16
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8148 	beq.w	8006b18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 8141 	beq.w	8006b18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b6:	2b40      	cmp	r3, #64	; 0x40
 80068b8:	f040 80b6 	bne.w	8006a28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8145 	beq.w	8006b5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068da:	429a      	cmp	r2, r3
 80068dc:	f080 813e 	bcs.w	8006b5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f2:	f000 8088 	beq.w	8006a06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800690c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	330c      	adds	r3, #12
 800691e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006922:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800692e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800693a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1d9      	bne.n	80068f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3314      	adds	r3, #20
 8006948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3314      	adds	r3, #20
 8006962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006966:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800696a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800696e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e1      	bne.n	8006942 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3314      	adds	r3, #20
 8006984:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800698e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e3      	bne.n	800697e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d6:	f023 0310 	bic.w	r3, r3, #16
 80069da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	330c      	adds	r3, #12
 80069e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80069ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e3      	bne.n	80069c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fb fea2 	bl	800274a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f8c1 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a22:	e09b      	b.n	8006b5c <HAL_UART_IRQHandler+0x518>
 8006a24:	08006d35 	.word	0x08006d35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 808e 	beq.w	8006b60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8089 	beq.w	8006b60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	330c      	adds	r3, #12
 8006a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a72:	647a      	str	r2, [r7, #68]	; 0x44
 8006a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e3      	bne.n	8006a4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	623b      	str	r3, [r7, #32]
   return(result);
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3314      	adds	r3, #20
 8006aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aaa:	633a      	str	r2, [r7, #48]	; 0x30
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e3      	bne.n	8006a86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0310 	bic.w	r3, r3, #16
 8006ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006af0:	61fa      	str	r2, [r7, #28]
 8006af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	69b9      	ldr	r1, [r7, #24]
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	617b      	str	r3, [r7, #20]
   return(result);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e3      	bne.n	8006acc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f847 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b16:	e023      	b.n	8006b60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d009      	beq.n	8006b38 <HAL_UART_IRQHandler+0x4f4>
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f913 	bl	8006d5c <UART_Transmit_IT>
    return;
 8006b36:	e014      	b.n	8006b62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00e      	beq.n	8006b62 <HAL_UART_IRQHandler+0x51e>
 8006b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f953 	bl	8006dfc <UART_EndTransmit_IT>
    return;
 8006b56:	e004      	b.n	8006b62 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b58:	bf00      	nop
 8006b5a:	e002      	b.n	8006b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b5c:	bf00      	nop
 8006b5e:	e000      	b.n	8006b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b60:	bf00      	nop
  }
}
 8006b62:	37e8      	adds	r7, #232	; 0xe8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bcc:	e03b      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d037      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd6:	f7fb fa15 	bl	8002004 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	6a3a      	ldr	r2, [r7, #32]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <UART_WaitOnFlagUntilTimeout+0x30>
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e03a      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d023      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b80      	cmp	r3, #128	; 0x80
 8006c02:	d020      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d01d      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d116      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f81d 	bl	8006c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2208      	movs	r2, #8
 8006c38:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e00f      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	bf0c      	ite	eq
 8006c56:	2301      	moveq	r3, #1
 8006c58:	2300      	movne	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d0b4      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b095      	sub	sp, #84	; 0x54
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	330c      	adds	r3, #12
 8006c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c96:	643a      	str	r2, [r7, #64]	; 0x40
 8006c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3314      	adds	r3, #20
 8006cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	f023 0301 	bic.w	r3, r3, #1
 8006cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3314      	adds	r3, #20
 8006cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e5      	bne.n	8006caa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d119      	bne.n	8006d1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f023 0310 	bic.w	r3, r3, #16
 8006cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d06:	61ba      	str	r2, [r7, #24]
 8006d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6979      	ldr	r1, [r7, #20]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	613b      	str	r3, [r7, #16]
   return(result);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d28:	bf00      	nop
 8006d2a:	3754      	adds	r7, #84	; 0x54
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff ff1e 	bl	8006b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b21      	cmp	r3, #33	; 0x21
 8006d6e:	d13e      	bne.n	8006dee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d78:	d114      	bne.n	8006da4 <UART_Transmit_IT+0x48>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d110      	bne.n	8006da4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	1c9a      	adds	r2, r3, #2
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	621a      	str	r2, [r3, #32]
 8006da2:	e008      	b.n	8006db6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	1c59      	adds	r1, r3, #1
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6211      	str	r1, [r2, #32]
 8006dae:	781a      	ldrb	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10f      	bne.n	8006dea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	e000      	b.n	8006df0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dee:	2302      	movs	r3, #2
  }
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff fea3 	bl	8006b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08c      	sub	sp, #48	; 0x30
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b22      	cmp	r3, #34	; 0x22
 8006e3e:	f040 80ae 	bne.w	8006f9e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4a:	d117      	bne.n	8006e7c <UART_Receive_IT+0x50>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d113      	bne.n	8006e7c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e54:	2300      	movs	r3, #0
 8006e56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	629a      	str	r2, [r3, #40]	; 0x28
 8006e7a:	e026      	b.n	8006eca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8e:	d007      	beq.n	8006ea0 <UART_Receive_IT+0x74>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <UART_Receive_IT+0x82>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e008      	b.n	8006ec0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d15d      	bne.n	8006f9a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0220 	bic.w	r2, r2, #32
 8006eec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006efc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d135      	bne.n	8006f90 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f023 0310 	bic.w	r3, r3, #16
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	330c      	adds	r3, #12
 8006f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4a:	623a      	str	r2, [r7, #32]
 8006f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	69f9      	ldr	r1, [r7, #28]
 8006f50:	6a3a      	ldr	r2, [r7, #32]
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d10a      	bne.n	8006f82 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff fe0b 	bl	8006ba4 <HAL_UARTEx_RxEventCallback>
 8006f8e:	e002      	b.n	8006f96 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fdf3 	bl	8006b7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e002      	b.n	8006fa0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f9e:	2302      	movs	r3, #2
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3730      	adds	r7, #48	; 0x30
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fac:	b0c0      	sub	sp, #256	; 0x100
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc4:	68d9      	ldr	r1, [r3, #12]
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	ea40 0301 	orr.w	r3, r0, r1
 8006fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007000:	f021 010c 	bic.w	r1, r1, #12
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800700e:	430b      	orrs	r3, r1
 8007010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800701e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007022:	6999      	ldr	r1, [r3, #24]
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	ea40 0301 	orr.w	r3, r0, r1
 800702e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4b8f      	ldr	r3, [pc, #572]	; (8007274 <UART_SetConfig+0x2cc>)
 8007038:	429a      	cmp	r2, r3
 800703a:	d005      	beq.n	8007048 <UART_SetConfig+0xa0>
 800703c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	4b8d      	ldr	r3, [pc, #564]	; (8007278 <UART_SetConfig+0x2d0>)
 8007044:	429a      	cmp	r2, r3
 8007046:	d104      	bne.n	8007052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007048:	f7fe ff68 	bl	8005f1c <HAL_RCC_GetPCLK2Freq>
 800704c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007050:	e003      	b.n	800705a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007052:	f7fe ff4f 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 8007056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800705a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007064:	f040 810c 	bne.w	8007280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800706c:	2200      	movs	r2, #0
 800706e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800707a:	4622      	mov	r2, r4
 800707c:	462b      	mov	r3, r5
 800707e:	1891      	adds	r1, r2, r2
 8007080:	65b9      	str	r1, [r7, #88]	; 0x58
 8007082:	415b      	adcs	r3, r3
 8007084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800708a:	4621      	mov	r1, r4
 800708c:	eb12 0801 	adds.w	r8, r2, r1
 8007090:	4629      	mov	r1, r5
 8007092:	eb43 0901 	adc.w	r9, r3, r1
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070aa:	4690      	mov	r8, r2
 80070ac:	4699      	mov	r9, r3
 80070ae:	4623      	mov	r3, r4
 80070b0:	eb18 0303 	adds.w	r3, r8, r3
 80070b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070b8:	462b      	mov	r3, r5
 80070ba:	eb49 0303 	adc.w	r3, r9, r3
 80070be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80070d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80070d6:	460b      	mov	r3, r1
 80070d8:	18db      	adds	r3, r3, r3
 80070da:	653b      	str	r3, [r7, #80]	; 0x50
 80070dc:	4613      	mov	r3, r2
 80070de:	eb42 0303 	adc.w	r3, r2, r3
 80070e2:	657b      	str	r3, [r7, #84]	; 0x54
 80070e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070ec:	f7f9 fd5c 	bl	8000ba8 <__aeabi_uldivmod>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4b61      	ldr	r3, [pc, #388]	; (800727c <UART_SetConfig+0x2d4>)
 80070f6:	fba3 2302 	umull	r2, r3, r3, r2
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	011c      	lsls	r4, r3, #4
 80070fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007102:	2200      	movs	r2, #0
 8007104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800710c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007110:	4642      	mov	r2, r8
 8007112:	464b      	mov	r3, r9
 8007114:	1891      	adds	r1, r2, r2
 8007116:	64b9      	str	r1, [r7, #72]	; 0x48
 8007118:	415b      	adcs	r3, r3
 800711a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800711c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007120:	4641      	mov	r1, r8
 8007122:	eb12 0a01 	adds.w	sl, r2, r1
 8007126:	4649      	mov	r1, r9
 8007128:	eb43 0b01 	adc.w	fp, r3, r1
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	f04f 0300 	mov.w	r3, #0
 8007134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800713c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007140:	4692      	mov	sl, r2
 8007142:	469b      	mov	fp, r3
 8007144:	4643      	mov	r3, r8
 8007146:	eb1a 0303 	adds.w	r3, sl, r3
 800714a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800714e:	464b      	mov	r3, r9
 8007150:	eb4b 0303 	adc.w	r3, fp, r3
 8007154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800716c:	460b      	mov	r3, r1
 800716e:	18db      	adds	r3, r3, r3
 8007170:	643b      	str	r3, [r7, #64]	; 0x40
 8007172:	4613      	mov	r3, r2
 8007174:	eb42 0303 	adc.w	r3, r2, r3
 8007178:	647b      	str	r3, [r7, #68]	; 0x44
 800717a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800717e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007182:	f7f9 fd11 	bl	8000ba8 <__aeabi_uldivmod>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4611      	mov	r1, r2
 800718c:	4b3b      	ldr	r3, [pc, #236]	; (800727c <UART_SetConfig+0x2d4>)
 800718e:	fba3 2301 	umull	r2, r3, r3, r1
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	2264      	movs	r2, #100	; 0x64
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	1acb      	subs	r3, r1, r3
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071a2:	4b36      	ldr	r3, [pc, #216]	; (800727c <UART_SetConfig+0x2d4>)
 80071a4:	fba3 2302 	umull	r2, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071b0:	441c      	add	r4, r3
 80071b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80071c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	1891      	adds	r1, r2, r2
 80071ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80071cc:	415b      	adcs	r3, r3
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071d4:	4641      	mov	r1, r8
 80071d6:	1851      	adds	r1, r2, r1
 80071d8:	6339      	str	r1, [r7, #48]	; 0x30
 80071da:	4649      	mov	r1, r9
 80071dc:	414b      	adcs	r3, r1
 80071de:	637b      	str	r3, [r7, #52]	; 0x34
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071ec:	4659      	mov	r1, fp
 80071ee:	00cb      	lsls	r3, r1, #3
 80071f0:	4651      	mov	r1, sl
 80071f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071f6:	4651      	mov	r1, sl
 80071f8:	00ca      	lsls	r2, r1, #3
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	4603      	mov	r3, r0
 8007200:	4642      	mov	r2, r8
 8007202:	189b      	adds	r3, r3, r2
 8007204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007208:	464b      	mov	r3, r9
 800720a:	460a      	mov	r2, r1
 800720c:	eb42 0303 	adc.w	r3, r2, r3
 8007210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007228:	460b      	mov	r3, r1
 800722a:	18db      	adds	r3, r3, r3
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28
 800722e:	4613      	mov	r3, r2
 8007230:	eb42 0303 	adc.w	r3, r2, r3
 8007234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800723a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800723e:	f7f9 fcb3 	bl	8000ba8 <__aeabi_uldivmod>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4b0d      	ldr	r3, [pc, #52]	; (800727c <UART_SetConfig+0x2d4>)
 8007248:	fba3 1302 	umull	r1, r3, r3, r2
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	2164      	movs	r1, #100	; 0x64
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	3332      	adds	r3, #50	; 0x32
 800725a:	4a08      	ldr	r2, [pc, #32]	; (800727c <UART_SetConfig+0x2d4>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	f003 0207 	and.w	r2, r3, #7
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4422      	add	r2, r4
 800726e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007270:	e106      	b.n	8007480 <UART_SetConfig+0x4d8>
 8007272:	bf00      	nop
 8007274:	40011000 	.word	0x40011000
 8007278:	40011400 	.word	0x40011400
 800727c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007284:	2200      	movs	r2, #0
 8007286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800728a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800728e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007292:	4642      	mov	r2, r8
 8007294:	464b      	mov	r3, r9
 8007296:	1891      	adds	r1, r2, r2
 8007298:	6239      	str	r1, [r7, #32]
 800729a:	415b      	adcs	r3, r3
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
 800729e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072a2:	4641      	mov	r1, r8
 80072a4:	1854      	adds	r4, r2, r1
 80072a6:	4649      	mov	r1, r9
 80072a8:	eb43 0501 	adc.w	r5, r3, r1
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	00eb      	lsls	r3, r5, #3
 80072b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ba:	00e2      	lsls	r2, r4, #3
 80072bc:	4614      	mov	r4, r2
 80072be:	461d      	mov	r5, r3
 80072c0:	4643      	mov	r3, r8
 80072c2:	18e3      	adds	r3, r4, r3
 80072c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072c8:	464b      	mov	r3, r9
 80072ca:	eb45 0303 	adc.w	r3, r5, r3
 80072ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072ee:	4629      	mov	r1, r5
 80072f0:	008b      	lsls	r3, r1, #2
 80072f2:	4621      	mov	r1, r4
 80072f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072f8:	4621      	mov	r1, r4
 80072fa:	008a      	lsls	r2, r1, #2
 80072fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007300:	f7f9 fc52 	bl	8000ba8 <__aeabi_uldivmod>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4b60      	ldr	r3, [pc, #384]	; (800748c <UART_SetConfig+0x4e4>)
 800730a:	fba3 2302 	umull	r2, r3, r3, r2
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	011c      	lsls	r4, r3, #4
 8007312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007316:	2200      	movs	r2, #0
 8007318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800731c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007324:	4642      	mov	r2, r8
 8007326:	464b      	mov	r3, r9
 8007328:	1891      	adds	r1, r2, r2
 800732a:	61b9      	str	r1, [r7, #24]
 800732c:	415b      	adcs	r3, r3
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007334:	4641      	mov	r1, r8
 8007336:	1851      	adds	r1, r2, r1
 8007338:	6139      	str	r1, [r7, #16]
 800733a:	4649      	mov	r1, r9
 800733c:	414b      	adcs	r3, r1
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	f04f 0200 	mov.w	r2, #0
 8007344:	f04f 0300 	mov.w	r3, #0
 8007348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800734c:	4659      	mov	r1, fp
 800734e:	00cb      	lsls	r3, r1, #3
 8007350:	4651      	mov	r1, sl
 8007352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007356:	4651      	mov	r1, sl
 8007358:	00ca      	lsls	r2, r1, #3
 800735a:	4610      	mov	r0, r2
 800735c:	4619      	mov	r1, r3
 800735e:	4603      	mov	r3, r0
 8007360:	4642      	mov	r2, r8
 8007362:	189b      	adds	r3, r3, r2
 8007364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007368:	464b      	mov	r3, r9
 800736a:	460a      	mov	r2, r1
 800736c:	eb42 0303 	adc.w	r3, r2, r3
 8007370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	67bb      	str	r3, [r7, #120]	; 0x78
 800737e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800738c:	4649      	mov	r1, r9
 800738e:	008b      	lsls	r3, r1, #2
 8007390:	4641      	mov	r1, r8
 8007392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007396:	4641      	mov	r1, r8
 8007398:	008a      	lsls	r2, r1, #2
 800739a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800739e:	f7f9 fc03 	bl	8000ba8 <__aeabi_uldivmod>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4611      	mov	r1, r2
 80073a8:	4b38      	ldr	r3, [pc, #224]	; (800748c <UART_SetConfig+0x4e4>)
 80073aa:	fba3 2301 	umull	r2, r3, r3, r1
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	2264      	movs	r2, #100	; 0x64
 80073b2:	fb02 f303 	mul.w	r3, r2, r3
 80073b6:	1acb      	subs	r3, r1, r3
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	3332      	adds	r3, #50	; 0x32
 80073bc:	4a33      	ldr	r2, [pc, #204]	; (800748c <UART_SetConfig+0x4e4>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073c8:	441c      	add	r4, r3
 80073ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ce:	2200      	movs	r2, #0
 80073d0:	673b      	str	r3, [r7, #112]	; 0x70
 80073d2:	677a      	str	r2, [r7, #116]	; 0x74
 80073d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	1891      	adds	r1, r2, r2
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	415b      	adcs	r3, r3
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073e8:	4641      	mov	r1, r8
 80073ea:	1851      	adds	r1, r2, r1
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	4649      	mov	r1, r9
 80073f0:	414b      	adcs	r3, r1
 80073f2:	607b      	str	r3, [r7, #4]
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007400:	4659      	mov	r1, fp
 8007402:	00cb      	lsls	r3, r1, #3
 8007404:	4651      	mov	r1, sl
 8007406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800740a:	4651      	mov	r1, sl
 800740c:	00ca      	lsls	r2, r1, #3
 800740e:	4610      	mov	r0, r2
 8007410:	4619      	mov	r1, r3
 8007412:	4603      	mov	r3, r0
 8007414:	4642      	mov	r2, r8
 8007416:	189b      	adds	r3, r3, r2
 8007418:	66bb      	str	r3, [r7, #104]	; 0x68
 800741a:	464b      	mov	r3, r9
 800741c:	460a      	mov	r2, r1
 800741e:	eb42 0303 	adc.w	r3, r2, r3
 8007422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	663b      	str	r3, [r7, #96]	; 0x60
 800742e:	667a      	str	r2, [r7, #100]	; 0x64
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	f04f 0300 	mov.w	r3, #0
 8007438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800743c:	4649      	mov	r1, r9
 800743e:	008b      	lsls	r3, r1, #2
 8007440:	4641      	mov	r1, r8
 8007442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007446:	4641      	mov	r1, r8
 8007448:	008a      	lsls	r2, r1, #2
 800744a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800744e:	f7f9 fbab 	bl	8000ba8 <__aeabi_uldivmod>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <UART_SetConfig+0x4e4>)
 8007458:	fba3 1302 	umull	r1, r3, r3, r2
 800745c:	095b      	lsrs	r3, r3, #5
 800745e:	2164      	movs	r1, #100	; 0x64
 8007460:	fb01 f303 	mul.w	r3, r1, r3
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	3332      	adds	r3, #50	; 0x32
 800746a:	4a08      	ldr	r2, [pc, #32]	; (800748c <UART_SetConfig+0x4e4>)
 800746c:	fba2 2303 	umull	r2, r3, r2, r3
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	f003 020f 	and.w	r2, r3, #15
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4422      	add	r2, r4
 800747e:	609a      	str	r2, [r3, #8]
}
 8007480:	bf00      	nop
 8007482:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007486:	46bd      	mov	sp, r7
 8007488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800748c:	51eb851f 	.word	0x51eb851f

08007490 <__cvt>:
 8007490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	ec55 4b10 	vmov	r4, r5, d0
 8007498:	2d00      	cmp	r5, #0
 800749a:	460e      	mov	r6, r1
 800749c:	4619      	mov	r1, r3
 800749e:	462b      	mov	r3, r5
 80074a0:	bfbb      	ittet	lt
 80074a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074a6:	461d      	movlt	r5, r3
 80074a8:	2300      	movge	r3, #0
 80074aa:	232d      	movlt	r3, #45	; 0x2d
 80074ac:	700b      	strb	r3, [r1, #0]
 80074ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074b4:	4691      	mov	r9, r2
 80074b6:	f023 0820 	bic.w	r8, r3, #32
 80074ba:	bfbc      	itt	lt
 80074bc:	4622      	movlt	r2, r4
 80074be:	4614      	movlt	r4, r2
 80074c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074c4:	d005      	beq.n	80074d2 <__cvt+0x42>
 80074c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074ca:	d100      	bne.n	80074ce <__cvt+0x3e>
 80074cc:	3601      	adds	r6, #1
 80074ce:	2102      	movs	r1, #2
 80074d0:	e000      	b.n	80074d4 <__cvt+0x44>
 80074d2:	2103      	movs	r1, #3
 80074d4:	ab03      	add	r3, sp, #12
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	ab02      	add	r3, sp, #8
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	ec45 4b10 	vmov	d0, r4, r5
 80074e0:	4653      	mov	r3, sl
 80074e2:	4632      	mov	r2, r6
 80074e4:	f000 fe5c 	bl	80081a0 <_dtoa_r>
 80074e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074ec:	4607      	mov	r7, r0
 80074ee:	d102      	bne.n	80074f6 <__cvt+0x66>
 80074f0:	f019 0f01 	tst.w	r9, #1
 80074f4:	d022      	beq.n	800753c <__cvt+0xac>
 80074f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074fa:	eb07 0906 	add.w	r9, r7, r6
 80074fe:	d110      	bne.n	8007522 <__cvt+0x92>
 8007500:	783b      	ldrb	r3, [r7, #0]
 8007502:	2b30      	cmp	r3, #48	; 0x30
 8007504:	d10a      	bne.n	800751c <__cvt+0x8c>
 8007506:	2200      	movs	r2, #0
 8007508:	2300      	movs	r3, #0
 800750a:	4620      	mov	r0, r4
 800750c:	4629      	mov	r1, r5
 800750e:	f7f9 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007512:	b918      	cbnz	r0, 800751c <__cvt+0x8c>
 8007514:	f1c6 0601 	rsb	r6, r6, #1
 8007518:	f8ca 6000 	str.w	r6, [sl]
 800751c:	f8da 3000 	ldr.w	r3, [sl]
 8007520:	4499      	add	r9, r3
 8007522:	2200      	movs	r2, #0
 8007524:	2300      	movs	r3, #0
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f9 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800752e:	b108      	cbz	r0, 8007534 <__cvt+0xa4>
 8007530:	f8cd 900c 	str.w	r9, [sp, #12]
 8007534:	2230      	movs	r2, #48	; 0x30
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	454b      	cmp	r3, r9
 800753a:	d307      	bcc.n	800754c <__cvt+0xbc>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007540:	1bdb      	subs	r3, r3, r7
 8007542:	4638      	mov	r0, r7
 8007544:	6013      	str	r3, [r2, #0]
 8007546:	b004      	add	sp, #16
 8007548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754c:	1c59      	adds	r1, r3, #1
 800754e:	9103      	str	r1, [sp, #12]
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	e7f0      	b.n	8007536 <__cvt+0xa6>

08007554 <__exponent>:
 8007554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007556:	4603      	mov	r3, r0
 8007558:	2900      	cmp	r1, #0
 800755a:	bfb8      	it	lt
 800755c:	4249      	neglt	r1, r1
 800755e:	f803 2b02 	strb.w	r2, [r3], #2
 8007562:	bfb4      	ite	lt
 8007564:	222d      	movlt	r2, #45	; 0x2d
 8007566:	222b      	movge	r2, #43	; 0x2b
 8007568:	2909      	cmp	r1, #9
 800756a:	7042      	strb	r2, [r0, #1]
 800756c:	dd2a      	ble.n	80075c4 <__exponent+0x70>
 800756e:	f10d 0207 	add.w	r2, sp, #7
 8007572:	4617      	mov	r7, r2
 8007574:	260a      	movs	r6, #10
 8007576:	4694      	mov	ip, r2
 8007578:	fb91 f5f6 	sdiv	r5, r1, r6
 800757c:	fb06 1415 	mls	r4, r6, r5, r1
 8007580:	3430      	adds	r4, #48	; 0x30
 8007582:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007586:	460c      	mov	r4, r1
 8007588:	2c63      	cmp	r4, #99	; 0x63
 800758a:	f102 32ff 	add.w	r2, r2, #4294967295
 800758e:	4629      	mov	r1, r5
 8007590:	dcf1      	bgt.n	8007576 <__exponent+0x22>
 8007592:	3130      	adds	r1, #48	; 0x30
 8007594:	f1ac 0402 	sub.w	r4, ip, #2
 8007598:	f802 1c01 	strb.w	r1, [r2, #-1]
 800759c:	1c41      	adds	r1, r0, #1
 800759e:	4622      	mov	r2, r4
 80075a0:	42ba      	cmp	r2, r7
 80075a2:	d30a      	bcc.n	80075ba <__exponent+0x66>
 80075a4:	f10d 0209 	add.w	r2, sp, #9
 80075a8:	eba2 020c 	sub.w	r2, r2, ip
 80075ac:	42bc      	cmp	r4, r7
 80075ae:	bf88      	it	hi
 80075b0:	2200      	movhi	r2, #0
 80075b2:	4413      	add	r3, r2
 80075b4:	1a18      	subs	r0, r3, r0
 80075b6:	b003      	add	sp, #12
 80075b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80075be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80075c2:	e7ed      	b.n	80075a0 <__exponent+0x4c>
 80075c4:	2330      	movs	r3, #48	; 0x30
 80075c6:	3130      	adds	r1, #48	; 0x30
 80075c8:	7083      	strb	r3, [r0, #2]
 80075ca:	70c1      	strb	r1, [r0, #3]
 80075cc:	1d03      	adds	r3, r0, #4
 80075ce:	e7f1      	b.n	80075b4 <__exponent+0x60>

080075d0 <_printf_float>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	ed2d 8b02 	vpush	{d8}
 80075d8:	b08d      	sub	sp, #52	; 0x34
 80075da:	460c      	mov	r4, r1
 80075dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075e0:	4616      	mov	r6, r2
 80075e2:	461f      	mov	r7, r3
 80075e4:	4605      	mov	r5, r0
 80075e6:	f000 fcd9 	bl	8007f9c <_localeconv_r>
 80075ea:	f8d0 a000 	ldr.w	sl, [r0]
 80075ee:	4650      	mov	r0, sl
 80075f0:	f7f8 fe3e 	bl	8000270 <strlen>
 80075f4:	2300      	movs	r3, #0
 80075f6:	930a      	str	r3, [sp, #40]	; 0x28
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	9305      	str	r3, [sp, #20]
 80075fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007600:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007604:	3307      	adds	r3, #7
 8007606:	f023 0307 	bic.w	r3, r3, #7
 800760a:	f103 0208 	add.w	r2, r3, #8
 800760e:	f8c8 2000 	str.w	r2, [r8]
 8007612:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800761a:	9307      	str	r3, [sp, #28]
 800761c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007620:	ee08 0a10 	vmov	s16, r0
 8007624:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800762c:	4b9e      	ldr	r3, [pc, #632]	; (80078a8 <_printf_float+0x2d8>)
 800762e:	f04f 32ff 	mov.w	r2, #4294967295
 8007632:	f7f9 fa7b 	bl	8000b2c <__aeabi_dcmpun>
 8007636:	bb88      	cbnz	r0, 800769c <_printf_float+0xcc>
 8007638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800763c:	4b9a      	ldr	r3, [pc, #616]	; (80078a8 <_printf_float+0x2d8>)
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	f7f9 fa55 	bl	8000af0 <__aeabi_dcmple>
 8007646:	bb48      	cbnz	r0, 800769c <_printf_float+0xcc>
 8007648:	2200      	movs	r2, #0
 800764a:	2300      	movs	r3, #0
 800764c:	4640      	mov	r0, r8
 800764e:	4649      	mov	r1, r9
 8007650:	f7f9 fa44 	bl	8000adc <__aeabi_dcmplt>
 8007654:	b110      	cbz	r0, 800765c <_printf_float+0x8c>
 8007656:	232d      	movs	r3, #45	; 0x2d
 8007658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800765c:	4a93      	ldr	r2, [pc, #588]	; (80078ac <_printf_float+0x2dc>)
 800765e:	4b94      	ldr	r3, [pc, #592]	; (80078b0 <_printf_float+0x2e0>)
 8007660:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007664:	bf94      	ite	ls
 8007666:	4690      	movls	r8, r2
 8007668:	4698      	movhi	r8, r3
 800766a:	2303      	movs	r3, #3
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	9b05      	ldr	r3, [sp, #20]
 8007670:	f023 0304 	bic.w	r3, r3, #4
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	f04f 0900 	mov.w	r9, #0
 800767a:	9700      	str	r7, [sp, #0]
 800767c:	4633      	mov	r3, r6
 800767e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007680:	4621      	mov	r1, r4
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f9da 	bl	8007a3c <_printf_common>
 8007688:	3001      	adds	r0, #1
 800768a:	f040 8090 	bne.w	80077ae <_printf_float+0x1de>
 800768e:	f04f 30ff 	mov.w	r0, #4294967295
 8007692:	b00d      	add	sp, #52	; 0x34
 8007694:	ecbd 8b02 	vpop	{d8}
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	4642      	mov	r2, r8
 800769e:	464b      	mov	r3, r9
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	f7f9 fa42 	bl	8000b2c <__aeabi_dcmpun>
 80076a8:	b140      	cbz	r0, 80076bc <_printf_float+0xec>
 80076aa:	464b      	mov	r3, r9
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bfbc      	itt	lt
 80076b0:	232d      	movlt	r3, #45	; 0x2d
 80076b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076b6:	4a7f      	ldr	r2, [pc, #508]	; (80078b4 <_printf_float+0x2e4>)
 80076b8:	4b7f      	ldr	r3, [pc, #508]	; (80078b8 <_printf_float+0x2e8>)
 80076ba:	e7d1      	b.n	8007660 <_printf_float+0x90>
 80076bc:	6863      	ldr	r3, [r4, #4]
 80076be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076c2:	9206      	str	r2, [sp, #24]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	d13f      	bne.n	8007748 <_printf_float+0x178>
 80076c8:	2306      	movs	r3, #6
 80076ca:	6063      	str	r3, [r4, #4]
 80076cc:	9b05      	ldr	r3, [sp, #20]
 80076ce:	6861      	ldr	r1, [r4, #4]
 80076d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076d4:	2300      	movs	r3, #0
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	ab0a      	add	r3, sp, #40	; 0x28
 80076da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076de:	ab09      	add	r3, sp, #36	; 0x24
 80076e0:	ec49 8b10 	vmov	d0, r8, r9
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	6022      	str	r2, [r4, #0]
 80076e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076ec:	4628      	mov	r0, r5
 80076ee:	f7ff fecf 	bl	8007490 <__cvt>
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076f6:	2b47      	cmp	r3, #71	; 0x47
 80076f8:	4680      	mov	r8, r0
 80076fa:	d108      	bne.n	800770e <_printf_float+0x13e>
 80076fc:	1cc8      	adds	r0, r1, #3
 80076fe:	db02      	blt.n	8007706 <_printf_float+0x136>
 8007700:	6863      	ldr	r3, [r4, #4]
 8007702:	4299      	cmp	r1, r3
 8007704:	dd41      	ble.n	800778a <_printf_float+0x1ba>
 8007706:	f1ab 0302 	sub.w	r3, fp, #2
 800770a:	fa5f fb83 	uxtb.w	fp, r3
 800770e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007712:	d820      	bhi.n	8007756 <_printf_float+0x186>
 8007714:	3901      	subs	r1, #1
 8007716:	465a      	mov	r2, fp
 8007718:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800771c:	9109      	str	r1, [sp, #36]	; 0x24
 800771e:	f7ff ff19 	bl	8007554 <__exponent>
 8007722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007724:	1813      	adds	r3, r2, r0
 8007726:	2a01      	cmp	r2, #1
 8007728:	4681      	mov	r9, r0
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	dc02      	bgt.n	8007734 <_printf_float+0x164>
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	07d2      	lsls	r2, r2, #31
 8007732:	d501      	bpl.n	8007738 <_printf_float+0x168>
 8007734:	3301      	adds	r3, #1
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800773c:	2b00      	cmp	r3, #0
 800773e:	d09c      	beq.n	800767a <_printf_float+0xaa>
 8007740:	232d      	movs	r3, #45	; 0x2d
 8007742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007746:	e798      	b.n	800767a <_printf_float+0xaa>
 8007748:	9a06      	ldr	r2, [sp, #24]
 800774a:	2a47      	cmp	r2, #71	; 0x47
 800774c:	d1be      	bne.n	80076cc <_printf_float+0xfc>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1bc      	bne.n	80076cc <_printf_float+0xfc>
 8007752:	2301      	movs	r3, #1
 8007754:	e7b9      	b.n	80076ca <_printf_float+0xfa>
 8007756:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800775a:	d118      	bne.n	800778e <_printf_float+0x1be>
 800775c:	2900      	cmp	r1, #0
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	dd0b      	ble.n	800777a <_printf_float+0x1aa>
 8007762:	6121      	str	r1, [r4, #16]
 8007764:	b913      	cbnz	r3, 800776c <_printf_float+0x19c>
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	07d0      	lsls	r0, r2, #31
 800776a:	d502      	bpl.n	8007772 <_printf_float+0x1a2>
 800776c:	3301      	adds	r3, #1
 800776e:	440b      	add	r3, r1
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	65a1      	str	r1, [r4, #88]	; 0x58
 8007774:	f04f 0900 	mov.w	r9, #0
 8007778:	e7de      	b.n	8007738 <_printf_float+0x168>
 800777a:	b913      	cbnz	r3, 8007782 <_printf_float+0x1b2>
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	07d2      	lsls	r2, r2, #31
 8007780:	d501      	bpl.n	8007786 <_printf_float+0x1b6>
 8007782:	3302      	adds	r3, #2
 8007784:	e7f4      	b.n	8007770 <_printf_float+0x1a0>
 8007786:	2301      	movs	r3, #1
 8007788:	e7f2      	b.n	8007770 <_printf_float+0x1a0>
 800778a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800778e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007790:	4299      	cmp	r1, r3
 8007792:	db05      	blt.n	80077a0 <_printf_float+0x1d0>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	6121      	str	r1, [r4, #16]
 8007798:	07d8      	lsls	r0, r3, #31
 800779a:	d5ea      	bpl.n	8007772 <_printf_float+0x1a2>
 800779c:	1c4b      	adds	r3, r1, #1
 800779e:	e7e7      	b.n	8007770 <_printf_float+0x1a0>
 80077a0:	2900      	cmp	r1, #0
 80077a2:	bfd4      	ite	le
 80077a4:	f1c1 0202 	rsble	r2, r1, #2
 80077a8:	2201      	movgt	r2, #1
 80077aa:	4413      	add	r3, r2
 80077ac:	e7e0      	b.n	8007770 <_printf_float+0x1a0>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	055a      	lsls	r2, r3, #21
 80077b2:	d407      	bmi.n	80077c4 <_printf_float+0x1f4>
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	4642      	mov	r2, r8
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	d12c      	bne.n	800781c <_printf_float+0x24c>
 80077c2:	e764      	b.n	800768e <_printf_float+0xbe>
 80077c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077c8:	f240 80e0 	bls.w	800798c <_printf_float+0x3bc>
 80077cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077d0:	2200      	movs	r2, #0
 80077d2:	2300      	movs	r3, #0
 80077d4:	f7f9 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d034      	beq.n	8007846 <_printf_float+0x276>
 80077dc:	4a37      	ldr	r2, [pc, #220]	; (80078bc <_printf_float+0x2ec>)
 80077de:	2301      	movs	r3, #1
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f af51 	beq.w	800768e <_printf_float+0xbe>
 80077ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f0:	429a      	cmp	r2, r3
 80077f2:	db02      	blt.n	80077fa <_printf_float+0x22a>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	07d8      	lsls	r0, r3, #31
 80077f8:	d510      	bpl.n	800781c <_printf_float+0x24c>
 80077fa:	ee18 3a10 	vmov	r3, s16
 80077fe:	4652      	mov	r2, sl
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f af41 	beq.w	800768e <_printf_float+0xbe>
 800780c:	f04f 0800 	mov.w	r8, #0
 8007810:	f104 091a 	add.w	r9, r4, #26
 8007814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007816:	3b01      	subs	r3, #1
 8007818:	4543      	cmp	r3, r8
 800781a:	dc09      	bgt.n	8007830 <_printf_float+0x260>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	079b      	lsls	r3, r3, #30
 8007820:	f100 8107 	bmi.w	8007a32 <_printf_float+0x462>
 8007824:	68e0      	ldr	r0, [r4, #12]
 8007826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007828:	4298      	cmp	r0, r3
 800782a:	bfb8      	it	lt
 800782c:	4618      	movlt	r0, r3
 800782e:	e730      	b.n	8007692 <_printf_float+0xc2>
 8007830:	2301      	movs	r3, #1
 8007832:	464a      	mov	r2, r9
 8007834:	4631      	mov	r1, r6
 8007836:	4628      	mov	r0, r5
 8007838:	47b8      	blx	r7
 800783a:	3001      	adds	r0, #1
 800783c:	f43f af27 	beq.w	800768e <_printf_float+0xbe>
 8007840:	f108 0801 	add.w	r8, r8, #1
 8007844:	e7e6      	b.n	8007814 <_printf_float+0x244>
 8007846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007848:	2b00      	cmp	r3, #0
 800784a:	dc39      	bgt.n	80078c0 <_printf_float+0x2f0>
 800784c:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <_printf_float+0x2ec>)
 800784e:	2301      	movs	r3, #1
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f af19 	beq.w	800768e <_printf_float+0xbe>
 800785c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007860:	4313      	orrs	r3, r2
 8007862:	d102      	bne.n	800786a <_printf_float+0x29a>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	07d9      	lsls	r1, r3, #31
 8007868:	d5d8      	bpl.n	800781c <_printf_float+0x24c>
 800786a:	ee18 3a10 	vmov	r3, s16
 800786e:	4652      	mov	r2, sl
 8007870:	4631      	mov	r1, r6
 8007872:	4628      	mov	r0, r5
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	f43f af09 	beq.w	800768e <_printf_float+0xbe>
 800787c:	f04f 0900 	mov.w	r9, #0
 8007880:	f104 0a1a 	add.w	sl, r4, #26
 8007884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007886:	425b      	negs	r3, r3
 8007888:	454b      	cmp	r3, r9
 800788a:	dc01      	bgt.n	8007890 <_printf_float+0x2c0>
 800788c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788e:	e792      	b.n	80077b6 <_printf_float+0x1e6>
 8007890:	2301      	movs	r3, #1
 8007892:	4652      	mov	r2, sl
 8007894:	4631      	mov	r1, r6
 8007896:	4628      	mov	r0, r5
 8007898:	47b8      	blx	r7
 800789a:	3001      	adds	r0, #1
 800789c:	f43f aef7 	beq.w	800768e <_printf_float+0xbe>
 80078a0:	f109 0901 	add.w	r9, r9, #1
 80078a4:	e7ee      	b.n	8007884 <_printf_float+0x2b4>
 80078a6:	bf00      	nop
 80078a8:	7fefffff 	.word	0x7fefffff
 80078ac:	0800a584 	.word	0x0800a584
 80078b0:	0800a588 	.word	0x0800a588
 80078b4:	0800a58c 	.word	0x0800a58c
 80078b8:	0800a590 	.word	0x0800a590
 80078bc:	0800a594 	.word	0x0800a594
 80078c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078c4:	429a      	cmp	r2, r3
 80078c6:	bfa8      	it	ge
 80078c8:	461a      	movge	r2, r3
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	4691      	mov	r9, r2
 80078ce:	dc37      	bgt.n	8007940 <_printf_float+0x370>
 80078d0:	f04f 0b00 	mov.w	fp, #0
 80078d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078d8:	f104 021a 	add.w	r2, r4, #26
 80078dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078de:	9305      	str	r3, [sp, #20]
 80078e0:	eba3 0309 	sub.w	r3, r3, r9
 80078e4:	455b      	cmp	r3, fp
 80078e6:	dc33      	bgt.n	8007950 <_printf_float+0x380>
 80078e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078ec:	429a      	cmp	r2, r3
 80078ee:	db3b      	blt.n	8007968 <_printf_float+0x398>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	07da      	lsls	r2, r3, #31
 80078f4:	d438      	bmi.n	8007968 <_printf_float+0x398>
 80078f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078fa:	eba2 0903 	sub.w	r9, r2, r3
 80078fe:	9b05      	ldr	r3, [sp, #20]
 8007900:	1ad2      	subs	r2, r2, r3
 8007902:	4591      	cmp	r9, r2
 8007904:	bfa8      	it	ge
 8007906:	4691      	movge	r9, r2
 8007908:	f1b9 0f00 	cmp.w	r9, #0
 800790c:	dc35      	bgt.n	800797a <_printf_float+0x3aa>
 800790e:	f04f 0800 	mov.w	r8, #0
 8007912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007916:	f104 0a1a 	add.w	sl, r4, #26
 800791a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	eba3 0309 	sub.w	r3, r3, r9
 8007924:	4543      	cmp	r3, r8
 8007926:	f77f af79 	ble.w	800781c <_printf_float+0x24c>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	f43f aeaa 	beq.w	800768e <_printf_float+0xbe>
 800793a:	f108 0801 	add.w	r8, r8, #1
 800793e:	e7ec      	b.n	800791a <_printf_float+0x34a>
 8007940:	4613      	mov	r3, r2
 8007942:	4631      	mov	r1, r6
 8007944:	4642      	mov	r2, r8
 8007946:	4628      	mov	r0, r5
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	d1c0      	bne.n	80078d0 <_printf_float+0x300>
 800794e:	e69e      	b.n	800768e <_printf_float+0xbe>
 8007950:	2301      	movs	r3, #1
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	9205      	str	r2, [sp, #20]
 8007958:	47b8      	blx	r7
 800795a:	3001      	adds	r0, #1
 800795c:	f43f ae97 	beq.w	800768e <_printf_float+0xbe>
 8007960:	9a05      	ldr	r2, [sp, #20]
 8007962:	f10b 0b01 	add.w	fp, fp, #1
 8007966:	e7b9      	b.n	80078dc <_printf_float+0x30c>
 8007968:	ee18 3a10 	vmov	r3, s16
 800796c:	4652      	mov	r2, sl
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	d1be      	bne.n	80078f6 <_printf_float+0x326>
 8007978:	e689      	b.n	800768e <_printf_float+0xbe>
 800797a:	9a05      	ldr	r2, [sp, #20]
 800797c:	464b      	mov	r3, r9
 800797e:	4442      	add	r2, r8
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	47b8      	blx	r7
 8007986:	3001      	adds	r0, #1
 8007988:	d1c1      	bne.n	800790e <_printf_float+0x33e>
 800798a:	e680      	b.n	800768e <_printf_float+0xbe>
 800798c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800798e:	2a01      	cmp	r2, #1
 8007990:	dc01      	bgt.n	8007996 <_printf_float+0x3c6>
 8007992:	07db      	lsls	r3, r3, #31
 8007994:	d53a      	bpl.n	8007a0c <_printf_float+0x43c>
 8007996:	2301      	movs	r3, #1
 8007998:	4642      	mov	r2, r8
 800799a:	4631      	mov	r1, r6
 800799c:	4628      	mov	r0, r5
 800799e:	47b8      	blx	r7
 80079a0:	3001      	adds	r0, #1
 80079a2:	f43f ae74 	beq.w	800768e <_printf_float+0xbe>
 80079a6:	ee18 3a10 	vmov	r3, s16
 80079aa:	4652      	mov	r2, sl
 80079ac:	4631      	mov	r1, r6
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b8      	blx	r7
 80079b2:	3001      	adds	r0, #1
 80079b4:	f43f ae6b 	beq.w	800768e <_printf_float+0xbe>
 80079b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079bc:	2200      	movs	r2, #0
 80079be:	2300      	movs	r3, #0
 80079c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80079c4:	f7f9 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80079c8:	b9d8      	cbnz	r0, 8007a02 <_printf_float+0x432>
 80079ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079ce:	f108 0201 	add.w	r2, r8, #1
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	d10e      	bne.n	80079fa <_printf_float+0x42a>
 80079dc:	e657      	b.n	800768e <_printf_float+0xbe>
 80079de:	2301      	movs	r3, #1
 80079e0:	4652      	mov	r2, sl
 80079e2:	4631      	mov	r1, r6
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b8      	blx	r7
 80079e8:	3001      	adds	r0, #1
 80079ea:	f43f ae50 	beq.w	800768e <_printf_float+0xbe>
 80079ee:	f108 0801 	add.w	r8, r8, #1
 80079f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f4:	3b01      	subs	r3, #1
 80079f6:	4543      	cmp	r3, r8
 80079f8:	dcf1      	bgt.n	80079de <_printf_float+0x40e>
 80079fa:	464b      	mov	r3, r9
 80079fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a00:	e6da      	b.n	80077b8 <_printf_float+0x1e8>
 8007a02:	f04f 0800 	mov.w	r8, #0
 8007a06:	f104 0a1a 	add.w	sl, r4, #26
 8007a0a:	e7f2      	b.n	80079f2 <_printf_float+0x422>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	4642      	mov	r2, r8
 8007a10:	e7df      	b.n	80079d2 <_printf_float+0x402>
 8007a12:	2301      	movs	r3, #1
 8007a14:	464a      	mov	r2, r9
 8007a16:	4631      	mov	r1, r6
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b8      	blx	r7
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f43f ae36 	beq.w	800768e <_printf_float+0xbe>
 8007a22:	f108 0801 	add.w	r8, r8, #1
 8007a26:	68e3      	ldr	r3, [r4, #12]
 8007a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a2a:	1a5b      	subs	r3, r3, r1
 8007a2c:	4543      	cmp	r3, r8
 8007a2e:	dcf0      	bgt.n	8007a12 <_printf_float+0x442>
 8007a30:	e6f8      	b.n	8007824 <_printf_float+0x254>
 8007a32:	f04f 0800 	mov.w	r8, #0
 8007a36:	f104 0919 	add.w	r9, r4, #25
 8007a3a:	e7f4      	b.n	8007a26 <_printf_float+0x456>

08007a3c <_printf_common>:
 8007a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	4616      	mov	r6, r2
 8007a42:	4699      	mov	r9, r3
 8007a44:	688a      	ldr	r2, [r1, #8]
 8007a46:	690b      	ldr	r3, [r1, #16]
 8007a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	bfb8      	it	lt
 8007a50:	4613      	movlt	r3, r2
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a58:	4607      	mov	r7, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b10a      	cbz	r2, 8007a62 <_printf_common+0x26>
 8007a5e:	3301      	adds	r3, #1
 8007a60:	6033      	str	r3, [r6, #0]
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	0699      	lsls	r1, r3, #26
 8007a66:	bf42      	ittt	mi
 8007a68:	6833      	ldrmi	r3, [r6, #0]
 8007a6a:	3302      	addmi	r3, #2
 8007a6c:	6033      	strmi	r3, [r6, #0]
 8007a6e:	6825      	ldr	r5, [r4, #0]
 8007a70:	f015 0506 	ands.w	r5, r5, #6
 8007a74:	d106      	bne.n	8007a84 <_printf_common+0x48>
 8007a76:	f104 0a19 	add.w	sl, r4, #25
 8007a7a:	68e3      	ldr	r3, [r4, #12]
 8007a7c:	6832      	ldr	r2, [r6, #0]
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	dc26      	bgt.n	8007ad2 <_printf_common+0x96>
 8007a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a88:	1e13      	subs	r3, r2, #0
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	bf18      	it	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	0692      	lsls	r2, r2, #26
 8007a92:	d42b      	bmi.n	8007aec <_printf_common+0xb0>
 8007a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a98:	4649      	mov	r1, r9
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	47c0      	blx	r8
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d01e      	beq.n	8007ae0 <_printf_common+0xa4>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	6922      	ldr	r2, [r4, #16]
 8007aa6:	f003 0306 	and.w	r3, r3, #6
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	bf02      	ittt	eq
 8007aae:	68e5      	ldreq	r5, [r4, #12]
 8007ab0:	6833      	ldreq	r3, [r6, #0]
 8007ab2:	1aed      	subeq	r5, r5, r3
 8007ab4:	68a3      	ldr	r3, [r4, #8]
 8007ab6:	bf0c      	ite	eq
 8007ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007abc:	2500      	movne	r5, #0
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	bfc4      	itt	gt
 8007ac2:	1a9b      	subgt	r3, r3, r2
 8007ac4:	18ed      	addgt	r5, r5, r3
 8007ac6:	2600      	movs	r6, #0
 8007ac8:	341a      	adds	r4, #26
 8007aca:	42b5      	cmp	r5, r6
 8007acc:	d11a      	bne.n	8007b04 <_printf_common+0xc8>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e008      	b.n	8007ae4 <_printf_common+0xa8>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4638      	mov	r0, r7
 8007ada:	47c0      	blx	r8
 8007adc:	3001      	adds	r0, #1
 8007ade:	d103      	bne.n	8007ae8 <_printf_common+0xac>
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	3501      	adds	r5, #1
 8007aea:	e7c6      	b.n	8007a7a <_printf_common+0x3e>
 8007aec:	18e1      	adds	r1, r4, r3
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	2030      	movs	r0, #48	; 0x30
 8007af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007af6:	4422      	add	r2, r4
 8007af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b00:	3302      	adds	r3, #2
 8007b02:	e7c7      	b.n	8007a94 <_printf_common+0x58>
 8007b04:	2301      	movs	r3, #1
 8007b06:	4622      	mov	r2, r4
 8007b08:	4649      	mov	r1, r9
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	47c0      	blx	r8
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d0e6      	beq.n	8007ae0 <_printf_common+0xa4>
 8007b12:	3601      	adds	r6, #1
 8007b14:	e7d9      	b.n	8007aca <_printf_common+0x8e>
	...

08007b18 <_printf_i>:
 8007b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	7e0f      	ldrb	r7, [r1, #24]
 8007b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b20:	2f78      	cmp	r7, #120	; 0x78
 8007b22:	4691      	mov	r9, r2
 8007b24:	4680      	mov	r8, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	469a      	mov	sl, r3
 8007b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b2e:	d807      	bhi.n	8007b40 <_printf_i+0x28>
 8007b30:	2f62      	cmp	r7, #98	; 0x62
 8007b32:	d80a      	bhi.n	8007b4a <_printf_i+0x32>
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	f000 80d4 	beq.w	8007ce2 <_printf_i+0x1ca>
 8007b3a:	2f58      	cmp	r7, #88	; 0x58
 8007b3c:	f000 80c0 	beq.w	8007cc0 <_printf_i+0x1a8>
 8007b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b48:	e03a      	b.n	8007bc0 <_printf_i+0xa8>
 8007b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b4e:	2b15      	cmp	r3, #21
 8007b50:	d8f6      	bhi.n	8007b40 <_printf_i+0x28>
 8007b52:	a101      	add	r1, pc, #4	; (adr r1, 8007b58 <_printf_i+0x40>)
 8007b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b58:	08007bb1 	.word	0x08007bb1
 8007b5c:	08007bc5 	.word	0x08007bc5
 8007b60:	08007b41 	.word	0x08007b41
 8007b64:	08007b41 	.word	0x08007b41
 8007b68:	08007b41 	.word	0x08007b41
 8007b6c:	08007b41 	.word	0x08007b41
 8007b70:	08007bc5 	.word	0x08007bc5
 8007b74:	08007b41 	.word	0x08007b41
 8007b78:	08007b41 	.word	0x08007b41
 8007b7c:	08007b41 	.word	0x08007b41
 8007b80:	08007b41 	.word	0x08007b41
 8007b84:	08007cc9 	.word	0x08007cc9
 8007b88:	08007bf1 	.word	0x08007bf1
 8007b8c:	08007c83 	.word	0x08007c83
 8007b90:	08007b41 	.word	0x08007b41
 8007b94:	08007b41 	.word	0x08007b41
 8007b98:	08007ceb 	.word	0x08007ceb
 8007b9c:	08007b41 	.word	0x08007b41
 8007ba0:	08007bf1 	.word	0x08007bf1
 8007ba4:	08007b41 	.word	0x08007b41
 8007ba8:	08007b41 	.word	0x08007b41
 8007bac:	08007c8b 	.word	0x08007c8b
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	1d1a      	adds	r2, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	602a      	str	r2, [r5, #0]
 8007bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e09f      	b.n	8007d04 <_printf_i+0x1ec>
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	0607      	lsls	r7, r0, #24
 8007bca:	f103 0104 	add.w	r1, r3, #4
 8007bce:	6029      	str	r1, [r5, #0]
 8007bd0:	d501      	bpl.n	8007bd6 <_printf_i+0xbe>
 8007bd2:	681e      	ldr	r6, [r3, #0]
 8007bd4:	e003      	b.n	8007bde <_printf_i+0xc6>
 8007bd6:	0646      	lsls	r6, r0, #25
 8007bd8:	d5fb      	bpl.n	8007bd2 <_printf_i+0xba>
 8007bda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007bde:	2e00      	cmp	r6, #0
 8007be0:	da03      	bge.n	8007bea <_printf_i+0xd2>
 8007be2:	232d      	movs	r3, #45	; 0x2d
 8007be4:	4276      	negs	r6, r6
 8007be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bea:	485a      	ldr	r0, [pc, #360]	; (8007d54 <_printf_i+0x23c>)
 8007bec:	230a      	movs	r3, #10
 8007bee:	e012      	b.n	8007c16 <_printf_i+0xfe>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	6820      	ldr	r0, [r4, #0]
 8007bf4:	1d19      	adds	r1, r3, #4
 8007bf6:	6029      	str	r1, [r5, #0]
 8007bf8:	0605      	lsls	r5, r0, #24
 8007bfa:	d501      	bpl.n	8007c00 <_printf_i+0xe8>
 8007bfc:	681e      	ldr	r6, [r3, #0]
 8007bfe:	e002      	b.n	8007c06 <_printf_i+0xee>
 8007c00:	0641      	lsls	r1, r0, #25
 8007c02:	d5fb      	bpl.n	8007bfc <_printf_i+0xe4>
 8007c04:	881e      	ldrh	r6, [r3, #0]
 8007c06:	4853      	ldr	r0, [pc, #332]	; (8007d54 <_printf_i+0x23c>)
 8007c08:	2f6f      	cmp	r7, #111	; 0x6f
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2308      	moveq	r3, #8
 8007c0e:	230a      	movne	r3, #10
 8007c10:	2100      	movs	r1, #0
 8007c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c16:	6865      	ldr	r5, [r4, #4]
 8007c18:	60a5      	str	r5, [r4, #8]
 8007c1a:	2d00      	cmp	r5, #0
 8007c1c:	bfa2      	ittt	ge
 8007c1e:	6821      	ldrge	r1, [r4, #0]
 8007c20:	f021 0104 	bicge.w	r1, r1, #4
 8007c24:	6021      	strge	r1, [r4, #0]
 8007c26:	b90e      	cbnz	r6, 8007c2c <_printf_i+0x114>
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	d04b      	beq.n	8007cc4 <_printf_i+0x1ac>
 8007c2c:	4615      	mov	r5, r2
 8007c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c32:	fb03 6711 	mls	r7, r3, r1, r6
 8007c36:	5dc7      	ldrb	r7, [r0, r7]
 8007c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c3c:	4637      	mov	r7, r6
 8007c3e:	42bb      	cmp	r3, r7
 8007c40:	460e      	mov	r6, r1
 8007c42:	d9f4      	bls.n	8007c2e <_printf_i+0x116>
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d10b      	bne.n	8007c60 <_printf_i+0x148>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	07de      	lsls	r6, r3, #31
 8007c4c:	d508      	bpl.n	8007c60 <_printf_i+0x148>
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	6861      	ldr	r1, [r4, #4]
 8007c52:	4299      	cmp	r1, r3
 8007c54:	bfde      	ittt	le
 8007c56:	2330      	movle	r3, #48	; 0x30
 8007c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c60:	1b52      	subs	r2, r2, r5
 8007c62:	6122      	str	r2, [r4, #16]
 8007c64:	f8cd a000 	str.w	sl, [sp]
 8007c68:	464b      	mov	r3, r9
 8007c6a:	aa03      	add	r2, sp, #12
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4640      	mov	r0, r8
 8007c70:	f7ff fee4 	bl	8007a3c <_printf_common>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d14a      	bne.n	8007d0e <_printf_i+0x1f6>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	b004      	add	sp, #16
 8007c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	f043 0320 	orr.w	r3, r3, #32
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	4833      	ldr	r0, [pc, #204]	; (8007d58 <_printf_i+0x240>)
 8007c8c:	2778      	movs	r7, #120	; 0x78
 8007c8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	6829      	ldr	r1, [r5, #0]
 8007c96:	061f      	lsls	r7, r3, #24
 8007c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c9c:	d402      	bmi.n	8007ca4 <_printf_i+0x18c>
 8007c9e:	065f      	lsls	r7, r3, #25
 8007ca0:	bf48      	it	mi
 8007ca2:	b2b6      	uxthmi	r6, r6
 8007ca4:	07df      	lsls	r7, r3, #31
 8007ca6:	bf48      	it	mi
 8007ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8007cac:	6029      	str	r1, [r5, #0]
 8007cae:	bf48      	it	mi
 8007cb0:	6023      	strmi	r3, [r4, #0]
 8007cb2:	b91e      	cbnz	r6, 8007cbc <_printf_i+0x1a4>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	f023 0320 	bic.w	r3, r3, #32
 8007cba:	6023      	str	r3, [r4, #0]
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	e7a7      	b.n	8007c10 <_printf_i+0xf8>
 8007cc0:	4824      	ldr	r0, [pc, #144]	; (8007d54 <_printf_i+0x23c>)
 8007cc2:	e7e4      	b.n	8007c8e <_printf_i+0x176>
 8007cc4:	4615      	mov	r5, r2
 8007cc6:	e7bd      	b.n	8007c44 <_printf_i+0x12c>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	6826      	ldr	r6, [r4, #0]
 8007ccc:	6961      	ldr	r1, [r4, #20]
 8007cce:	1d18      	adds	r0, r3, #4
 8007cd0:	6028      	str	r0, [r5, #0]
 8007cd2:	0635      	lsls	r5, r6, #24
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	d501      	bpl.n	8007cdc <_printf_i+0x1c4>
 8007cd8:	6019      	str	r1, [r3, #0]
 8007cda:	e002      	b.n	8007ce2 <_printf_i+0x1ca>
 8007cdc:	0670      	lsls	r0, r6, #25
 8007cde:	d5fb      	bpl.n	8007cd8 <_printf_i+0x1c0>
 8007ce0:	8019      	strh	r1, [r3, #0]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	6123      	str	r3, [r4, #16]
 8007ce6:	4615      	mov	r5, r2
 8007ce8:	e7bc      	b.n	8007c64 <_printf_i+0x14c>
 8007cea:	682b      	ldr	r3, [r5, #0]
 8007cec:	1d1a      	adds	r2, r3, #4
 8007cee:	602a      	str	r2, [r5, #0]
 8007cf0:	681d      	ldr	r5, [r3, #0]
 8007cf2:	6862      	ldr	r2, [r4, #4]
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f7f8 fa6a 	bl	80001d0 <memchr>
 8007cfc:	b108      	cbz	r0, 8007d02 <_printf_i+0x1ea>
 8007cfe:	1b40      	subs	r0, r0, r5
 8007d00:	6060      	str	r0, [r4, #4]
 8007d02:	6863      	ldr	r3, [r4, #4]
 8007d04:	6123      	str	r3, [r4, #16]
 8007d06:	2300      	movs	r3, #0
 8007d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d0c:	e7aa      	b.n	8007c64 <_printf_i+0x14c>
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	462a      	mov	r2, r5
 8007d12:	4649      	mov	r1, r9
 8007d14:	4640      	mov	r0, r8
 8007d16:	47d0      	blx	sl
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d0ad      	beq.n	8007c78 <_printf_i+0x160>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	079b      	lsls	r3, r3, #30
 8007d20:	d413      	bmi.n	8007d4a <_printf_i+0x232>
 8007d22:	68e0      	ldr	r0, [r4, #12]
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	4298      	cmp	r0, r3
 8007d28:	bfb8      	it	lt
 8007d2a:	4618      	movlt	r0, r3
 8007d2c:	e7a6      	b.n	8007c7c <_printf_i+0x164>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4632      	mov	r2, r6
 8007d32:	4649      	mov	r1, r9
 8007d34:	4640      	mov	r0, r8
 8007d36:	47d0      	blx	sl
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d09d      	beq.n	8007c78 <_printf_i+0x160>
 8007d3c:	3501      	adds	r5, #1
 8007d3e:	68e3      	ldr	r3, [r4, #12]
 8007d40:	9903      	ldr	r1, [sp, #12]
 8007d42:	1a5b      	subs	r3, r3, r1
 8007d44:	42ab      	cmp	r3, r5
 8007d46:	dcf2      	bgt.n	8007d2e <_printf_i+0x216>
 8007d48:	e7eb      	b.n	8007d22 <_printf_i+0x20a>
 8007d4a:	2500      	movs	r5, #0
 8007d4c:	f104 0619 	add.w	r6, r4, #25
 8007d50:	e7f5      	b.n	8007d3e <_printf_i+0x226>
 8007d52:	bf00      	nop
 8007d54:	0800a596 	.word	0x0800a596
 8007d58:	0800a5a7 	.word	0x0800a5a7

08007d5c <std>:
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	b510      	push	{r4, lr}
 8007d60:	4604      	mov	r4, r0
 8007d62:	e9c0 3300 	strd	r3, r3, [r0]
 8007d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d6a:	6083      	str	r3, [r0, #8]
 8007d6c:	8181      	strh	r1, [r0, #12]
 8007d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d70:	81c2      	strh	r2, [r0, #14]
 8007d72:	6183      	str	r3, [r0, #24]
 8007d74:	4619      	mov	r1, r3
 8007d76:	2208      	movs	r2, #8
 8007d78:	305c      	adds	r0, #92	; 0x5c
 8007d7a:	f000 f906 	bl	8007f8a <memset>
 8007d7e:	4b0d      	ldr	r3, [pc, #52]	; (8007db4 <std+0x58>)
 8007d80:	6263      	str	r3, [r4, #36]	; 0x24
 8007d82:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <std+0x5c>)
 8007d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <std+0x60>)
 8007d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <std+0x64>)
 8007d8c:	6323      	str	r3, [r4, #48]	; 0x30
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <std+0x68>)
 8007d90:	6224      	str	r4, [r4, #32]
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d006      	beq.n	8007da4 <std+0x48>
 8007d96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007d9a:	4294      	cmp	r4, r2
 8007d9c:	d002      	beq.n	8007da4 <std+0x48>
 8007d9e:	33d0      	adds	r3, #208	; 0xd0
 8007da0:	429c      	cmp	r4, r3
 8007da2:	d105      	bne.n	8007db0 <std+0x54>
 8007da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dac:	f000 b96a 	b.w	8008084 <__retarget_lock_init_recursive>
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	bf00      	nop
 8007db4:	08007f05 	.word	0x08007f05
 8007db8:	08007f27 	.word	0x08007f27
 8007dbc:	08007f5f 	.word	0x08007f5f
 8007dc0:	08007f83 	.word	0x08007f83
 8007dc4:	20000414 	.word	0x20000414

08007dc8 <stdio_exit_handler>:
 8007dc8:	4a02      	ldr	r2, [pc, #8]	; (8007dd4 <stdio_exit_handler+0xc>)
 8007dca:	4903      	ldr	r1, [pc, #12]	; (8007dd8 <stdio_exit_handler+0x10>)
 8007dcc:	4803      	ldr	r0, [pc, #12]	; (8007ddc <stdio_exit_handler+0x14>)
 8007dce:	f000 b869 	b.w	8007ea4 <_fwalk_sglue>
 8007dd2:	bf00      	nop
 8007dd4:	200000e4 	.word	0x200000e4
 8007dd8:	08009a11 	.word	0x08009a11
 8007ddc:	200000f0 	.word	0x200000f0

08007de0 <cleanup_stdio>:
 8007de0:	6841      	ldr	r1, [r0, #4]
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <cleanup_stdio+0x34>)
 8007de4:	4299      	cmp	r1, r3
 8007de6:	b510      	push	{r4, lr}
 8007de8:	4604      	mov	r4, r0
 8007dea:	d001      	beq.n	8007df0 <cleanup_stdio+0x10>
 8007dec:	f001 fe10 	bl	8009a10 <_fflush_r>
 8007df0:	68a1      	ldr	r1, [r4, #8]
 8007df2:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <cleanup_stdio+0x38>)
 8007df4:	4299      	cmp	r1, r3
 8007df6:	d002      	beq.n	8007dfe <cleanup_stdio+0x1e>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f001 fe09 	bl	8009a10 <_fflush_r>
 8007dfe:	68e1      	ldr	r1, [r4, #12]
 8007e00:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <cleanup_stdio+0x3c>)
 8007e02:	4299      	cmp	r1, r3
 8007e04:	d004      	beq.n	8007e10 <cleanup_stdio+0x30>
 8007e06:	4620      	mov	r0, r4
 8007e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e0c:	f001 be00 	b.w	8009a10 <_fflush_r>
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	bf00      	nop
 8007e14:	20000414 	.word	0x20000414
 8007e18:	2000047c 	.word	0x2000047c
 8007e1c:	200004e4 	.word	0x200004e4

08007e20 <global_stdio_init.part.0>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <global_stdio_init.part.0+0x30>)
 8007e24:	4c0b      	ldr	r4, [pc, #44]	; (8007e54 <global_stdio_init.part.0+0x34>)
 8007e26:	4a0c      	ldr	r2, [pc, #48]	; (8007e58 <global_stdio_init.part.0+0x38>)
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2104      	movs	r1, #4
 8007e30:	f7ff ff94 	bl	8007d5c <std>
 8007e34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e38:	2201      	movs	r2, #1
 8007e3a:	2109      	movs	r1, #9
 8007e3c:	f7ff ff8e 	bl	8007d5c <std>
 8007e40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e44:	2202      	movs	r2, #2
 8007e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4a:	2112      	movs	r1, #18
 8007e4c:	f7ff bf86 	b.w	8007d5c <std>
 8007e50:	2000054c 	.word	0x2000054c
 8007e54:	20000414 	.word	0x20000414
 8007e58:	08007dc9 	.word	0x08007dc9

08007e5c <__sfp_lock_acquire>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__sfp_lock_acquire+0x8>)
 8007e5e:	f000 b912 	b.w	8008086 <__retarget_lock_acquire_recursive>
 8007e62:	bf00      	nop
 8007e64:	20000555 	.word	0x20000555

08007e68 <__sfp_lock_release>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__sfp_lock_release+0x8>)
 8007e6a:	f000 b90d 	b.w	8008088 <__retarget_lock_release_recursive>
 8007e6e:	bf00      	nop
 8007e70:	20000555 	.word	0x20000555

08007e74 <__sinit>:
 8007e74:	b510      	push	{r4, lr}
 8007e76:	4604      	mov	r4, r0
 8007e78:	f7ff fff0 	bl	8007e5c <__sfp_lock_acquire>
 8007e7c:	6a23      	ldr	r3, [r4, #32]
 8007e7e:	b11b      	cbz	r3, 8007e88 <__sinit+0x14>
 8007e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e84:	f7ff bff0 	b.w	8007e68 <__sfp_lock_release>
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <__sinit+0x28>)
 8007e8a:	6223      	str	r3, [r4, #32]
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <__sinit+0x2c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1f5      	bne.n	8007e80 <__sinit+0xc>
 8007e94:	f7ff ffc4 	bl	8007e20 <global_stdio_init.part.0>
 8007e98:	e7f2      	b.n	8007e80 <__sinit+0xc>
 8007e9a:	bf00      	nop
 8007e9c:	08007de1 	.word	0x08007de1
 8007ea0:	2000054c 	.word	0x2000054c

08007ea4 <_fwalk_sglue>:
 8007ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	4688      	mov	r8, r1
 8007eac:	4614      	mov	r4, r2
 8007eae:	2600      	movs	r6, #0
 8007eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8007eb8:	d505      	bpl.n	8007ec6 <_fwalk_sglue+0x22>
 8007eba:	6824      	ldr	r4, [r4, #0]
 8007ebc:	2c00      	cmp	r4, #0
 8007ebe:	d1f7      	bne.n	8007eb0 <_fwalk_sglue+0xc>
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec6:	89ab      	ldrh	r3, [r5, #12]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d907      	bls.n	8007edc <_fwalk_sglue+0x38>
 8007ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	d003      	beq.n	8007edc <_fwalk_sglue+0x38>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	47c0      	blx	r8
 8007eda:	4306      	orrs	r6, r0
 8007edc:	3568      	adds	r5, #104	; 0x68
 8007ede:	e7e9      	b.n	8007eb4 <_fwalk_sglue+0x10>

08007ee0 <iprintf>:
 8007ee0:	b40f      	push	{r0, r1, r2, r3}
 8007ee2:	b507      	push	{r0, r1, r2, lr}
 8007ee4:	4906      	ldr	r1, [pc, #24]	; (8007f00 <iprintf+0x20>)
 8007ee6:	ab04      	add	r3, sp, #16
 8007ee8:	6808      	ldr	r0, [r1, #0]
 8007eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eee:	6881      	ldr	r1, [r0, #8]
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	f001 fbed 	bl	80096d0 <_vfiprintf_r>
 8007ef6:	b003      	add	sp, #12
 8007ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007efc:	b004      	add	sp, #16
 8007efe:	4770      	bx	lr
 8007f00:	2000013c 	.word	0x2000013c

08007f04 <__sread>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	460c      	mov	r4, r1
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	f000 f86c 	bl	8007fe8 <_read_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	bfab      	itete	ge
 8007f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f16:	89a3      	ldrhlt	r3, [r4, #12]
 8007f18:	181b      	addge	r3, r3, r0
 8007f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f1e:	bfac      	ite	ge
 8007f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f22:	81a3      	strhlt	r3, [r4, #12]
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <__swrite>:
 8007f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	898b      	ldrh	r3, [r1, #12]
 8007f2e:	05db      	lsls	r3, r3, #23
 8007f30:	4605      	mov	r5, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	4616      	mov	r6, r2
 8007f36:	d505      	bpl.n	8007f44 <__swrite+0x1e>
 8007f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f000 f840 	bl	8007fc4 <_lseek_r>
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f4e:	81a3      	strh	r3, [r4, #12]
 8007f50:	4632      	mov	r2, r6
 8007f52:	463b      	mov	r3, r7
 8007f54:	4628      	mov	r0, r5
 8007f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5a:	f000 b857 	b.w	800800c <_write_r>

08007f5e <__sseek>:
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	460c      	mov	r4, r1
 8007f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f66:	f000 f82d 	bl	8007fc4 <_lseek_r>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	bf15      	itete	ne
 8007f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f7a:	81a3      	strheq	r3, [r4, #12]
 8007f7c:	bf18      	it	ne
 8007f7e:	81a3      	strhne	r3, [r4, #12]
 8007f80:	bd10      	pop	{r4, pc}

08007f82 <__sclose>:
 8007f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f86:	f000 b80d 	b.w	8007fa4 <_close_r>

08007f8a <memset>:
 8007f8a:	4402      	add	r2, r0
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d100      	bne.n	8007f94 <memset+0xa>
 8007f92:	4770      	bx	lr
 8007f94:	f803 1b01 	strb.w	r1, [r3], #1
 8007f98:	e7f9      	b.n	8007f8e <memset+0x4>
	...

08007f9c <_localeconv_r>:
 8007f9c:	4800      	ldr	r0, [pc, #0]	; (8007fa0 <_localeconv_r+0x4>)
 8007f9e:	4770      	bx	lr
 8007fa0:	20000230 	.word	0x20000230

08007fa4 <_close_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d06      	ldr	r5, [pc, #24]	; (8007fc0 <_close_r+0x1c>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	602b      	str	r3, [r5, #0]
 8007fb0:	f7f9 ff1b 	bl	8001dea <_close>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_close_r+0x1a>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_close_r+0x1a>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	20000550 	.word	0x20000550

08007fc4 <_lseek_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_lseek_r+0x20>)
 8007fc8:	4604      	mov	r4, r0
 8007fca:	4608      	mov	r0, r1
 8007fcc:	4611      	mov	r1, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	602a      	str	r2, [r5, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f7f9 ff30 	bl	8001e38 <_lseek>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_lseek_r+0x1e>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_lseek_r+0x1e>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	20000550 	.word	0x20000550

08007fe8 <_read_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_read_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7f9 febe 	bl	8001d78 <_read>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_read_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_read_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20000550 	.word	0x20000550

0800800c <_write_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	; (800802c <_write_r+0x20>)
 8008010:	4604      	mov	r4, r0
 8008012:	4608      	mov	r0, r1
 8008014:	4611      	mov	r1, r2
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7f9 fec9 	bl	8001db2 <_write>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_write_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_write_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	20000550 	.word	0x20000550

08008030 <__errno>:
 8008030:	4b01      	ldr	r3, [pc, #4]	; (8008038 <__errno+0x8>)
 8008032:	6818      	ldr	r0, [r3, #0]
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	2000013c 	.word	0x2000013c

0800803c <__libc_init_array>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	4d0d      	ldr	r5, [pc, #52]	; (8008074 <__libc_init_array+0x38>)
 8008040:	4c0d      	ldr	r4, [pc, #52]	; (8008078 <__libc_init_array+0x3c>)
 8008042:	1b64      	subs	r4, r4, r5
 8008044:	10a4      	asrs	r4, r4, #2
 8008046:	2600      	movs	r6, #0
 8008048:	42a6      	cmp	r6, r4
 800804a:	d109      	bne.n	8008060 <__libc_init_array+0x24>
 800804c:	4d0b      	ldr	r5, [pc, #44]	; (800807c <__libc_init_array+0x40>)
 800804e:	4c0c      	ldr	r4, [pc, #48]	; (8008080 <__libc_init_array+0x44>)
 8008050:	f002 fa6c 	bl	800a52c <_init>
 8008054:	1b64      	subs	r4, r4, r5
 8008056:	10a4      	asrs	r4, r4, #2
 8008058:	2600      	movs	r6, #0
 800805a:	42a6      	cmp	r6, r4
 800805c:	d105      	bne.n	800806a <__libc_init_array+0x2e>
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	f855 3b04 	ldr.w	r3, [r5], #4
 8008064:	4798      	blx	r3
 8008066:	3601      	adds	r6, #1
 8008068:	e7ee      	b.n	8008048 <__libc_init_array+0xc>
 800806a:	f855 3b04 	ldr.w	r3, [r5], #4
 800806e:	4798      	blx	r3
 8008070:	3601      	adds	r6, #1
 8008072:	e7f2      	b.n	800805a <__libc_init_array+0x1e>
 8008074:	0800a970 	.word	0x0800a970
 8008078:	0800a970 	.word	0x0800a970
 800807c:	0800a970 	.word	0x0800a970
 8008080:	0800a974 	.word	0x0800a974

08008084 <__retarget_lock_init_recursive>:
 8008084:	4770      	bx	lr

08008086 <__retarget_lock_acquire_recursive>:
 8008086:	4770      	bx	lr

08008088 <__retarget_lock_release_recursive>:
 8008088:	4770      	bx	lr

0800808a <quorem>:
 800808a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808e:	6903      	ldr	r3, [r0, #16]
 8008090:	690c      	ldr	r4, [r1, #16]
 8008092:	42a3      	cmp	r3, r4
 8008094:	4607      	mov	r7, r0
 8008096:	db7e      	blt.n	8008196 <quorem+0x10c>
 8008098:	3c01      	subs	r4, #1
 800809a:	f101 0814 	add.w	r8, r1, #20
 800809e:	f100 0514 	add.w	r5, r0, #20
 80080a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080b0:	3301      	adds	r3, #1
 80080b2:	429a      	cmp	r2, r3
 80080b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80080c0:	d331      	bcc.n	8008126 <quorem+0x9c>
 80080c2:	f04f 0e00 	mov.w	lr, #0
 80080c6:	4640      	mov	r0, r8
 80080c8:	46ac      	mov	ip, r5
 80080ca:	46f2      	mov	sl, lr
 80080cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80080d0:	b293      	uxth	r3, r2
 80080d2:	fb06 e303 	mla	r3, r6, r3, lr
 80080d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080da:	0c1a      	lsrs	r2, r3, #16
 80080dc:	b29b      	uxth	r3, r3
 80080de:	ebaa 0303 	sub.w	r3, sl, r3
 80080e2:	f8dc a000 	ldr.w	sl, [ip]
 80080e6:	fa13 f38a 	uxtah	r3, r3, sl
 80080ea:	fb06 220e 	mla	r2, r6, lr, r2
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	9b00      	ldr	r3, [sp, #0]
 80080f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080f6:	b292      	uxth	r2, r2
 80080f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80080fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008100:	f8bd 3000 	ldrh.w	r3, [sp]
 8008104:	4581      	cmp	r9, r0
 8008106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800810a:	f84c 3b04 	str.w	r3, [ip], #4
 800810e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008112:	d2db      	bcs.n	80080cc <quorem+0x42>
 8008114:	f855 300b 	ldr.w	r3, [r5, fp]
 8008118:	b92b      	cbnz	r3, 8008126 <quorem+0x9c>
 800811a:	9b01      	ldr	r3, [sp, #4]
 800811c:	3b04      	subs	r3, #4
 800811e:	429d      	cmp	r5, r3
 8008120:	461a      	mov	r2, r3
 8008122:	d32c      	bcc.n	800817e <quorem+0xf4>
 8008124:	613c      	str	r4, [r7, #16]
 8008126:	4638      	mov	r0, r7
 8008128:	f001 f9a8 	bl	800947c <__mcmp>
 800812c:	2800      	cmp	r0, #0
 800812e:	db22      	blt.n	8008176 <quorem+0xec>
 8008130:	3601      	adds	r6, #1
 8008132:	4629      	mov	r1, r5
 8008134:	2000      	movs	r0, #0
 8008136:	f858 2b04 	ldr.w	r2, [r8], #4
 800813a:	f8d1 c000 	ldr.w	ip, [r1]
 800813e:	b293      	uxth	r3, r2
 8008140:	1ac3      	subs	r3, r0, r3
 8008142:	0c12      	lsrs	r2, r2, #16
 8008144:	fa13 f38c 	uxtah	r3, r3, ip
 8008148:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800814c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008150:	b29b      	uxth	r3, r3
 8008152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008156:	45c1      	cmp	r9, r8
 8008158:	f841 3b04 	str.w	r3, [r1], #4
 800815c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008160:	d2e9      	bcs.n	8008136 <quorem+0xac>
 8008162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800816a:	b922      	cbnz	r2, 8008176 <quorem+0xec>
 800816c:	3b04      	subs	r3, #4
 800816e:	429d      	cmp	r5, r3
 8008170:	461a      	mov	r2, r3
 8008172:	d30a      	bcc.n	800818a <quorem+0x100>
 8008174:	613c      	str	r4, [r7, #16]
 8008176:	4630      	mov	r0, r6
 8008178:	b003      	add	sp, #12
 800817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817e:	6812      	ldr	r2, [r2, #0]
 8008180:	3b04      	subs	r3, #4
 8008182:	2a00      	cmp	r2, #0
 8008184:	d1ce      	bne.n	8008124 <quorem+0x9a>
 8008186:	3c01      	subs	r4, #1
 8008188:	e7c9      	b.n	800811e <quorem+0x94>
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	3b04      	subs	r3, #4
 800818e:	2a00      	cmp	r2, #0
 8008190:	d1f0      	bne.n	8008174 <quorem+0xea>
 8008192:	3c01      	subs	r4, #1
 8008194:	e7eb      	b.n	800816e <quorem+0xe4>
 8008196:	2000      	movs	r0, #0
 8008198:	e7ee      	b.n	8008178 <quorem+0xee>
 800819a:	0000      	movs	r0, r0
 800819c:	0000      	movs	r0, r0
	...

080081a0 <_dtoa_r>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	ed2d 8b04 	vpush	{d8-d9}
 80081a8:	69c5      	ldr	r5, [r0, #28]
 80081aa:	b093      	sub	sp, #76	; 0x4c
 80081ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081b0:	ec57 6b10 	vmov	r6, r7, d0
 80081b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081b8:	9107      	str	r1, [sp, #28]
 80081ba:	4604      	mov	r4, r0
 80081bc:	920a      	str	r2, [sp, #40]	; 0x28
 80081be:	930d      	str	r3, [sp, #52]	; 0x34
 80081c0:	b975      	cbnz	r5, 80081e0 <_dtoa_r+0x40>
 80081c2:	2010      	movs	r0, #16
 80081c4:	f000 fe2a 	bl	8008e1c <malloc>
 80081c8:	4602      	mov	r2, r0
 80081ca:	61e0      	str	r0, [r4, #28]
 80081cc:	b920      	cbnz	r0, 80081d8 <_dtoa_r+0x38>
 80081ce:	4bae      	ldr	r3, [pc, #696]	; (8008488 <_dtoa_r+0x2e8>)
 80081d0:	21ef      	movs	r1, #239	; 0xef
 80081d2:	48ae      	ldr	r0, [pc, #696]	; (800848c <_dtoa_r+0x2ec>)
 80081d4:	f001 fcf8 	bl	8009bc8 <__assert_func>
 80081d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081dc:	6005      	str	r5, [r0, #0]
 80081de:	60c5      	str	r5, [r0, #12]
 80081e0:	69e3      	ldr	r3, [r4, #28]
 80081e2:	6819      	ldr	r1, [r3, #0]
 80081e4:	b151      	cbz	r1, 80081fc <_dtoa_r+0x5c>
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	604a      	str	r2, [r1, #4]
 80081ea:	2301      	movs	r3, #1
 80081ec:	4093      	lsls	r3, r2
 80081ee:	608b      	str	r3, [r1, #8]
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 ff07 	bl	8009004 <_Bfree>
 80081f6:	69e3      	ldr	r3, [r4, #28]
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	1e3b      	subs	r3, r7, #0
 80081fe:	bfbb      	ittet	lt
 8008200:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008204:	9303      	strlt	r3, [sp, #12]
 8008206:	2300      	movge	r3, #0
 8008208:	2201      	movlt	r2, #1
 800820a:	bfac      	ite	ge
 800820c:	f8c8 3000 	strge.w	r3, [r8]
 8008210:	f8c8 2000 	strlt.w	r2, [r8]
 8008214:	4b9e      	ldr	r3, [pc, #632]	; (8008490 <_dtoa_r+0x2f0>)
 8008216:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800821a:	ea33 0308 	bics.w	r3, r3, r8
 800821e:	d11b      	bne.n	8008258 <_dtoa_r+0xb8>
 8008220:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008222:	f242 730f 	movw	r3, #9999	; 0x270f
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800822c:	4333      	orrs	r3, r6
 800822e:	f000 8593 	beq.w	8008d58 <_dtoa_r+0xbb8>
 8008232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008234:	b963      	cbnz	r3, 8008250 <_dtoa_r+0xb0>
 8008236:	4b97      	ldr	r3, [pc, #604]	; (8008494 <_dtoa_r+0x2f4>)
 8008238:	e027      	b.n	800828a <_dtoa_r+0xea>
 800823a:	4b97      	ldr	r3, [pc, #604]	; (8008498 <_dtoa_r+0x2f8>)
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	9800      	ldr	r0, [sp, #0]
 8008246:	b013      	add	sp, #76	; 0x4c
 8008248:	ecbd 8b04 	vpop	{d8-d9}
 800824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008250:	4b90      	ldr	r3, [pc, #576]	; (8008494 <_dtoa_r+0x2f4>)
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	3303      	adds	r3, #3
 8008256:	e7f3      	b.n	8008240 <_dtoa_r+0xa0>
 8008258:	ed9d 7b02 	vldr	d7, [sp, #8]
 800825c:	2200      	movs	r2, #0
 800825e:	ec51 0b17 	vmov	r0, r1, d7
 8008262:	eeb0 8a47 	vmov.f32	s16, s14
 8008266:	eef0 8a67 	vmov.f32	s17, s15
 800826a:	2300      	movs	r3, #0
 800826c:	f7f8 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008270:	4681      	mov	r9, r0
 8008272:	b160      	cbz	r0, 800828e <_dtoa_r+0xee>
 8008274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008276:	2301      	movs	r3, #1
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8568 	beq.w	8008d52 <_dtoa_r+0xbb2>
 8008282:	4b86      	ldr	r3, [pc, #536]	; (800849c <_dtoa_r+0x2fc>)
 8008284:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	3b01      	subs	r3, #1
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	e7da      	b.n	8008244 <_dtoa_r+0xa4>
 800828e:	aa10      	add	r2, sp, #64	; 0x40
 8008290:	a911      	add	r1, sp, #68	; 0x44
 8008292:	4620      	mov	r0, r4
 8008294:	eeb0 0a48 	vmov.f32	s0, s16
 8008298:	eef0 0a68 	vmov.f32	s1, s17
 800829c:	f001 f994 	bl	80095c8 <__d2b>
 80082a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80082a4:	4682      	mov	sl, r0
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	d07f      	beq.n	80083aa <_dtoa_r+0x20a>
 80082aa:	ee18 3a90 	vmov	r3, s17
 80082ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80082b6:	ec51 0b18 	vmov	r0, r1, d8
 80082ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80082c6:	4619      	mov	r1, r3
 80082c8:	2200      	movs	r2, #0
 80082ca:	4b75      	ldr	r3, [pc, #468]	; (80084a0 <_dtoa_r+0x300>)
 80082cc:	f7f7 ffdc 	bl	8000288 <__aeabi_dsub>
 80082d0:	a367      	add	r3, pc, #412	; (adr r3, 8008470 <_dtoa_r+0x2d0>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f8 f98f 	bl	80005f8 <__aeabi_dmul>
 80082da:	a367      	add	r3, pc, #412	; (adr r3, 8008478 <_dtoa_r+0x2d8>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f7f7 ffd4 	bl	800028c <__adddf3>
 80082e4:	4606      	mov	r6, r0
 80082e6:	4628      	mov	r0, r5
 80082e8:	460f      	mov	r7, r1
 80082ea:	f7f8 f91b 	bl	8000524 <__aeabi_i2d>
 80082ee:	a364      	add	r3, pc, #400	; (adr r3, 8008480 <_dtoa_r+0x2e0>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f8 f980 	bl	80005f8 <__aeabi_dmul>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f7f7 ffc4 	bl	800028c <__adddf3>
 8008304:	4606      	mov	r6, r0
 8008306:	460f      	mov	r7, r1
 8008308:	f7f8 fc26 	bl	8000b58 <__aeabi_d2iz>
 800830c:	2200      	movs	r2, #0
 800830e:	4683      	mov	fp, r0
 8008310:	2300      	movs	r3, #0
 8008312:	4630      	mov	r0, r6
 8008314:	4639      	mov	r1, r7
 8008316:	f7f8 fbe1 	bl	8000adc <__aeabi_dcmplt>
 800831a:	b148      	cbz	r0, 8008330 <_dtoa_r+0x190>
 800831c:	4658      	mov	r0, fp
 800831e:	f7f8 f901 	bl	8000524 <__aeabi_i2d>
 8008322:	4632      	mov	r2, r6
 8008324:	463b      	mov	r3, r7
 8008326:	f7f8 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800832a:	b908      	cbnz	r0, 8008330 <_dtoa_r+0x190>
 800832c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008330:	f1bb 0f16 	cmp.w	fp, #22
 8008334:	d857      	bhi.n	80083e6 <_dtoa_r+0x246>
 8008336:	4b5b      	ldr	r3, [pc, #364]	; (80084a4 <_dtoa_r+0x304>)
 8008338:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	ec51 0b18 	vmov	r0, r1, d8
 8008344:	f7f8 fbca 	bl	8000adc <__aeabi_dcmplt>
 8008348:	2800      	cmp	r0, #0
 800834a:	d04e      	beq.n	80083ea <_dtoa_r+0x24a>
 800834c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008350:	2300      	movs	r3, #0
 8008352:	930c      	str	r3, [sp, #48]	; 0x30
 8008354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008356:	1b5b      	subs	r3, r3, r5
 8008358:	1e5a      	subs	r2, r3, #1
 800835a:	bf45      	ittet	mi
 800835c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008360:	9305      	strmi	r3, [sp, #20]
 8008362:	2300      	movpl	r3, #0
 8008364:	2300      	movmi	r3, #0
 8008366:	9206      	str	r2, [sp, #24]
 8008368:	bf54      	ite	pl
 800836a:	9305      	strpl	r3, [sp, #20]
 800836c:	9306      	strmi	r3, [sp, #24]
 800836e:	f1bb 0f00 	cmp.w	fp, #0
 8008372:	db3c      	blt.n	80083ee <_dtoa_r+0x24e>
 8008374:	9b06      	ldr	r3, [sp, #24]
 8008376:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800837a:	445b      	add	r3, fp
 800837c:	9306      	str	r3, [sp, #24]
 800837e:	2300      	movs	r3, #0
 8008380:	9308      	str	r3, [sp, #32]
 8008382:	9b07      	ldr	r3, [sp, #28]
 8008384:	2b09      	cmp	r3, #9
 8008386:	d868      	bhi.n	800845a <_dtoa_r+0x2ba>
 8008388:	2b05      	cmp	r3, #5
 800838a:	bfc4      	itt	gt
 800838c:	3b04      	subgt	r3, #4
 800838e:	9307      	strgt	r3, [sp, #28]
 8008390:	9b07      	ldr	r3, [sp, #28]
 8008392:	f1a3 0302 	sub.w	r3, r3, #2
 8008396:	bfcc      	ite	gt
 8008398:	2500      	movgt	r5, #0
 800839a:	2501      	movle	r5, #1
 800839c:	2b03      	cmp	r3, #3
 800839e:	f200 8085 	bhi.w	80084ac <_dtoa_r+0x30c>
 80083a2:	e8df f003 	tbb	[pc, r3]
 80083a6:	3b2e      	.short	0x3b2e
 80083a8:	5839      	.short	0x5839
 80083aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083ae:	441d      	add	r5, r3
 80083b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	bfc1      	itttt	gt
 80083b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80083c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80083c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80083c8:	bfd6      	itet	le
 80083ca:	f1c3 0320 	rsble	r3, r3, #32
 80083ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80083d2:	fa06 f003 	lslle.w	r0, r6, r3
 80083d6:	f7f8 f895 	bl	8000504 <__aeabi_ui2d>
 80083da:	2201      	movs	r2, #1
 80083dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80083e0:	3d01      	subs	r5, #1
 80083e2:	920e      	str	r2, [sp, #56]	; 0x38
 80083e4:	e76f      	b.n	80082c6 <_dtoa_r+0x126>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e7b3      	b.n	8008352 <_dtoa_r+0x1b2>
 80083ea:	900c      	str	r0, [sp, #48]	; 0x30
 80083ec:	e7b2      	b.n	8008354 <_dtoa_r+0x1b4>
 80083ee:	9b05      	ldr	r3, [sp, #20]
 80083f0:	eba3 030b 	sub.w	r3, r3, fp
 80083f4:	9305      	str	r3, [sp, #20]
 80083f6:	f1cb 0300 	rsb	r3, fp, #0
 80083fa:	9308      	str	r3, [sp, #32]
 80083fc:	2300      	movs	r3, #0
 80083fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008400:	e7bf      	b.n	8008382 <_dtoa_r+0x1e2>
 8008402:	2300      	movs	r3, #0
 8008404:	9309      	str	r3, [sp, #36]	; 0x24
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	2b00      	cmp	r3, #0
 800840a:	dc52      	bgt.n	80084b2 <_dtoa_r+0x312>
 800840c:	2301      	movs	r3, #1
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	461a      	mov	r2, r3
 8008414:	920a      	str	r2, [sp, #40]	; 0x28
 8008416:	e00b      	b.n	8008430 <_dtoa_r+0x290>
 8008418:	2301      	movs	r3, #1
 800841a:	e7f3      	b.n	8008404 <_dtoa_r+0x264>
 800841c:	2300      	movs	r3, #0
 800841e:	9309      	str	r3, [sp, #36]	; 0x24
 8008420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008422:	445b      	add	r3, fp
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	3301      	adds	r3, #1
 8008428:	2b01      	cmp	r3, #1
 800842a:	9304      	str	r3, [sp, #16]
 800842c:	bfb8      	it	lt
 800842e:	2301      	movlt	r3, #1
 8008430:	69e0      	ldr	r0, [r4, #28]
 8008432:	2100      	movs	r1, #0
 8008434:	2204      	movs	r2, #4
 8008436:	f102 0614 	add.w	r6, r2, #20
 800843a:	429e      	cmp	r6, r3
 800843c:	d93d      	bls.n	80084ba <_dtoa_r+0x31a>
 800843e:	6041      	str	r1, [r0, #4]
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fd9f 	bl	8008f84 <_Balloc>
 8008446:	9000      	str	r0, [sp, #0]
 8008448:	2800      	cmp	r0, #0
 800844a:	d139      	bne.n	80084c0 <_dtoa_r+0x320>
 800844c:	4b16      	ldr	r3, [pc, #88]	; (80084a8 <_dtoa_r+0x308>)
 800844e:	4602      	mov	r2, r0
 8008450:	f240 11af 	movw	r1, #431	; 0x1af
 8008454:	e6bd      	b.n	80081d2 <_dtoa_r+0x32>
 8008456:	2301      	movs	r3, #1
 8008458:	e7e1      	b.n	800841e <_dtoa_r+0x27e>
 800845a:	2501      	movs	r5, #1
 800845c:	2300      	movs	r3, #0
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	9509      	str	r5, [sp, #36]	; 0x24
 8008462:	f04f 33ff 	mov.w	r3, #4294967295
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	2200      	movs	r2, #0
 800846c:	2312      	movs	r3, #18
 800846e:	e7d1      	b.n	8008414 <_dtoa_r+0x274>
 8008470:	636f4361 	.word	0x636f4361
 8008474:	3fd287a7 	.word	0x3fd287a7
 8008478:	8b60c8b3 	.word	0x8b60c8b3
 800847c:	3fc68a28 	.word	0x3fc68a28
 8008480:	509f79fb 	.word	0x509f79fb
 8008484:	3fd34413 	.word	0x3fd34413
 8008488:	0800a5c5 	.word	0x0800a5c5
 800848c:	0800a5dc 	.word	0x0800a5dc
 8008490:	7ff00000 	.word	0x7ff00000
 8008494:	0800a5c1 	.word	0x0800a5c1
 8008498:	0800a5b8 	.word	0x0800a5b8
 800849c:	0800a595 	.word	0x0800a595
 80084a0:	3ff80000 	.word	0x3ff80000
 80084a4:	0800a6c8 	.word	0x0800a6c8
 80084a8:	0800a634 	.word	0x0800a634
 80084ac:	2301      	movs	r3, #1
 80084ae:	9309      	str	r3, [sp, #36]	; 0x24
 80084b0:	e7d7      	b.n	8008462 <_dtoa_r+0x2c2>
 80084b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	9304      	str	r3, [sp, #16]
 80084b8:	e7ba      	b.n	8008430 <_dtoa_r+0x290>
 80084ba:	3101      	adds	r1, #1
 80084bc:	0052      	lsls	r2, r2, #1
 80084be:	e7ba      	b.n	8008436 <_dtoa_r+0x296>
 80084c0:	69e3      	ldr	r3, [r4, #28]
 80084c2:	9a00      	ldr	r2, [sp, #0]
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	2b0e      	cmp	r3, #14
 80084ca:	f200 80a8 	bhi.w	800861e <_dtoa_r+0x47e>
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	f000 80a5 	beq.w	800861e <_dtoa_r+0x47e>
 80084d4:	f1bb 0f00 	cmp.w	fp, #0
 80084d8:	dd38      	ble.n	800854c <_dtoa_r+0x3ac>
 80084da:	4bc0      	ldr	r3, [pc, #768]	; (80087dc <_dtoa_r+0x63c>)
 80084dc:	f00b 020f 	and.w	r2, fp, #15
 80084e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80084e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80084ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80084f0:	d019      	beq.n	8008526 <_dtoa_r+0x386>
 80084f2:	4bbb      	ldr	r3, [pc, #748]	; (80087e0 <_dtoa_r+0x640>)
 80084f4:	ec51 0b18 	vmov	r0, r1, d8
 80084f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084fc:	f7f8 f9a6 	bl	800084c <__aeabi_ddiv>
 8008500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008504:	f008 080f 	and.w	r8, r8, #15
 8008508:	2503      	movs	r5, #3
 800850a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80087e0 <_dtoa_r+0x640>
 800850e:	f1b8 0f00 	cmp.w	r8, #0
 8008512:	d10a      	bne.n	800852a <_dtoa_r+0x38a>
 8008514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008518:	4632      	mov	r2, r6
 800851a:	463b      	mov	r3, r7
 800851c:	f7f8 f996 	bl	800084c <__aeabi_ddiv>
 8008520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008524:	e02b      	b.n	800857e <_dtoa_r+0x3de>
 8008526:	2502      	movs	r5, #2
 8008528:	e7ef      	b.n	800850a <_dtoa_r+0x36a>
 800852a:	f018 0f01 	tst.w	r8, #1
 800852e:	d008      	beq.n	8008542 <_dtoa_r+0x3a2>
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008538:	f7f8 f85e 	bl	80005f8 <__aeabi_dmul>
 800853c:	3501      	adds	r5, #1
 800853e:	4606      	mov	r6, r0
 8008540:	460f      	mov	r7, r1
 8008542:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008546:	f109 0908 	add.w	r9, r9, #8
 800854a:	e7e0      	b.n	800850e <_dtoa_r+0x36e>
 800854c:	f000 809f 	beq.w	800868e <_dtoa_r+0x4ee>
 8008550:	f1cb 0600 	rsb	r6, fp, #0
 8008554:	4ba1      	ldr	r3, [pc, #644]	; (80087dc <_dtoa_r+0x63c>)
 8008556:	4fa2      	ldr	r7, [pc, #648]	; (80087e0 <_dtoa_r+0x640>)
 8008558:	f006 020f 	and.w	r2, r6, #15
 800855c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	ec51 0b18 	vmov	r0, r1, d8
 8008568:	f7f8 f846 	bl	80005f8 <__aeabi_dmul>
 800856c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008570:	1136      	asrs	r6, r6, #4
 8008572:	2300      	movs	r3, #0
 8008574:	2502      	movs	r5, #2
 8008576:	2e00      	cmp	r6, #0
 8008578:	d17e      	bne.n	8008678 <_dtoa_r+0x4d8>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1d0      	bne.n	8008520 <_dtoa_r+0x380>
 800857e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008580:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8084 	beq.w	8008692 <_dtoa_r+0x4f2>
 800858a:	4b96      	ldr	r3, [pc, #600]	; (80087e4 <_dtoa_r+0x644>)
 800858c:	2200      	movs	r2, #0
 800858e:	4640      	mov	r0, r8
 8008590:	4649      	mov	r1, r9
 8008592:	f7f8 faa3 	bl	8000adc <__aeabi_dcmplt>
 8008596:	2800      	cmp	r0, #0
 8008598:	d07b      	beq.n	8008692 <_dtoa_r+0x4f2>
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d078      	beq.n	8008692 <_dtoa_r+0x4f2>
 80085a0:	9b01      	ldr	r3, [sp, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dd39      	ble.n	800861a <_dtoa_r+0x47a>
 80085a6:	4b90      	ldr	r3, [pc, #576]	; (80087e8 <_dtoa_r+0x648>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	f7f8 f823 	bl	80005f8 <__aeabi_dmul>
 80085b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b6:	9e01      	ldr	r6, [sp, #4]
 80085b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80085bc:	3501      	adds	r5, #1
 80085be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085c2:	4628      	mov	r0, r5
 80085c4:	f7f7 ffae 	bl	8000524 <__aeabi_i2d>
 80085c8:	4642      	mov	r2, r8
 80085ca:	464b      	mov	r3, r9
 80085cc:	f7f8 f814 	bl	80005f8 <__aeabi_dmul>
 80085d0:	4b86      	ldr	r3, [pc, #536]	; (80087ec <_dtoa_r+0x64c>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	f7f7 fe5a 	bl	800028c <__adddf3>
 80085d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80085dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085e0:	9303      	str	r3, [sp, #12]
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	d158      	bne.n	8008698 <_dtoa_r+0x4f8>
 80085e6:	4b82      	ldr	r3, [pc, #520]	; (80087f0 <_dtoa_r+0x650>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7f7 fe4b 	bl	8000288 <__aeabi_dsub>
 80085f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085f6:	4680      	mov	r8, r0
 80085f8:	4689      	mov	r9, r1
 80085fa:	f7f8 fa8d 	bl	8000b18 <__aeabi_dcmpgt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	f040 8296 	bne.w	8008b30 <_dtoa_r+0x990>
 8008604:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008608:	4640      	mov	r0, r8
 800860a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800860e:	4649      	mov	r1, r9
 8008610:	f7f8 fa64 	bl	8000adc <__aeabi_dcmplt>
 8008614:	2800      	cmp	r0, #0
 8008616:	f040 8289 	bne.w	8008b2c <_dtoa_r+0x98c>
 800861a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800861e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008620:	2b00      	cmp	r3, #0
 8008622:	f2c0 814e 	blt.w	80088c2 <_dtoa_r+0x722>
 8008626:	f1bb 0f0e 	cmp.w	fp, #14
 800862a:	f300 814a 	bgt.w	80088c2 <_dtoa_r+0x722>
 800862e:	4b6b      	ldr	r3, [pc, #428]	; (80087dc <_dtoa_r+0x63c>)
 8008630:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008634:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800863a:	2b00      	cmp	r3, #0
 800863c:	f280 80dc 	bge.w	80087f8 <_dtoa_r+0x658>
 8008640:	9b04      	ldr	r3, [sp, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f300 80d8 	bgt.w	80087f8 <_dtoa_r+0x658>
 8008648:	f040 826f 	bne.w	8008b2a <_dtoa_r+0x98a>
 800864c:	4b68      	ldr	r3, [pc, #416]	; (80087f0 <_dtoa_r+0x650>)
 800864e:	2200      	movs	r2, #0
 8008650:	4640      	mov	r0, r8
 8008652:	4649      	mov	r1, r9
 8008654:	f7f7 ffd0 	bl	80005f8 <__aeabi_dmul>
 8008658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800865c:	f7f8 fa52 	bl	8000b04 <__aeabi_dcmpge>
 8008660:	9e04      	ldr	r6, [sp, #16]
 8008662:	4637      	mov	r7, r6
 8008664:	2800      	cmp	r0, #0
 8008666:	f040 8245 	bne.w	8008af4 <_dtoa_r+0x954>
 800866a:	9d00      	ldr	r5, [sp, #0]
 800866c:	2331      	movs	r3, #49	; 0x31
 800866e:	f805 3b01 	strb.w	r3, [r5], #1
 8008672:	f10b 0b01 	add.w	fp, fp, #1
 8008676:	e241      	b.n	8008afc <_dtoa_r+0x95c>
 8008678:	07f2      	lsls	r2, r6, #31
 800867a:	d505      	bpl.n	8008688 <_dtoa_r+0x4e8>
 800867c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008680:	f7f7 ffba 	bl	80005f8 <__aeabi_dmul>
 8008684:	3501      	adds	r5, #1
 8008686:	2301      	movs	r3, #1
 8008688:	1076      	asrs	r6, r6, #1
 800868a:	3708      	adds	r7, #8
 800868c:	e773      	b.n	8008576 <_dtoa_r+0x3d6>
 800868e:	2502      	movs	r5, #2
 8008690:	e775      	b.n	800857e <_dtoa_r+0x3de>
 8008692:	9e04      	ldr	r6, [sp, #16]
 8008694:	465f      	mov	r7, fp
 8008696:	e792      	b.n	80085be <_dtoa_r+0x41e>
 8008698:	9900      	ldr	r1, [sp, #0]
 800869a:	4b50      	ldr	r3, [pc, #320]	; (80087dc <_dtoa_r+0x63c>)
 800869c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086a0:	4431      	add	r1, r6
 80086a2:	9102      	str	r1, [sp, #8]
 80086a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086a6:	eeb0 9a47 	vmov.f32	s18, s14
 80086aa:	eef0 9a67 	vmov.f32	s19, s15
 80086ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086b6:	2900      	cmp	r1, #0
 80086b8:	d044      	beq.n	8008744 <_dtoa_r+0x5a4>
 80086ba:	494e      	ldr	r1, [pc, #312]	; (80087f4 <_dtoa_r+0x654>)
 80086bc:	2000      	movs	r0, #0
 80086be:	f7f8 f8c5 	bl	800084c <__aeabi_ddiv>
 80086c2:	ec53 2b19 	vmov	r2, r3, d9
 80086c6:	f7f7 fddf 	bl	8000288 <__aeabi_dsub>
 80086ca:	9d00      	ldr	r5, [sp, #0]
 80086cc:	ec41 0b19 	vmov	d9, r0, r1
 80086d0:	4649      	mov	r1, r9
 80086d2:	4640      	mov	r0, r8
 80086d4:	f7f8 fa40 	bl	8000b58 <__aeabi_d2iz>
 80086d8:	4606      	mov	r6, r0
 80086da:	f7f7 ff23 	bl	8000524 <__aeabi_i2d>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4640      	mov	r0, r8
 80086e4:	4649      	mov	r1, r9
 80086e6:	f7f7 fdcf 	bl	8000288 <__aeabi_dsub>
 80086ea:	3630      	adds	r6, #48	; 0x30
 80086ec:	f805 6b01 	strb.w	r6, [r5], #1
 80086f0:	ec53 2b19 	vmov	r2, r3, d9
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	f7f8 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d164      	bne.n	80087ca <_dtoa_r+0x62a>
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	4937      	ldr	r1, [pc, #220]	; (80087e4 <_dtoa_r+0x644>)
 8008706:	2000      	movs	r0, #0
 8008708:	f7f7 fdbe 	bl	8000288 <__aeabi_dsub>
 800870c:	ec53 2b19 	vmov	r2, r3, d9
 8008710:	f7f8 f9e4 	bl	8000adc <__aeabi_dcmplt>
 8008714:	2800      	cmp	r0, #0
 8008716:	f040 80b6 	bne.w	8008886 <_dtoa_r+0x6e6>
 800871a:	9b02      	ldr	r3, [sp, #8]
 800871c:	429d      	cmp	r5, r3
 800871e:	f43f af7c 	beq.w	800861a <_dtoa_r+0x47a>
 8008722:	4b31      	ldr	r3, [pc, #196]	; (80087e8 <_dtoa_r+0x648>)
 8008724:	ec51 0b19 	vmov	r0, r1, d9
 8008728:	2200      	movs	r2, #0
 800872a:	f7f7 ff65 	bl	80005f8 <__aeabi_dmul>
 800872e:	4b2e      	ldr	r3, [pc, #184]	; (80087e8 <_dtoa_r+0x648>)
 8008730:	ec41 0b19 	vmov	d9, r0, r1
 8008734:	2200      	movs	r2, #0
 8008736:	4640      	mov	r0, r8
 8008738:	4649      	mov	r1, r9
 800873a:	f7f7 ff5d 	bl	80005f8 <__aeabi_dmul>
 800873e:	4680      	mov	r8, r0
 8008740:	4689      	mov	r9, r1
 8008742:	e7c5      	b.n	80086d0 <_dtoa_r+0x530>
 8008744:	ec51 0b17 	vmov	r0, r1, d7
 8008748:	f7f7 ff56 	bl	80005f8 <__aeabi_dmul>
 800874c:	9b02      	ldr	r3, [sp, #8]
 800874e:	9d00      	ldr	r5, [sp, #0]
 8008750:	930f      	str	r3, [sp, #60]	; 0x3c
 8008752:	ec41 0b19 	vmov	d9, r0, r1
 8008756:	4649      	mov	r1, r9
 8008758:	4640      	mov	r0, r8
 800875a:	f7f8 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800875e:	4606      	mov	r6, r0
 8008760:	f7f7 fee0 	bl	8000524 <__aeabi_i2d>
 8008764:	3630      	adds	r6, #48	; 0x30
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f7 fd8b 	bl	8000288 <__aeabi_dsub>
 8008772:	f805 6b01 	strb.w	r6, [r5], #1
 8008776:	9b02      	ldr	r3, [sp, #8]
 8008778:	429d      	cmp	r5, r3
 800877a:	4680      	mov	r8, r0
 800877c:	4689      	mov	r9, r1
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	d124      	bne.n	80087ce <_dtoa_r+0x62e>
 8008784:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <_dtoa_r+0x654>)
 8008786:	ec51 0b19 	vmov	r0, r1, d9
 800878a:	f7f7 fd7f 	bl	800028c <__adddf3>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4640      	mov	r0, r8
 8008794:	4649      	mov	r1, r9
 8008796:	f7f8 f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800879a:	2800      	cmp	r0, #0
 800879c:	d173      	bne.n	8008886 <_dtoa_r+0x6e6>
 800879e:	ec53 2b19 	vmov	r2, r3, d9
 80087a2:	4914      	ldr	r1, [pc, #80]	; (80087f4 <_dtoa_r+0x654>)
 80087a4:	2000      	movs	r0, #0
 80087a6:	f7f7 fd6f 	bl	8000288 <__aeabi_dsub>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f8 f993 	bl	8000adc <__aeabi_dcmplt>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f43f af2f 	beq.w	800861a <_dtoa_r+0x47a>
 80087bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087be:	1e6b      	subs	r3, r5, #1
 80087c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80087c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087c6:	2b30      	cmp	r3, #48	; 0x30
 80087c8:	d0f8      	beq.n	80087bc <_dtoa_r+0x61c>
 80087ca:	46bb      	mov	fp, r7
 80087cc:	e04a      	b.n	8008864 <_dtoa_r+0x6c4>
 80087ce:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <_dtoa_r+0x648>)
 80087d0:	f7f7 ff12 	bl	80005f8 <__aeabi_dmul>
 80087d4:	4680      	mov	r8, r0
 80087d6:	4689      	mov	r9, r1
 80087d8:	e7bd      	b.n	8008756 <_dtoa_r+0x5b6>
 80087da:	bf00      	nop
 80087dc:	0800a6c8 	.word	0x0800a6c8
 80087e0:	0800a6a0 	.word	0x0800a6a0
 80087e4:	3ff00000 	.word	0x3ff00000
 80087e8:	40240000 	.word	0x40240000
 80087ec:	401c0000 	.word	0x401c0000
 80087f0:	40140000 	.word	0x40140000
 80087f4:	3fe00000 	.word	0x3fe00000
 80087f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80087fc:	9d00      	ldr	r5, [sp, #0]
 80087fe:	4642      	mov	r2, r8
 8008800:	464b      	mov	r3, r9
 8008802:	4630      	mov	r0, r6
 8008804:	4639      	mov	r1, r7
 8008806:	f7f8 f821 	bl	800084c <__aeabi_ddiv>
 800880a:	f7f8 f9a5 	bl	8000b58 <__aeabi_d2iz>
 800880e:	9001      	str	r0, [sp, #4]
 8008810:	f7f7 fe88 	bl	8000524 <__aeabi_i2d>
 8008814:	4642      	mov	r2, r8
 8008816:	464b      	mov	r3, r9
 8008818:	f7f7 feee 	bl	80005f8 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4630      	mov	r0, r6
 8008822:	4639      	mov	r1, r7
 8008824:	f7f7 fd30 	bl	8000288 <__aeabi_dsub>
 8008828:	9e01      	ldr	r6, [sp, #4]
 800882a:	9f04      	ldr	r7, [sp, #16]
 800882c:	3630      	adds	r6, #48	; 0x30
 800882e:	f805 6b01 	strb.w	r6, [r5], #1
 8008832:	9e00      	ldr	r6, [sp, #0]
 8008834:	1bae      	subs	r6, r5, r6
 8008836:	42b7      	cmp	r7, r6
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	d134      	bne.n	80088a8 <_dtoa_r+0x708>
 800883e:	f7f7 fd25 	bl	800028c <__adddf3>
 8008842:	4642      	mov	r2, r8
 8008844:	464b      	mov	r3, r9
 8008846:	4606      	mov	r6, r0
 8008848:	460f      	mov	r7, r1
 800884a:	f7f8 f965 	bl	8000b18 <__aeabi_dcmpgt>
 800884e:	b9c8      	cbnz	r0, 8008884 <_dtoa_r+0x6e4>
 8008850:	4642      	mov	r2, r8
 8008852:	464b      	mov	r3, r9
 8008854:	4630      	mov	r0, r6
 8008856:	4639      	mov	r1, r7
 8008858:	f7f8 f936 	bl	8000ac8 <__aeabi_dcmpeq>
 800885c:	b110      	cbz	r0, 8008864 <_dtoa_r+0x6c4>
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	07db      	lsls	r3, r3, #31
 8008862:	d40f      	bmi.n	8008884 <_dtoa_r+0x6e4>
 8008864:	4651      	mov	r1, sl
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fbcc 	bl	8009004 <_Bfree>
 800886c:	2300      	movs	r3, #0
 800886e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008870:	702b      	strb	r3, [r5, #0]
 8008872:	f10b 0301 	add.w	r3, fp, #1
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800887a:	2b00      	cmp	r3, #0
 800887c:	f43f ace2 	beq.w	8008244 <_dtoa_r+0xa4>
 8008880:	601d      	str	r5, [r3, #0]
 8008882:	e4df      	b.n	8008244 <_dtoa_r+0xa4>
 8008884:	465f      	mov	r7, fp
 8008886:	462b      	mov	r3, r5
 8008888:	461d      	mov	r5, r3
 800888a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800888e:	2a39      	cmp	r2, #57	; 0x39
 8008890:	d106      	bne.n	80088a0 <_dtoa_r+0x700>
 8008892:	9a00      	ldr	r2, [sp, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d1f7      	bne.n	8008888 <_dtoa_r+0x6e8>
 8008898:	9900      	ldr	r1, [sp, #0]
 800889a:	2230      	movs	r2, #48	; 0x30
 800889c:	3701      	adds	r7, #1
 800889e:	700a      	strb	r2, [r1, #0]
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	3201      	adds	r2, #1
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	e790      	b.n	80087ca <_dtoa_r+0x62a>
 80088a8:	4ba3      	ldr	r3, [pc, #652]	; (8008b38 <_dtoa_r+0x998>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	f7f7 fea4 	bl	80005f8 <__aeabi_dmul>
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	f7f8 f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d09e      	beq.n	80087fe <_dtoa_r+0x65e>
 80088c0:	e7d0      	b.n	8008864 <_dtoa_r+0x6c4>
 80088c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088c4:	2a00      	cmp	r2, #0
 80088c6:	f000 80ca 	beq.w	8008a5e <_dtoa_r+0x8be>
 80088ca:	9a07      	ldr	r2, [sp, #28]
 80088cc:	2a01      	cmp	r2, #1
 80088ce:	f300 80ad 	bgt.w	8008a2c <_dtoa_r+0x88c>
 80088d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	f000 80a5 	beq.w	8008a24 <_dtoa_r+0x884>
 80088da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088de:	9e08      	ldr	r6, [sp, #32]
 80088e0:	9d05      	ldr	r5, [sp, #20]
 80088e2:	9a05      	ldr	r2, [sp, #20]
 80088e4:	441a      	add	r2, r3
 80088e6:	9205      	str	r2, [sp, #20]
 80088e8:	9a06      	ldr	r2, [sp, #24]
 80088ea:	2101      	movs	r1, #1
 80088ec:	441a      	add	r2, r3
 80088ee:	4620      	mov	r0, r4
 80088f0:	9206      	str	r2, [sp, #24]
 80088f2:	f000 fc3d 	bl	8009170 <__i2b>
 80088f6:	4607      	mov	r7, r0
 80088f8:	b165      	cbz	r5, 8008914 <_dtoa_r+0x774>
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd09      	ble.n	8008914 <_dtoa_r+0x774>
 8008900:	42ab      	cmp	r3, r5
 8008902:	9a05      	ldr	r2, [sp, #20]
 8008904:	bfa8      	it	ge
 8008906:	462b      	movge	r3, r5
 8008908:	1ad2      	subs	r2, r2, r3
 800890a:	9205      	str	r2, [sp, #20]
 800890c:	9a06      	ldr	r2, [sp, #24]
 800890e:	1aed      	subs	r5, r5, r3
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	9306      	str	r3, [sp, #24]
 8008914:	9b08      	ldr	r3, [sp, #32]
 8008916:	b1f3      	cbz	r3, 8008956 <_dtoa_r+0x7b6>
 8008918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80a3 	beq.w	8008a66 <_dtoa_r+0x8c6>
 8008920:	2e00      	cmp	r6, #0
 8008922:	dd10      	ble.n	8008946 <_dtoa_r+0x7a6>
 8008924:	4639      	mov	r1, r7
 8008926:	4632      	mov	r2, r6
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fce1 	bl	80092f0 <__pow5mult>
 800892e:	4652      	mov	r2, sl
 8008930:	4601      	mov	r1, r0
 8008932:	4607      	mov	r7, r0
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fc31 	bl	800919c <__multiply>
 800893a:	4651      	mov	r1, sl
 800893c:	4680      	mov	r8, r0
 800893e:	4620      	mov	r0, r4
 8008940:	f000 fb60 	bl	8009004 <_Bfree>
 8008944:	46c2      	mov	sl, r8
 8008946:	9b08      	ldr	r3, [sp, #32]
 8008948:	1b9a      	subs	r2, r3, r6
 800894a:	d004      	beq.n	8008956 <_dtoa_r+0x7b6>
 800894c:	4651      	mov	r1, sl
 800894e:	4620      	mov	r0, r4
 8008950:	f000 fcce 	bl	80092f0 <__pow5mult>
 8008954:	4682      	mov	sl, r0
 8008956:	2101      	movs	r1, #1
 8008958:	4620      	mov	r0, r4
 800895a:	f000 fc09 	bl	8009170 <__i2b>
 800895e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008960:	2b00      	cmp	r3, #0
 8008962:	4606      	mov	r6, r0
 8008964:	f340 8081 	ble.w	8008a6a <_dtoa_r+0x8ca>
 8008968:	461a      	mov	r2, r3
 800896a:	4601      	mov	r1, r0
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fcbf 	bl	80092f0 <__pow5mult>
 8008972:	9b07      	ldr	r3, [sp, #28]
 8008974:	2b01      	cmp	r3, #1
 8008976:	4606      	mov	r6, r0
 8008978:	dd7a      	ble.n	8008a70 <_dtoa_r+0x8d0>
 800897a:	f04f 0800 	mov.w	r8, #0
 800897e:	6933      	ldr	r3, [r6, #16]
 8008980:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008984:	6918      	ldr	r0, [r3, #16]
 8008986:	f000 fba5 	bl	80090d4 <__hi0bits>
 800898a:	f1c0 0020 	rsb	r0, r0, #32
 800898e:	9b06      	ldr	r3, [sp, #24]
 8008990:	4418      	add	r0, r3
 8008992:	f010 001f 	ands.w	r0, r0, #31
 8008996:	f000 8094 	beq.w	8008ac2 <_dtoa_r+0x922>
 800899a:	f1c0 0320 	rsb	r3, r0, #32
 800899e:	2b04      	cmp	r3, #4
 80089a0:	f340 8085 	ble.w	8008aae <_dtoa_r+0x90e>
 80089a4:	9b05      	ldr	r3, [sp, #20]
 80089a6:	f1c0 001c 	rsb	r0, r0, #28
 80089aa:	4403      	add	r3, r0
 80089ac:	9305      	str	r3, [sp, #20]
 80089ae:	9b06      	ldr	r3, [sp, #24]
 80089b0:	4403      	add	r3, r0
 80089b2:	4405      	add	r5, r0
 80089b4:	9306      	str	r3, [sp, #24]
 80089b6:	9b05      	ldr	r3, [sp, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dd05      	ble.n	80089c8 <_dtoa_r+0x828>
 80089bc:	4651      	mov	r1, sl
 80089be:	461a      	mov	r2, r3
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 fcef 	bl	80093a4 <__lshift>
 80089c6:	4682      	mov	sl, r0
 80089c8:	9b06      	ldr	r3, [sp, #24]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dd05      	ble.n	80089da <_dtoa_r+0x83a>
 80089ce:	4631      	mov	r1, r6
 80089d0:	461a      	mov	r2, r3
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fce6 	bl	80093a4 <__lshift>
 80089d8:	4606      	mov	r6, r0
 80089da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d072      	beq.n	8008ac6 <_dtoa_r+0x926>
 80089e0:	4631      	mov	r1, r6
 80089e2:	4650      	mov	r0, sl
 80089e4:	f000 fd4a 	bl	800947c <__mcmp>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	da6c      	bge.n	8008ac6 <_dtoa_r+0x926>
 80089ec:	2300      	movs	r3, #0
 80089ee:	4651      	mov	r1, sl
 80089f0:	220a      	movs	r2, #10
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 fb28 	bl	8009048 <__multadd>
 80089f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089fe:	4682      	mov	sl, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 81b0 	beq.w	8008d66 <_dtoa_r+0xbc6>
 8008a06:	2300      	movs	r3, #0
 8008a08:	4639      	mov	r1, r7
 8008a0a:	220a      	movs	r2, #10
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f000 fb1b 	bl	8009048 <__multadd>
 8008a12:	9b01      	ldr	r3, [sp, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	4607      	mov	r7, r0
 8008a18:	f300 8096 	bgt.w	8008b48 <_dtoa_r+0x9a8>
 8008a1c:	9b07      	ldr	r3, [sp, #28]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	dc59      	bgt.n	8008ad6 <_dtoa_r+0x936>
 8008a22:	e091      	b.n	8008b48 <_dtoa_r+0x9a8>
 8008a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a2a:	e758      	b.n	80088de <_dtoa_r+0x73e>
 8008a2c:	9b04      	ldr	r3, [sp, #16]
 8008a2e:	1e5e      	subs	r6, r3, #1
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	42b3      	cmp	r3, r6
 8008a34:	bfbf      	itttt	lt
 8008a36:	9b08      	ldrlt	r3, [sp, #32]
 8008a38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008a3a:	9608      	strlt	r6, [sp, #32]
 8008a3c:	1af3      	sublt	r3, r6, r3
 8008a3e:	bfb4      	ite	lt
 8008a40:	18d2      	addlt	r2, r2, r3
 8008a42:	1b9e      	subge	r6, r3, r6
 8008a44:	9b04      	ldr	r3, [sp, #16]
 8008a46:	bfbc      	itt	lt
 8008a48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008a4a:	2600      	movlt	r6, #0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bfb7      	itett	lt
 8008a50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008a54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008a58:	1a9d      	sublt	r5, r3, r2
 8008a5a:	2300      	movlt	r3, #0
 8008a5c:	e741      	b.n	80088e2 <_dtoa_r+0x742>
 8008a5e:	9e08      	ldr	r6, [sp, #32]
 8008a60:	9d05      	ldr	r5, [sp, #20]
 8008a62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a64:	e748      	b.n	80088f8 <_dtoa_r+0x758>
 8008a66:	9a08      	ldr	r2, [sp, #32]
 8008a68:	e770      	b.n	800894c <_dtoa_r+0x7ac>
 8008a6a:	9b07      	ldr	r3, [sp, #28]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	dc19      	bgt.n	8008aa4 <_dtoa_r+0x904>
 8008a70:	9b02      	ldr	r3, [sp, #8]
 8008a72:	b9bb      	cbnz	r3, 8008aa4 <_dtoa_r+0x904>
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a7a:	b99b      	cbnz	r3, 8008aa4 <_dtoa_r+0x904>
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a82:	0d1b      	lsrs	r3, r3, #20
 8008a84:	051b      	lsls	r3, r3, #20
 8008a86:	b183      	cbz	r3, 8008aaa <_dtoa_r+0x90a>
 8008a88:	9b05      	ldr	r3, [sp, #20]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	9305      	str	r3, [sp, #20]
 8008a8e:	9b06      	ldr	r3, [sp, #24]
 8008a90:	3301      	adds	r3, #1
 8008a92:	9306      	str	r3, [sp, #24]
 8008a94:	f04f 0801 	mov.w	r8, #1
 8008a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f47f af6f 	bne.w	800897e <_dtoa_r+0x7de>
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	e774      	b.n	800898e <_dtoa_r+0x7ee>
 8008aa4:	f04f 0800 	mov.w	r8, #0
 8008aa8:	e7f6      	b.n	8008a98 <_dtoa_r+0x8f8>
 8008aaa:	4698      	mov	r8, r3
 8008aac:	e7f4      	b.n	8008a98 <_dtoa_r+0x8f8>
 8008aae:	d082      	beq.n	80089b6 <_dtoa_r+0x816>
 8008ab0:	9a05      	ldr	r2, [sp, #20]
 8008ab2:	331c      	adds	r3, #28
 8008ab4:	441a      	add	r2, r3
 8008ab6:	9205      	str	r2, [sp, #20]
 8008ab8:	9a06      	ldr	r2, [sp, #24]
 8008aba:	441a      	add	r2, r3
 8008abc:	441d      	add	r5, r3
 8008abe:	9206      	str	r2, [sp, #24]
 8008ac0:	e779      	b.n	80089b6 <_dtoa_r+0x816>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	e7f4      	b.n	8008ab0 <_dtoa_r+0x910>
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dc37      	bgt.n	8008b3c <_dtoa_r+0x99c>
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	dd34      	ble.n	8008b3c <_dtoa_r+0x99c>
 8008ad2:	9b04      	ldr	r3, [sp, #16]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	b963      	cbnz	r3, 8008af4 <_dtoa_r+0x954>
 8008ada:	4631      	mov	r1, r6
 8008adc:	2205      	movs	r2, #5
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 fab2 	bl	8009048 <__multadd>
 8008ae4:	4601      	mov	r1, r0
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	4650      	mov	r0, sl
 8008aea:	f000 fcc7 	bl	800947c <__mcmp>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f73f adbb 	bgt.w	800866a <_dtoa_r+0x4ca>
 8008af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af6:	9d00      	ldr	r5, [sp, #0]
 8008af8:	ea6f 0b03 	mvn.w	fp, r3
 8008afc:	f04f 0800 	mov.w	r8, #0
 8008b00:	4631      	mov	r1, r6
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 fa7e 	bl	8009004 <_Bfree>
 8008b08:	2f00      	cmp	r7, #0
 8008b0a:	f43f aeab 	beq.w	8008864 <_dtoa_r+0x6c4>
 8008b0e:	f1b8 0f00 	cmp.w	r8, #0
 8008b12:	d005      	beq.n	8008b20 <_dtoa_r+0x980>
 8008b14:	45b8      	cmp	r8, r7
 8008b16:	d003      	beq.n	8008b20 <_dtoa_r+0x980>
 8008b18:	4641      	mov	r1, r8
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fa72 	bl	8009004 <_Bfree>
 8008b20:	4639      	mov	r1, r7
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 fa6e 	bl	8009004 <_Bfree>
 8008b28:	e69c      	b.n	8008864 <_dtoa_r+0x6c4>
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	4637      	mov	r7, r6
 8008b2e:	e7e1      	b.n	8008af4 <_dtoa_r+0x954>
 8008b30:	46bb      	mov	fp, r7
 8008b32:	4637      	mov	r7, r6
 8008b34:	e599      	b.n	800866a <_dtoa_r+0x4ca>
 8008b36:	bf00      	nop
 8008b38:	40240000 	.word	0x40240000
 8008b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 80c8 	beq.w	8008cd4 <_dtoa_r+0xb34>
 8008b44:	9b04      	ldr	r3, [sp, #16]
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	2d00      	cmp	r5, #0
 8008b4a:	dd05      	ble.n	8008b58 <_dtoa_r+0x9b8>
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	462a      	mov	r2, r5
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 fc27 	bl	80093a4 <__lshift>
 8008b56:	4607      	mov	r7, r0
 8008b58:	f1b8 0f00 	cmp.w	r8, #0
 8008b5c:	d05b      	beq.n	8008c16 <_dtoa_r+0xa76>
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fa0f 	bl	8008f84 <_Balloc>
 8008b66:	4605      	mov	r5, r0
 8008b68:	b928      	cbnz	r0, 8008b76 <_dtoa_r+0x9d6>
 8008b6a:	4b83      	ldr	r3, [pc, #524]	; (8008d78 <_dtoa_r+0xbd8>)
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008b72:	f7ff bb2e 	b.w	80081d2 <_dtoa_r+0x32>
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	3202      	adds	r2, #2
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	f107 010c 	add.w	r1, r7, #12
 8008b80:	300c      	adds	r0, #12
 8008b82:	f001 f813 	bl	8009bac <memcpy>
 8008b86:	2201      	movs	r2, #1
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f000 fc0a 	bl	80093a4 <__lshift>
 8008b90:	9b00      	ldr	r3, [sp, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	9308      	str	r3, [sp, #32]
 8008b9e:	9b02      	ldr	r3, [sp, #8]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	46b8      	mov	r8, r7
 8008ba6:	9306      	str	r3, [sp, #24]
 8008ba8:	4607      	mov	r7, r0
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	4631      	mov	r1, r6
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	4650      	mov	r0, sl
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	f7ff fa69 	bl	800808a <quorem>
 8008bb8:	4641      	mov	r1, r8
 8008bba:	9002      	str	r0, [sp, #8]
 8008bbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	f000 fc5b 	bl	800947c <__mcmp>
 8008bc6:	463a      	mov	r2, r7
 8008bc8:	9005      	str	r0, [sp, #20]
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 fc71 	bl	80094b4 <__mdiff>
 8008bd2:	68c2      	ldr	r2, [r0, #12]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	bb02      	cbnz	r2, 8008c1a <_dtoa_r+0xa7a>
 8008bd8:	4601      	mov	r1, r0
 8008bda:	4650      	mov	r0, sl
 8008bdc:	f000 fc4e 	bl	800947c <__mcmp>
 8008be0:	4602      	mov	r2, r0
 8008be2:	4629      	mov	r1, r5
 8008be4:	4620      	mov	r0, r4
 8008be6:	9209      	str	r2, [sp, #36]	; 0x24
 8008be8:	f000 fa0c 	bl	8009004 <_Bfree>
 8008bec:	9b07      	ldr	r3, [sp, #28]
 8008bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf0:	9d04      	ldr	r5, [sp, #16]
 8008bf2:	ea43 0102 	orr.w	r1, r3, r2
 8008bf6:	9b06      	ldr	r3, [sp, #24]
 8008bf8:	4319      	orrs	r1, r3
 8008bfa:	d110      	bne.n	8008c1e <_dtoa_r+0xa7e>
 8008bfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c00:	d029      	beq.n	8008c56 <_dtoa_r+0xab6>
 8008c02:	9b05      	ldr	r3, [sp, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	dd02      	ble.n	8008c0e <_dtoa_r+0xa6e>
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	f883 9000 	strb.w	r9, [r3]
 8008c14:	e774      	b.n	8008b00 <_dtoa_r+0x960>
 8008c16:	4638      	mov	r0, r7
 8008c18:	e7ba      	b.n	8008b90 <_dtoa_r+0x9f0>
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	e7e1      	b.n	8008be2 <_dtoa_r+0xa42>
 8008c1e:	9b05      	ldr	r3, [sp, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	db04      	blt.n	8008c2e <_dtoa_r+0xa8e>
 8008c24:	9907      	ldr	r1, [sp, #28]
 8008c26:	430b      	orrs	r3, r1
 8008c28:	9906      	ldr	r1, [sp, #24]
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	d120      	bne.n	8008c70 <_dtoa_r+0xad0>
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	dded      	ble.n	8008c0e <_dtoa_r+0xa6e>
 8008c32:	4651      	mov	r1, sl
 8008c34:	2201      	movs	r2, #1
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 fbb4 	bl	80093a4 <__lshift>
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4682      	mov	sl, r0
 8008c40:	f000 fc1c 	bl	800947c <__mcmp>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	dc03      	bgt.n	8008c50 <_dtoa_r+0xab0>
 8008c48:	d1e1      	bne.n	8008c0e <_dtoa_r+0xa6e>
 8008c4a:	f019 0f01 	tst.w	r9, #1
 8008c4e:	d0de      	beq.n	8008c0e <_dtoa_r+0xa6e>
 8008c50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c54:	d1d8      	bne.n	8008c08 <_dtoa_r+0xa68>
 8008c56:	9a01      	ldr	r2, [sp, #4]
 8008c58:	2339      	movs	r3, #57	; 0x39
 8008c5a:	7013      	strb	r3, [r2, #0]
 8008c5c:	462b      	mov	r3, r5
 8008c5e:	461d      	mov	r5, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c66:	2a39      	cmp	r2, #57	; 0x39
 8008c68:	d06c      	beq.n	8008d44 <_dtoa_r+0xba4>
 8008c6a:	3201      	adds	r2, #1
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	e747      	b.n	8008b00 <_dtoa_r+0x960>
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	dd07      	ble.n	8008c84 <_dtoa_r+0xae4>
 8008c74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c78:	d0ed      	beq.n	8008c56 <_dtoa_r+0xab6>
 8008c7a:	9a01      	ldr	r2, [sp, #4]
 8008c7c:	f109 0301 	add.w	r3, r9, #1
 8008c80:	7013      	strb	r3, [r2, #0]
 8008c82:	e73d      	b.n	8008b00 <_dtoa_r+0x960>
 8008c84:	9b04      	ldr	r3, [sp, #16]
 8008c86:	9a08      	ldr	r2, [sp, #32]
 8008c88:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d043      	beq.n	8008d18 <_dtoa_r+0xb78>
 8008c90:	4651      	mov	r1, sl
 8008c92:	2300      	movs	r3, #0
 8008c94:	220a      	movs	r2, #10
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 f9d6 	bl	8009048 <__multadd>
 8008c9c:	45b8      	cmp	r8, r7
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	f04f 0300 	mov.w	r3, #0
 8008ca4:	f04f 020a 	mov.w	r2, #10
 8008ca8:	4641      	mov	r1, r8
 8008caa:	4620      	mov	r0, r4
 8008cac:	d107      	bne.n	8008cbe <_dtoa_r+0xb1e>
 8008cae:	f000 f9cb 	bl	8009048 <__multadd>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	9b04      	ldr	r3, [sp, #16]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	9304      	str	r3, [sp, #16]
 8008cbc:	e775      	b.n	8008baa <_dtoa_r+0xa0a>
 8008cbe:	f000 f9c3 	bl	8009048 <__multadd>
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	220a      	movs	r2, #10
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 f9bc 	bl	8009048 <__multadd>
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	e7f0      	b.n	8008cb6 <_dtoa_r+0xb16>
 8008cd4:	9b04      	ldr	r3, [sp, #16]
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	9d00      	ldr	r5, [sp, #0]
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4650      	mov	r0, sl
 8008cde:	f7ff f9d4 	bl	800808a <quorem>
 8008ce2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	f805 9b01 	strb.w	r9, [r5], #1
 8008cec:	1aea      	subs	r2, r5, r3
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	dd07      	ble.n	8008d04 <_dtoa_r+0xb64>
 8008cf4:	4651      	mov	r1, sl
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	220a      	movs	r2, #10
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 f9a4 	bl	8009048 <__multadd>
 8008d00:	4682      	mov	sl, r0
 8008d02:	e7ea      	b.n	8008cda <_dtoa_r+0xb3a>
 8008d04:	9b01      	ldr	r3, [sp, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	bfc8      	it	gt
 8008d0a:	461d      	movgt	r5, r3
 8008d0c:	9b00      	ldr	r3, [sp, #0]
 8008d0e:	bfd8      	it	le
 8008d10:	2501      	movle	r5, #1
 8008d12:	441d      	add	r5, r3
 8008d14:	f04f 0800 	mov.w	r8, #0
 8008d18:	4651      	mov	r1, sl
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fb41 	bl	80093a4 <__lshift>
 8008d22:	4631      	mov	r1, r6
 8008d24:	4682      	mov	sl, r0
 8008d26:	f000 fba9 	bl	800947c <__mcmp>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	dc96      	bgt.n	8008c5c <_dtoa_r+0xabc>
 8008d2e:	d102      	bne.n	8008d36 <_dtoa_r+0xb96>
 8008d30:	f019 0f01 	tst.w	r9, #1
 8008d34:	d192      	bne.n	8008c5c <_dtoa_r+0xabc>
 8008d36:	462b      	mov	r3, r5
 8008d38:	461d      	mov	r5, r3
 8008d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d3e:	2a30      	cmp	r2, #48	; 0x30
 8008d40:	d0fa      	beq.n	8008d38 <_dtoa_r+0xb98>
 8008d42:	e6dd      	b.n	8008b00 <_dtoa_r+0x960>
 8008d44:	9a00      	ldr	r2, [sp, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d189      	bne.n	8008c5e <_dtoa_r+0xabe>
 8008d4a:	f10b 0b01 	add.w	fp, fp, #1
 8008d4e:	2331      	movs	r3, #49	; 0x31
 8008d50:	e796      	b.n	8008c80 <_dtoa_r+0xae0>
 8008d52:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <_dtoa_r+0xbdc>)
 8008d54:	f7ff ba99 	b.w	800828a <_dtoa_r+0xea>
 8008d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f47f aa6d 	bne.w	800823a <_dtoa_r+0x9a>
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <_dtoa_r+0xbe0>)
 8008d62:	f7ff ba92 	b.w	800828a <_dtoa_r+0xea>
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dcb5      	bgt.n	8008cd8 <_dtoa_r+0xb38>
 8008d6c:	9b07      	ldr	r3, [sp, #28]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	f73f aeb1 	bgt.w	8008ad6 <_dtoa_r+0x936>
 8008d74:	e7b0      	b.n	8008cd8 <_dtoa_r+0xb38>
 8008d76:	bf00      	nop
 8008d78:	0800a634 	.word	0x0800a634
 8008d7c:	0800a594 	.word	0x0800a594
 8008d80:	0800a5b8 	.word	0x0800a5b8

08008d84 <_free_r>:
 8008d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d86:	2900      	cmp	r1, #0
 8008d88:	d044      	beq.n	8008e14 <_free_r+0x90>
 8008d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8e:	9001      	str	r0, [sp, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f1a1 0404 	sub.w	r4, r1, #4
 8008d96:	bfb8      	it	lt
 8008d98:	18e4      	addlt	r4, r4, r3
 8008d9a:	f000 f8e7 	bl	8008f6c <__malloc_lock>
 8008d9e:	4a1e      	ldr	r2, [pc, #120]	; (8008e18 <_free_r+0x94>)
 8008da0:	9801      	ldr	r0, [sp, #4]
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	b933      	cbnz	r3, 8008db4 <_free_r+0x30>
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	6014      	str	r4, [r2, #0]
 8008daa:	b003      	add	sp, #12
 8008dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008db0:	f000 b8e2 	b.w	8008f78 <__malloc_unlock>
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d908      	bls.n	8008dca <_free_r+0x46>
 8008db8:	6825      	ldr	r5, [r4, #0]
 8008dba:	1961      	adds	r1, r4, r5
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf01      	itttt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	1949      	addeq	r1, r1, r5
 8008dc6:	6021      	streq	r1, [r4, #0]
 8008dc8:	e7ed      	b.n	8008da6 <_free_r+0x22>
 8008dca:	461a      	mov	r2, r3
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b10b      	cbz	r3, 8008dd4 <_free_r+0x50>
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	d9fa      	bls.n	8008dca <_free_r+0x46>
 8008dd4:	6811      	ldr	r1, [r2, #0]
 8008dd6:	1855      	adds	r5, r2, r1
 8008dd8:	42a5      	cmp	r5, r4
 8008dda:	d10b      	bne.n	8008df4 <_free_r+0x70>
 8008ddc:	6824      	ldr	r4, [r4, #0]
 8008dde:	4421      	add	r1, r4
 8008de0:	1854      	adds	r4, r2, r1
 8008de2:	42a3      	cmp	r3, r4
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	d1e0      	bne.n	8008daa <_free_r+0x26>
 8008de8:	681c      	ldr	r4, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	6053      	str	r3, [r2, #4]
 8008dee:	440c      	add	r4, r1
 8008df0:	6014      	str	r4, [r2, #0]
 8008df2:	e7da      	b.n	8008daa <_free_r+0x26>
 8008df4:	d902      	bls.n	8008dfc <_free_r+0x78>
 8008df6:	230c      	movs	r3, #12
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	e7d6      	b.n	8008daa <_free_r+0x26>
 8008dfc:	6825      	ldr	r5, [r4, #0]
 8008dfe:	1961      	adds	r1, r4, r5
 8008e00:	428b      	cmp	r3, r1
 8008e02:	bf04      	itt	eq
 8008e04:	6819      	ldreq	r1, [r3, #0]
 8008e06:	685b      	ldreq	r3, [r3, #4]
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	bf04      	itt	eq
 8008e0c:	1949      	addeq	r1, r1, r5
 8008e0e:	6021      	streq	r1, [r4, #0]
 8008e10:	6054      	str	r4, [r2, #4]
 8008e12:	e7ca      	b.n	8008daa <_free_r+0x26>
 8008e14:	b003      	add	sp, #12
 8008e16:	bd30      	pop	{r4, r5, pc}
 8008e18:	20000558 	.word	0x20000558

08008e1c <malloc>:
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <malloc+0xc>)
 8008e1e:	4601      	mov	r1, r0
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f000 b823 	b.w	8008e6c <_malloc_r>
 8008e26:	bf00      	nop
 8008e28:	2000013c 	.word	0x2000013c

08008e2c <sbrk_aligned>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	4e0e      	ldr	r6, [pc, #56]	; (8008e68 <sbrk_aligned+0x3c>)
 8008e30:	460c      	mov	r4, r1
 8008e32:	6831      	ldr	r1, [r6, #0]
 8008e34:	4605      	mov	r5, r0
 8008e36:	b911      	cbnz	r1, 8008e3e <sbrk_aligned+0x12>
 8008e38:	f000 fea8 	bl	8009b8c <_sbrk_r>
 8008e3c:	6030      	str	r0, [r6, #0]
 8008e3e:	4621      	mov	r1, r4
 8008e40:	4628      	mov	r0, r5
 8008e42:	f000 fea3 	bl	8009b8c <_sbrk_r>
 8008e46:	1c43      	adds	r3, r0, #1
 8008e48:	d00a      	beq.n	8008e60 <sbrk_aligned+0x34>
 8008e4a:	1cc4      	adds	r4, r0, #3
 8008e4c:	f024 0403 	bic.w	r4, r4, #3
 8008e50:	42a0      	cmp	r0, r4
 8008e52:	d007      	beq.n	8008e64 <sbrk_aligned+0x38>
 8008e54:	1a21      	subs	r1, r4, r0
 8008e56:	4628      	mov	r0, r5
 8008e58:	f000 fe98 	bl	8009b8c <_sbrk_r>
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d101      	bne.n	8008e64 <sbrk_aligned+0x38>
 8008e60:	f04f 34ff 	mov.w	r4, #4294967295
 8008e64:	4620      	mov	r0, r4
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	2000055c 	.word	0x2000055c

08008e6c <_malloc_r>:
 8008e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e70:	1ccd      	adds	r5, r1, #3
 8008e72:	f025 0503 	bic.w	r5, r5, #3
 8008e76:	3508      	adds	r5, #8
 8008e78:	2d0c      	cmp	r5, #12
 8008e7a:	bf38      	it	cc
 8008e7c:	250c      	movcc	r5, #12
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	4607      	mov	r7, r0
 8008e82:	db01      	blt.n	8008e88 <_malloc_r+0x1c>
 8008e84:	42a9      	cmp	r1, r5
 8008e86:	d905      	bls.n	8008e94 <_malloc_r+0x28>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	4630      	mov	r0, r6
 8008e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f68 <_malloc_r+0xfc>
 8008e98:	f000 f868 	bl	8008f6c <__malloc_lock>
 8008e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea0:	461c      	mov	r4, r3
 8008ea2:	bb5c      	cbnz	r4, 8008efc <_malloc_r+0x90>
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f7ff ffc0 	bl	8008e2c <sbrk_aligned>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	4604      	mov	r4, r0
 8008eb0:	d155      	bne.n	8008f5e <_malloc_r+0xf2>
 8008eb2:	f8d8 4000 	ldr.w	r4, [r8]
 8008eb6:	4626      	mov	r6, r4
 8008eb8:	2e00      	cmp	r6, #0
 8008eba:	d145      	bne.n	8008f48 <_malloc_r+0xdc>
 8008ebc:	2c00      	cmp	r4, #0
 8008ebe:	d048      	beq.n	8008f52 <_malloc_r+0xe6>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	eb04 0903 	add.w	r9, r4, r3
 8008eca:	f000 fe5f 	bl	8009b8c <_sbrk_r>
 8008ece:	4581      	cmp	r9, r0
 8008ed0:	d13f      	bne.n	8008f52 <_malloc_r+0xe6>
 8008ed2:	6821      	ldr	r1, [r4, #0]
 8008ed4:	1a6d      	subs	r5, r5, r1
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff ffa7 	bl	8008e2c <sbrk_aligned>
 8008ede:	3001      	adds	r0, #1
 8008ee0:	d037      	beq.n	8008f52 <_malloc_r+0xe6>
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	442b      	add	r3, r5
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d038      	beq.n	8008f62 <_malloc_r+0xf6>
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	42a2      	cmp	r2, r4
 8008ef4:	d12b      	bne.n	8008f4e <_malloc_r+0xe2>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	e00f      	b.n	8008f1c <_malloc_r+0xb0>
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	1b52      	subs	r2, r2, r5
 8008f00:	d41f      	bmi.n	8008f42 <_malloc_r+0xd6>
 8008f02:	2a0b      	cmp	r2, #11
 8008f04:	d917      	bls.n	8008f36 <_malloc_r+0xca>
 8008f06:	1961      	adds	r1, r4, r5
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	6025      	str	r5, [r4, #0]
 8008f0c:	bf18      	it	ne
 8008f0e:	6059      	strne	r1, [r3, #4]
 8008f10:	6863      	ldr	r3, [r4, #4]
 8008f12:	bf08      	it	eq
 8008f14:	f8c8 1000 	streq.w	r1, [r8]
 8008f18:	5162      	str	r2, [r4, r5]
 8008f1a:	604b      	str	r3, [r1, #4]
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f104 060b 	add.w	r6, r4, #11
 8008f22:	f000 f829 	bl	8008f78 <__malloc_unlock>
 8008f26:	f026 0607 	bic.w	r6, r6, #7
 8008f2a:	1d23      	adds	r3, r4, #4
 8008f2c:	1af2      	subs	r2, r6, r3
 8008f2e:	d0ae      	beq.n	8008e8e <_malloc_r+0x22>
 8008f30:	1b9b      	subs	r3, r3, r6
 8008f32:	50a3      	str	r3, [r4, r2]
 8008f34:	e7ab      	b.n	8008e8e <_malloc_r+0x22>
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	6862      	ldr	r2, [r4, #4]
 8008f3a:	d1dd      	bne.n	8008ef8 <_malloc_r+0x8c>
 8008f3c:	f8c8 2000 	str.w	r2, [r8]
 8008f40:	e7ec      	b.n	8008f1c <_malloc_r+0xb0>
 8008f42:	4623      	mov	r3, r4
 8008f44:	6864      	ldr	r4, [r4, #4]
 8008f46:	e7ac      	b.n	8008ea2 <_malloc_r+0x36>
 8008f48:	4634      	mov	r4, r6
 8008f4a:	6876      	ldr	r6, [r6, #4]
 8008f4c:	e7b4      	b.n	8008eb8 <_malloc_r+0x4c>
 8008f4e:	4613      	mov	r3, r2
 8008f50:	e7cc      	b.n	8008eec <_malloc_r+0x80>
 8008f52:	230c      	movs	r3, #12
 8008f54:	603b      	str	r3, [r7, #0]
 8008f56:	4638      	mov	r0, r7
 8008f58:	f000 f80e 	bl	8008f78 <__malloc_unlock>
 8008f5c:	e797      	b.n	8008e8e <_malloc_r+0x22>
 8008f5e:	6025      	str	r5, [r4, #0]
 8008f60:	e7dc      	b.n	8008f1c <_malloc_r+0xb0>
 8008f62:	605b      	str	r3, [r3, #4]
 8008f64:	deff      	udf	#255	; 0xff
 8008f66:	bf00      	nop
 8008f68:	20000558 	.word	0x20000558

08008f6c <__malloc_lock>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	; (8008f74 <__malloc_lock+0x8>)
 8008f6e:	f7ff b88a 	b.w	8008086 <__retarget_lock_acquire_recursive>
 8008f72:	bf00      	nop
 8008f74:	20000554 	.word	0x20000554

08008f78 <__malloc_unlock>:
 8008f78:	4801      	ldr	r0, [pc, #4]	; (8008f80 <__malloc_unlock+0x8>)
 8008f7a:	f7ff b885 	b.w	8008088 <__retarget_lock_release_recursive>
 8008f7e:	bf00      	nop
 8008f80:	20000554 	.word	0x20000554

08008f84 <_Balloc>:
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	69c6      	ldr	r6, [r0, #28]
 8008f88:	4604      	mov	r4, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	b976      	cbnz	r6, 8008fac <_Balloc+0x28>
 8008f8e:	2010      	movs	r0, #16
 8008f90:	f7ff ff44 	bl	8008e1c <malloc>
 8008f94:	4602      	mov	r2, r0
 8008f96:	61e0      	str	r0, [r4, #28]
 8008f98:	b920      	cbnz	r0, 8008fa4 <_Balloc+0x20>
 8008f9a:	4b18      	ldr	r3, [pc, #96]	; (8008ffc <_Balloc+0x78>)
 8008f9c:	4818      	ldr	r0, [pc, #96]	; (8009000 <_Balloc+0x7c>)
 8008f9e:	216b      	movs	r1, #107	; 0x6b
 8008fa0:	f000 fe12 	bl	8009bc8 <__assert_func>
 8008fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fa8:	6006      	str	r6, [r0, #0]
 8008faa:	60c6      	str	r6, [r0, #12]
 8008fac:	69e6      	ldr	r6, [r4, #28]
 8008fae:	68f3      	ldr	r3, [r6, #12]
 8008fb0:	b183      	cbz	r3, 8008fd4 <_Balloc+0x50>
 8008fb2:	69e3      	ldr	r3, [r4, #28]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fba:	b9b8      	cbnz	r0, 8008fec <_Balloc+0x68>
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8008fc2:	1d72      	adds	r2, r6, #5
 8008fc4:	0092      	lsls	r2, r2, #2
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 fe1c 	bl	8009c04 <_calloc_r>
 8008fcc:	b160      	cbz	r0, 8008fe8 <_Balloc+0x64>
 8008fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fd2:	e00e      	b.n	8008ff2 <_Balloc+0x6e>
 8008fd4:	2221      	movs	r2, #33	; 0x21
 8008fd6:	2104      	movs	r1, #4
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 fe13 	bl	8009c04 <_calloc_r>
 8008fde:	69e3      	ldr	r3, [r4, #28]
 8008fe0:	60f0      	str	r0, [r6, #12]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e4      	bne.n	8008fb2 <_Balloc+0x2e>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	6802      	ldr	r2, [r0, #0]
 8008fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ff8:	e7f7      	b.n	8008fea <_Balloc+0x66>
 8008ffa:	bf00      	nop
 8008ffc:	0800a5c5 	.word	0x0800a5c5
 8009000:	0800a645 	.word	0x0800a645

08009004 <_Bfree>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	69c6      	ldr	r6, [r0, #28]
 8009008:	4605      	mov	r5, r0
 800900a:	460c      	mov	r4, r1
 800900c:	b976      	cbnz	r6, 800902c <_Bfree+0x28>
 800900e:	2010      	movs	r0, #16
 8009010:	f7ff ff04 	bl	8008e1c <malloc>
 8009014:	4602      	mov	r2, r0
 8009016:	61e8      	str	r0, [r5, #28]
 8009018:	b920      	cbnz	r0, 8009024 <_Bfree+0x20>
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <_Bfree+0x3c>)
 800901c:	4809      	ldr	r0, [pc, #36]	; (8009044 <_Bfree+0x40>)
 800901e:	218f      	movs	r1, #143	; 0x8f
 8009020:	f000 fdd2 	bl	8009bc8 <__assert_func>
 8009024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009028:	6006      	str	r6, [r0, #0]
 800902a:	60c6      	str	r6, [r0, #12]
 800902c:	b13c      	cbz	r4, 800903e <_Bfree+0x3a>
 800902e:	69eb      	ldr	r3, [r5, #28]
 8009030:	6862      	ldr	r2, [r4, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009038:	6021      	str	r1, [r4, #0]
 800903a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	0800a5c5 	.word	0x0800a5c5
 8009044:	0800a645 	.word	0x0800a645

08009048 <__multadd>:
 8009048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904c:	690d      	ldr	r5, [r1, #16]
 800904e:	4607      	mov	r7, r0
 8009050:	460c      	mov	r4, r1
 8009052:	461e      	mov	r6, r3
 8009054:	f101 0c14 	add.w	ip, r1, #20
 8009058:	2000      	movs	r0, #0
 800905a:	f8dc 3000 	ldr.w	r3, [ip]
 800905e:	b299      	uxth	r1, r3
 8009060:	fb02 6101 	mla	r1, r2, r1, r6
 8009064:	0c1e      	lsrs	r6, r3, #16
 8009066:	0c0b      	lsrs	r3, r1, #16
 8009068:	fb02 3306 	mla	r3, r2, r6, r3
 800906c:	b289      	uxth	r1, r1
 800906e:	3001      	adds	r0, #1
 8009070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009074:	4285      	cmp	r5, r0
 8009076:	f84c 1b04 	str.w	r1, [ip], #4
 800907a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800907e:	dcec      	bgt.n	800905a <__multadd+0x12>
 8009080:	b30e      	cbz	r6, 80090c6 <__multadd+0x7e>
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	42ab      	cmp	r3, r5
 8009086:	dc19      	bgt.n	80090bc <__multadd+0x74>
 8009088:	6861      	ldr	r1, [r4, #4]
 800908a:	4638      	mov	r0, r7
 800908c:	3101      	adds	r1, #1
 800908e:	f7ff ff79 	bl	8008f84 <_Balloc>
 8009092:	4680      	mov	r8, r0
 8009094:	b928      	cbnz	r0, 80090a2 <__multadd+0x5a>
 8009096:	4602      	mov	r2, r0
 8009098:	4b0c      	ldr	r3, [pc, #48]	; (80090cc <__multadd+0x84>)
 800909a:	480d      	ldr	r0, [pc, #52]	; (80090d0 <__multadd+0x88>)
 800909c:	21ba      	movs	r1, #186	; 0xba
 800909e:	f000 fd93 	bl	8009bc8 <__assert_func>
 80090a2:	6922      	ldr	r2, [r4, #16]
 80090a4:	3202      	adds	r2, #2
 80090a6:	f104 010c 	add.w	r1, r4, #12
 80090aa:	0092      	lsls	r2, r2, #2
 80090ac:	300c      	adds	r0, #12
 80090ae:	f000 fd7d 	bl	8009bac <memcpy>
 80090b2:	4621      	mov	r1, r4
 80090b4:	4638      	mov	r0, r7
 80090b6:	f7ff ffa5 	bl	8009004 <_Bfree>
 80090ba:	4644      	mov	r4, r8
 80090bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090c0:	3501      	adds	r5, #1
 80090c2:	615e      	str	r6, [r3, #20]
 80090c4:	6125      	str	r5, [r4, #16]
 80090c6:	4620      	mov	r0, r4
 80090c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090cc:	0800a634 	.word	0x0800a634
 80090d0:	0800a645 	.word	0x0800a645

080090d4 <__hi0bits>:
 80090d4:	0c03      	lsrs	r3, r0, #16
 80090d6:	041b      	lsls	r3, r3, #16
 80090d8:	b9d3      	cbnz	r3, 8009110 <__hi0bits+0x3c>
 80090da:	0400      	lsls	r0, r0, #16
 80090dc:	2310      	movs	r3, #16
 80090de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090e2:	bf04      	itt	eq
 80090e4:	0200      	lsleq	r0, r0, #8
 80090e6:	3308      	addeq	r3, #8
 80090e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090ec:	bf04      	itt	eq
 80090ee:	0100      	lsleq	r0, r0, #4
 80090f0:	3304      	addeq	r3, #4
 80090f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090f6:	bf04      	itt	eq
 80090f8:	0080      	lsleq	r0, r0, #2
 80090fa:	3302      	addeq	r3, #2
 80090fc:	2800      	cmp	r0, #0
 80090fe:	db05      	blt.n	800910c <__hi0bits+0x38>
 8009100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009104:	f103 0301 	add.w	r3, r3, #1
 8009108:	bf08      	it	eq
 800910a:	2320      	moveq	r3, #32
 800910c:	4618      	mov	r0, r3
 800910e:	4770      	bx	lr
 8009110:	2300      	movs	r3, #0
 8009112:	e7e4      	b.n	80090de <__hi0bits+0xa>

08009114 <__lo0bits>:
 8009114:	6803      	ldr	r3, [r0, #0]
 8009116:	f013 0207 	ands.w	r2, r3, #7
 800911a:	d00c      	beq.n	8009136 <__lo0bits+0x22>
 800911c:	07d9      	lsls	r1, r3, #31
 800911e:	d422      	bmi.n	8009166 <__lo0bits+0x52>
 8009120:	079a      	lsls	r2, r3, #30
 8009122:	bf49      	itett	mi
 8009124:	085b      	lsrmi	r3, r3, #1
 8009126:	089b      	lsrpl	r3, r3, #2
 8009128:	6003      	strmi	r3, [r0, #0]
 800912a:	2201      	movmi	r2, #1
 800912c:	bf5c      	itt	pl
 800912e:	6003      	strpl	r3, [r0, #0]
 8009130:	2202      	movpl	r2, #2
 8009132:	4610      	mov	r0, r2
 8009134:	4770      	bx	lr
 8009136:	b299      	uxth	r1, r3
 8009138:	b909      	cbnz	r1, 800913e <__lo0bits+0x2a>
 800913a:	0c1b      	lsrs	r3, r3, #16
 800913c:	2210      	movs	r2, #16
 800913e:	b2d9      	uxtb	r1, r3
 8009140:	b909      	cbnz	r1, 8009146 <__lo0bits+0x32>
 8009142:	3208      	adds	r2, #8
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	0719      	lsls	r1, r3, #28
 8009148:	bf04      	itt	eq
 800914a:	091b      	lsreq	r3, r3, #4
 800914c:	3204      	addeq	r2, #4
 800914e:	0799      	lsls	r1, r3, #30
 8009150:	bf04      	itt	eq
 8009152:	089b      	lsreq	r3, r3, #2
 8009154:	3202      	addeq	r2, #2
 8009156:	07d9      	lsls	r1, r3, #31
 8009158:	d403      	bmi.n	8009162 <__lo0bits+0x4e>
 800915a:	085b      	lsrs	r3, r3, #1
 800915c:	f102 0201 	add.w	r2, r2, #1
 8009160:	d003      	beq.n	800916a <__lo0bits+0x56>
 8009162:	6003      	str	r3, [r0, #0]
 8009164:	e7e5      	b.n	8009132 <__lo0bits+0x1e>
 8009166:	2200      	movs	r2, #0
 8009168:	e7e3      	b.n	8009132 <__lo0bits+0x1e>
 800916a:	2220      	movs	r2, #32
 800916c:	e7e1      	b.n	8009132 <__lo0bits+0x1e>
	...

08009170 <__i2b>:
 8009170:	b510      	push	{r4, lr}
 8009172:	460c      	mov	r4, r1
 8009174:	2101      	movs	r1, #1
 8009176:	f7ff ff05 	bl	8008f84 <_Balloc>
 800917a:	4602      	mov	r2, r0
 800917c:	b928      	cbnz	r0, 800918a <__i2b+0x1a>
 800917e:	4b05      	ldr	r3, [pc, #20]	; (8009194 <__i2b+0x24>)
 8009180:	4805      	ldr	r0, [pc, #20]	; (8009198 <__i2b+0x28>)
 8009182:	f240 1145 	movw	r1, #325	; 0x145
 8009186:	f000 fd1f 	bl	8009bc8 <__assert_func>
 800918a:	2301      	movs	r3, #1
 800918c:	6144      	str	r4, [r0, #20]
 800918e:	6103      	str	r3, [r0, #16]
 8009190:	bd10      	pop	{r4, pc}
 8009192:	bf00      	nop
 8009194:	0800a634 	.word	0x0800a634
 8009198:	0800a645 	.word	0x0800a645

0800919c <__multiply>:
 800919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	4691      	mov	r9, r2
 80091a2:	690a      	ldr	r2, [r1, #16]
 80091a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	bfb8      	it	lt
 80091ac:	460b      	movlt	r3, r1
 80091ae:	460c      	mov	r4, r1
 80091b0:	bfbc      	itt	lt
 80091b2:	464c      	movlt	r4, r9
 80091b4:	4699      	movlt	r9, r3
 80091b6:	6927      	ldr	r7, [r4, #16]
 80091b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091bc:	68a3      	ldr	r3, [r4, #8]
 80091be:	6861      	ldr	r1, [r4, #4]
 80091c0:	eb07 060a 	add.w	r6, r7, sl
 80091c4:	42b3      	cmp	r3, r6
 80091c6:	b085      	sub	sp, #20
 80091c8:	bfb8      	it	lt
 80091ca:	3101      	addlt	r1, #1
 80091cc:	f7ff feda 	bl	8008f84 <_Balloc>
 80091d0:	b930      	cbnz	r0, 80091e0 <__multiply+0x44>
 80091d2:	4602      	mov	r2, r0
 80091d4:	4b44      	ldr	r3, [pc, #272]	; (80092e8 <__multiply+0x14c>)
 80091d6:	4845      	ldr	r0, [pc, #276]	; (80092ec <__multiply+0x150>)
 80091d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80091dc:	f000 fcf4 	bl	8009bc8 <__assert_func>
 80091e0:	f100 0514 	add.w	r5, r0, #20
 80091e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091e8:	462b      	mov	r3, r5
 80091ea:	2200      	movs	r2, #0
 80091ec:	4543      	cmp	r3, r8
 80091ee:	d321      	bcc.n	8009234 <__multiply+0x98>
 80091f0:	f104 0314 	add.w	r3, r4, #20
 80091f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091f8:	f109 0314 	add.w	r3, r9, #20
 80091fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009200:	9202      	str	r2, [sp, #8]
 8009202:	1b3a      	subs	r2, r7, r4
 8009204:	3a15      	subs	r2, #21
 8009206:	f022 0203 	bic.w	r2, r2, #3
 800920a:	3204      	adds	r2, #4
 800920c:	f104 0115 	add.w	r1, r4, #21
 8009210:	428f      	cmp	r7, r1
 8009212:	bf38      	it	cc
 8009214:	2204      	movcc	r2, #4
 8009216:	9201      	str	r2, [sp, #4]
 8009218:	9a02      	ldr	r2, [sp, #8]
 800921a:	9303      	str	r3, [sp, #12]
 800921c:	429a      	cmp	r2, r3
 800921e:	d80c      	bhi.n	800923a <__multiply+0x9e>
 8009220:	2e00      	cmp	r6, #0
 8009222:	dd03      	ble.n	800922c <__multiply+0x90>
 8009224:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009228:	2b00      	cmp	r3, #0
 800922a:	d05b      	beq.n	80092e4 <__multiply+0x148>
 800922c:	6106      	str	r6, [r0, #16]
 800922e:	b005      	add	sp, #20
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	f843 2b04 	str.w	r2, [r3], #4
 8009238:	e7d8      	b.n	80091ec <__multiply+0x50>
 800923a:	f8b3 a000 	ldrh.w	sl, [r3]
 800923e:	f1ba 0f00 	cmp.w	sl, #0
 8009242:	d024      	beq.n	800928e <__multiply+0xf2>
 8009244:	f104 0e14 	add.w	lr, r4, #20
 8009248:	46a9      	mov	r9, r5
 800924a:	f04f 0c00 	mov.w	ip, #0
 800924e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009252:	f8d9 1000 	ldr.w	r1, [r9]
 8009256:	fa1f fb82 	uxth.w	fp, r2
 800925a:	b289      	uxth	r1, r1
 800925c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009260:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009264:	f8d9 2000 	ldr.w	r2, [r9]
 8009268:	4461      	add	r1, ip
 800926a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800926e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009272:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009276:	b289      	uxth	r1, r1
 8009278:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800927c:	4577      	cmp	r7, lr
 800927e:	f849 1b04 	str.w	r1, [r9], #4
 8009282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009286:	d8e2      	bhi.n	800924e <__multiply+0xb2>
 8009288:	9a01      	ldr	r2, [sp, #4]
 800928a:	f845 c002 	str.w	ip, [r5, r2]
 800928e:	9a03      	ldr	r2, [sp, #12]
 8009290:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009294:	3304      	adds	r3, #4
 8009296:	f1b9 0f00 	cmp.w	r9, #0
 800929a:	d021      	beq.n	80092e0 <__multiply+0x144>
 800929c:	6829      	ldr	r1, [r5, #0]
 800929e:	f104 0c14 	add.w	ip, r4, #20
 80092a2:	46ae      	mov	lr, r5
 80092a4:	f04f 0a00 	mov.w	sl, #0
 80092a8:	f8bc b000 	ldrh.w	fp, [ip]
 80092ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092b0:	fb09 220b 	mla	r2, r9, fp, r2
 80092b4:	4452      	add	r2, sl
 80092b6:	b289      	uxth	r1, r1
 80092b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092bc:	f84e 1b04 	str.w	r1, [lr], #4
 80092c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80092c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092c8:	f8be 1000 	ldrh.w	r1, [lr]
 80092cc:	fb09 110a 	mla	r1, r9, sl, r1
 80092d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80092d4:	4567      	cmp	r7, ip
 80092d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092da:	d8e5      	bhi.n	80092a8 <__multiply+0x10c>
 80092dc:	9a01      	ldr	r2, [sp, #4]
 80092de:	50a9      	str	r1, [r5, r2]
 80092e0:	3504      	adds	r5, #4
 80092e2:	e799      	b.n	8009218 <__multiply+0x7c>
 80092e4:	3e01      	subs	r6, #1
 80092e6:	e79b      	b.n	8009220 <__multiply+0x84>
 80092e8:	0800a634 	.word	0x0800a634
 80092ec:	0800a645 	.word	0x0800a645

080092f0 <__pow5mult>:
 80092f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f4:	4615      	mov	r5, r2
 80092f6:	f012 0203 	ands.w	r2, r2, #3
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	d007      	beq.n	8009310 <__pow5mult+0x20>
 8009300:	4c25      	ldr	r4, [pc, #148]	; (8009398 <__pow5mult+0xa8>)
 8009302:	3a01      	subs	r2, #1
 8009304:	2300      	movs	r3, #0
 8009306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800930a:	f7ff fe9d 	bl	8009048 <__multadd>
 800930e:	4607      	mov	r7, r0
 8009310:	10ad      	asrs	r5, r5, #2
 8009312:	d03d      	beq.n	8009390 <__pow5mult+0xa0>
 8009314:	69f4      	ldr	r4, [r6, #28]
 8009316:	b97c      	cbnz	r4, 8009338 <__pow5mult+0x48>
 8009318:	2010      	movs	r0, #16
 800931a:	f7ff fd7f 	bl	8008e1c <malloc>
 800931e:	4602      	mov	r2, r0
 8009320:	61f0      	str	r0, [r6, #28]
 8009322:	b928      	cbnz	r0, 8009330 <__pow5mult+0x40>
 8009324:	4b1d      	ldr	r3, [pc, #116]	; (800939c <__pow5mult+0xac>)
 8009326:	481e      	ldr	r0, [pc, #120]	; (80093a0 <__pow5mult+0xb0>)
 8009328:	f240 11b3 	movw	r1, #435	; 0x1b3
 800932c:	f000 fc4c 	bl	8009bc8 <__assert_func>
 8009330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009334:	6004      	str	r4, [r0, #0]
 8009336:	60c4      	str	r4, [r0, #12]
 8009338:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800933c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009340:	b94c      	cbnz	r4, 8009356 <__pow5mult+0x66>
 8009342:	f240 2171 	movw	r1, #625	; 0x271
 8009346:	4630      	mov	r0, r6
 8009348:	f7ff ff12 	bl	8009170 <__i2b>
 800934c:	2300      	movs	r3, #0
 800934e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009352:	4604      	mov	r4, r0
 8009354:	6003      	str	r3, [r0, #0]
 8009356:	f04f 0900 	mov.w	r9, #0
 800935a:	07eb      	lsls	r3, r5, #31
 800935c:	d50a      	bpl.n	8009374 <__pow5mult+0x84>
 800935e:	4639      	mov	r1, r7
 8009360:	4622      	mov	r2, r4
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ff1a 	bl	800919c <__multiply>
 8009368:	4639      	mov	r1, r7
 800936a:	4680      	mov	r8, r0
 800936c:	4630      	mov	r0, r6
 800936e:	f7ff fe49 	bl	8009004 <_Bfree>
 8009372:	4647      	mov	r7, r8
 8009374:	106d      	asrs	r5, r5, #1
 8009376:	d00b      	beq.n	8009390 <__pow5mult+0xa0>
 8009378:	6820      	ldr	r0, [r4, #0]
 800937a:	b938      	cbnz	r0, 800938c <__pow5mult+0x9c>
 800937c:	4622      	mov	r2, r4
 800937e:	4621      	mov	r1, r4
 8009380:	4630      	mov	r0, r6
 8009382:	f7ff ff0b 	bl	800919c <__multiply>
 8009386:	6020      	str	r0, [r4, #0]
 8009388:	f8c0 9000 	str.w	r9, [r0]
 800938c:	4604      	mov	r4, r0
 800938e:	e7e4      	b.n	800935a <__pow5mult+0x6a>
 8009390:	4638      	mov	r0, r7
 8009392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009396:	bf00      	nop
 8009398:	0800a790 	.word	0x0800a790
 800939c:	0800a5c5 	.word	0x0800a5c5
 80093a0:	0800a645 	.word	0x0800a645

080093a4 <__lshift>:
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	460c      	mov	r4, r1
 80093aa:	6849      	ldr	r1, [r1, #4]
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093b2:	68a3      	ldr	r3, [r4, #8]
 80093b4:	4607      	mov	r7, r0
 80093b6:	4691      	mov	r9, r2
 80093b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093bc:	f108 0601 	add.w	r6, r8, #1
 80093c0:	42b3      	cmp	r3, r6
 80093c2:	db0b      	blt.n	80093dc <__lshift+0x38>
 80093c4:	4638      	mov	r0, r7
 80093c6:	f7ff fddd 	bl	8008f84 <_Balloc>
 80093ca:	4605      	mov	r5, r0
 80093cc:	b948      	cbnz	r0, 80093e2 <__lshift+0x3e>
 80093ce:	4602      	mov	r2, r0
 80093d0:	4b28      	ldr	r3, [pc, #160]	; (8009474 <__lshift+0xd0>)
 80093d2:	4829      	ldr	r0, [pc, #164]	; (8009478 <__lshift+0xd4>)
 80093d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80093d8:	f000 fbf6 	bl	8009bc8 <__assert_func>
 80093dc:	3101      	adds	r1, #1
 80093de:	005b      	lsls	r3, r3, #1
 80093e0:	e7ee      	b.n	80093c0 <__lshift+0x1c>
 80093e2:	2300      	movs	r3, #0
 80093e4:	f100 0114 	add.w	r1, r0, #20
 80093e8:	f100 0210 	add.w	r2, r0, #16
 80093ec:	4618      	mov	r0, r3
 80093ee:	4553      	cmp	r3, sl
 80093f0:	db33      	blt.n	800945a <__lshift+0xb6>
 80093f2:	6920      	ldr	r0, [r4, #16]
 80093f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093f8:	f104 0314 	add.w	r3, r4, #20
 80093fc:	f019 091f 	ands.w	r9, r9, #31
 8009400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009404:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009408:	d02b      	beq.n	8009462 <__lshift+0xbe>
 800940a:	f1c9 0e20 	rsb	lr, r9, #32
 800940e:	468a      	mov	sl, r1
 8009410:	2200      	movs	r2, #0
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	fa00 f009 	lsl.w	r0, r0, r9
 8009418:	4310      	orrs	r0, r2
 800941a:	f84a 0b04 	str.w	r0, [sl], #4
 800941e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009422:	459c      	cmp	ip, r3
 8009424:	fa22 f20e 	lsr.w	r2, r2, lr
 8009428:	d8f3      	bhi.n	8009412 <__lshift+0x6e>
 800942a:	ebac 0304 	sub.w	r3, ip, r4
 800942e:	3b15      	subs	r3, #21
 8009430:	f023 0303 	bic.w	r3, r3, #3
 8009434:	3304      	adds	r3, #4
 8009436:	f104 0015 	add.w	r0, r4, #21
 800943a:	4584      	cmp	ip, r0
 800943c:	bf38      	it	cc
 800943e:	2304      	movcc	r3, #4
 8009440:	50ca      	str	r2, [r1, r3]
 8009442:	b10a      	cbz	r2, 8009448 <__lshift+0xa4>
 8009444:	f108 0602 	add.w	r6, r8, #2
 8009448:	3e01      	subs	r6, #1
 800944a:	4638      	mov	r0, r7
 800944c:	612e      	str	r6, [r5, #16]
 800944e:	4621      	mov	r1, r4
 8009450:	f7ff fdd8 	bl	8009004 <_Bfree>
 8009454:	4628      	mov	r0, r5
 8009456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945a:	f842 0f04 	str.w	r0, [r2, #4]!
 800945e:	3301      	adds	r3, #1
 8009460:	e7c5      	b.n	80093ee <__lshift+0x4a>
 8009462:	3904      	subs	r1, #4
 8009464:	f853 2b04 	ldr.w	r2, [r3], #4
 8009468:	f841 2f04 	str.w	r2, [r1, #4]!
 800946c:	459c      	cmp	ip, r3
 800946e:	d8f9      	bhi.n	8009464 <__lshift+0xc0>
 8009470:	e7ea      	b.n	8009448 <__lshift+0xa4>
 8009472:	bf00      	nop
 8009474:	0800a634 	.word	0x0800a634
 8009478:	0800a645 	.word	0x0800a645

0800947c <__mcmp>:
 800947c:	b530      	push	{r4, r5, lr}
 800947e:	6902      	ldr	r2, [r0, #16]
 8009480:	690c      	ldr	r4, [r1, #16]
 8009482:	1b12      	subs	r2, r2, r4
 8009484:	d10e      	bne.n	80094a4 <__mcmp+0x28>
 8009486:	f100 0314 	add.w	r3, r0, #20
 800948a:	3114      	adds	r1, #20
 800948c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009490:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009494:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009498:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800949c:	42a5      	cmp	r5, r4
 800949e:	d003      	beq.n	80094a8 <__mcmp+0x2c>
 80094a0:	d305      	bcc.n	80094ae <__mcmp+0x32>
 80094a2:	2201      	movs	r2, #1
 80094a4:	4610      	mov	r0, r2
 80094a6:	bd30      	pop	{r4, r5, pc}
 80094a8:	4283      	cmp	r3, r0
 80094aa:	d3f3      	bcc.n	8009494 <__mcmp+0x18>
 80094ac:	e7fa      	b.n	80094a4 <__mcmp+0x28>
 80094ae:	f04f 32ff 	mov.w	r2, #4294967295
 80094b2:	e7f7      	b.n	80094a4 <__mcmp+0x28>

080094b4 <__mdiff>:
 80094b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	460c      	mov	r4, r1
 80094ba:	4606      	mov	r6, r0
 80094bc:	4611      	mov	r1, r2
 80094be:	4620      	mov	r0, r4
 80094c0:	4690      	mov	r8, r2
 80094c2:	f7ff ffdb 	bl	800947c <__mcmp>
 80094c6:	1e05      	subs	r5, r0, #0
 80094c8:	d110      	bne.n	80094ec <__mdiff+0x38>
 80094ca:	4629      	mov	r1, r5
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7ff fd59 	bl	8008f84 <_Balloc>
 80094d2:	b930      	cbnz	r0, 80094e2 <__mdiff+0x2e>
 80094d4:	4b3a      	ldr	r3, [pc, #232]	; (80095c0 <__mdiff+0x10c>)
 80094d6:	4602      	mov	r2, r0
 80094d8:	f240 2137 	movw	r1, #567	; 0x237
 80094dc:	4839      	ldr	r0, [pc, #228]	; (80095c4 <__mdiff+0x110>)
 80094de:	f000 fb73 	bl	8009bc8 <__assert_func>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ec:	bfa4      	itt	ge
 80094ee:	4643      	movge	r3, r8
 80094f0:	46a0      	movge	r8, r4
 80094f2:	4630      	mov	r0, r6
 80094f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094f8:	bfa6      	itte	ge
 80094fa:	461c      	movge	r4, r3
 80094fc:	2500      	movge	r5, #0
 80094fe:	2501      	movlt	r5, #1
 8009500:	f7ff fd40 	bl	8008f84 <_Balloc>
 8009504:	b920      	cbnz	r0, 8009510 <__mdiff+0x5c>
 8009506:	4b2e      	ldr	r3, [pc, #184]	; (80095c0 <__mdiff+0x10c>)
 8009508:	4602      	mov	r2, r0
 800950a:	f240 2145 	movw	r1, #581	; 0x245
 800950e:	e7e5      	b.n	80094dc <__mdiff+0x28>
 8009510:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009514:	6926      	ldr	r6, [r4, #16]
 8009516:	60c5      	str	r5, [r0, #12]
 8009518:	f104 0914 	add.w	r9, r4, #20
 800951c:	f108 0514 	add.w	r5, r8, #20
 8009520:	f100 0e14 	add.w	lr, r0, #20
 8009524:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009528:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800952c:	f108 0210 	add.w	r2, r8, #16
 8009530:	46f2      	mov	sl, lr
 8009532:	2100      	movs	r1, #0
 8009534:	f859 3b04 	ldr.w	r3, [r9], #4
 8009538:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800953c:	fa11 f88b 	uxtah	r8, r1, fp
 8009540:	b299      	uxth	r1, r3
 8009542:	0c1b      	lsrs	r3, r3, #16
 8009544:	eba8 0801 	sub.w	r8, r8, r1
 8009548:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800954c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009550:	fa1f f888 	uxth.w	r8, r8
 8009554:	1419      	asrs	r1, r3, #16
 8009556:	454e      	cmp	r6, r9
 8009558:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800955c:	f84a 3b04 	str.w	r3, [sl], #4
 8009560:	d8e8      	bhi.n	8009534 <__mdiff+0x80>
 8009562:	1b33      	subs	r3, r6, r4
 8009564:	3b15      	subs	r3, #21
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	3304      	adds	r3, #4
 800956c:	3415      	adds	r4, #21
 800956e:	42a6      	cmp	r6, r4
 8009570:	bf38      	it	cc
 8009572:	2304      	movcc	r3, #4
 8009574:	441d      	add	r5, r3
 8009576:	4473      	add	r3, lr
 8009578:	469e      	mov	lr, r3
 800957a:	462e      	mov	r6, r5
 800957c:	4566      	cmp	r6, ip
 800957e:	d30e      	bcc.n	800959e <__mdiff+0xea>
 8009580:	f10c 0203 	add.w	r2, ip, #3
 8009584:	1b52      	subs	r2, r2, r5
 8009586:	f022 0203 	bic.w	r2, r2, #3
 800958a:	3d03      	subs	r5, #3
 800958c:	45ac      	cmp	ip, r5
 800958e:	bf38      	it	cc
 8009590:	2200      	movcc	r2, #0
 8009592:	4413      	add	r3, r2
 8009594:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009598:	b17a      	cbz	r2, 80095ba <__mdiff+0x106>
 800959a:	6107      	str	r7, [r0, #16]
 800959c:	e7a4      	b.n	80094e8 <__mdiff+0x34>
 800959e:	f856 8b04 	ldr.w	r8, [r6], #4
 80095a2:	fa11 f288 	uxtah	r2, r1, r8
 80095a6:	1414      	asrs	r4, r2, #16
 80095a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095ac:	b292      	uxth	r2, r2
 80095ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095b2:	f84e 2b04 	str.w	r2, [lr], #4
 80095b6:	1421      	asrs	r1, r4, #16
 80095b8:	e7e0      	b.n	800957c <__mdiff+0xc8>
 80095ba:	3f01      	subs	r7, #1
 80095bc:	e7ea      	b.n	8009594 <__mdiff+0xe0>
 80095be:	bf00      	nop
 80095c0:	0800a634 	.word	0x0800a634
 80095c4:	0800a645 	.word	0x0800a645

080095c8 <__d2b>:
 80095c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095cc:	460f      	mov	r7, r1
 80095ce:	2101      	movs	r1, #1
 80095d0:	ec59 8b10 	vmov	r8, r9, d0
 80095d4:	4616      	mov	r6, r2
 80095d6:	f7ff fcd5 	bl	8008f84 <_Balloc>
 80095da:	4604      	mov	r4, r0
 80095dc:	b930      	cbnz	r0, 80095ec <__d2b+0x24>
 80095de:	4602      	mov	r2, r0
 80095e0:	4b24      	ldr	r3, [pc, #144]	; (8009674 <__d2b+0xac>)
 80095e2:	4825      	ldr	r0, [pc, #148]	; (8009678 <__d2b+0xb0>)
 80095e4:	f240 310f 	movw	r1, #783	; 0x30f
 80095e8:	f000 faee 	bl	8009bc8 <__assert_func>
 80095ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095f4:	bb2d      	cbnz	r5, 8009642 <__d2b+0x7a>
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	f1b8 0300 	subs.w	r3, r8, #0
 80095fc:	d026      	beq.n	800964c <__d2b+0x84>
 80095fe:	4668      	mov	r0, sp
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	f7ff fd87 	bl	8009114 <__lo0bits>
 8009606:	e9dd 1200 	ldrd	r1, r2, [sp]
 800960a:	b1e8      	cbz	r0, 8009648 <__d2b+0x80>
 800960c:	f1c0 0320 	rsb	r3, r0, #32
 8009610:	fa02 f303 	lsl.w	r3, r2, r3
 8009614:	430b      	orrs	r3, r1
 8009616:	40c2      	lsrs	r2, r0
 8009618:	6163      	str	r3, [r4, #20]
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	61a3      	str	r3, [r4, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	bf14      	ite	ne
 8009624:	2202      	movne	r2, #2
 8009626:	2201      	moveq	r2, #1
 8009628:	6122      	str	r2, [r4, #16]
 800962a:	b1bd      	cbz	r5, 800965c <__d2b+0x94>
 800962c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009630:	4405      	add	r5, r0
 8009632:	603d      	str	r5, [r7, #0]
 8009634:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009638:	6030      	str	r0, [r6, #0]
 800963a:	4620      	mov	r0, r4
 800963c:	b003      	add	sp, #12
 800963e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009646:	e7d6      	b.n	80095f6 <__d2b+0x2e>
 8009648:	6161      	str	r1, [r4, #20]
 800964a:	e7e7      	b.n	800961c <__d2b+0x54>
 800964c:	a801      	add	r0, sp, #4
 800964e:	f7ff fd61 	bl	8009114 <__lo0bits>
 8009652:	9b01      	ldr	r3, [sp, #4]
 8009654:	6163      	str	r3, [r4, #20]
 8009656:	3020      	adds	r0, #32
 8009658:	2201      	movs	r2, #1
 800965a:	e7e5      	b.n	8009628 <__d2b+0x60>
 800965c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009660:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009664:	6038      	str	r0, [r7, #0]
 8009666:	6918      	ldr	r0, [r3, #16]
 8009668:	f7ff fd34 	bl	80090d4 <__hi0bits>
 800966c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009670:	e7e2      	b.n	8009638 <__d2b+0x70>
 8009672:	bf00      	nop
 8009674:	0800a634 	.word	0x0800a634
 8009678:	0800a645 	.word	0x0800a645

0800967c <__sfputc_r>:
 800967c:	6893      	ldr	r3, [r2, #8]
 800967e:	3b01      	subs	r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	b410      	push	{r4}
 8009684:	6093      	str	r3, [r2, #8]
 8009686:	da08      	bge.n	800969a <__sfputc_r+0x1e>
 8009688:	6994      	ldr	r4, [r2, #24]
 800968a:	42a3      	cmp	r3, r4
 800968c:	db01      	blt.n	8009692 <__sfputc_r+0x16>
 800968e:	290a      	cmp	r1, #10
 8009690:	d103      	bne.n	800969a <__sfputc_r+0x1e>
 8009692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009696:	f000 b9e3 	b.w	8009a60 <__swbuf_r>
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	1c58      	adds	r0, r3, #1
 800969e:	6010      	str	r0, [r2, #0]
 80096a0:	7019      	strb	r1, [r3, #0]
 80096a2:	4608      	mov	r0, r1
 80096a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <__sfputs_r>:
 80096aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ac:	4606      	mov	r6, r0
 80096ae:	460f      	mov	r7, r1
 80096b0:	4614      	mov	r4, r2
 80096b2:	18d5      	adds	r5, r2, r3
 80096b4:	42ac      	cmp	r4, r5
 80096b6:	d101      	bne.n	80096bc <__sfputs_r+0x12>
 80096b8:	2000      	movs	r0, #0
 80096ba:	e007      	b.n	80096cc <__sfputs_r+0x22>
 80096bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c0:	463a      	mov	r2, r7
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ffda 	bl	800967c <__sfputc_r>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d1f3      	bne.n	80096b4 <__sfputs_r+0xa>
 80096cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096d0 <_vfiprintf_r>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	460d      	mov	r5, r1
 80096d6:	b09d      	sub	sp, #116	; 0x74
 80096d8:	4614      	mov	r4, r2
 80096da:	4698      	mov	r8, r3
 80096dc:	4606      	mov	r6, r0
 80096de:	b118      	cbz	r0, 80096e8 <_vfiprintf_r+0x18>
 80096e0:	6a03      	ldr	r3, [r0, #32]
 80096e2:	b90b      	cbnz	r3, 80096e8 <_vfiprintf_r+0x18>
 80096e4:	f7fe fbc6 	bl	8007e74 <__sinit>
 80096e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ea:	07d9      	lsls	r1, r3, #31
 80096ec:	d405      	bmi.n	80096fa <_vfiprintf_r+0x2a>
 80096ee:	89ab      	ldrh	r3, [r5, #12]
 80096f0:	059a      	lsls	r2, r3, #22
 80096f2:	d402      	bmi.n	80096fa <_vfiprintf_r+0x2a>
 80096f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096f6:	f7fe fcc6 	bl	8008086 <__retarget_lock_acquire_recursive>
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	071b      	lsls	r3, r3, #28
 80096fe:	d501      	bpl.n	8009704 <_vfiprintf_r+0x34>
 8009700:	692b      	ldr	r3, [r5, #16]
 8009702:	b99b      	cbnz	r3, 800972c <_vfiprintf_r+0x5c>
 8009704:	4629      	mov	r1, r5
 8009706:	4630      	mov	r0, r6
 8009708:	f000 f9e8 	bl	8009adc <__swsetup_r>
 800970c:	b170      	cbz	r0, 800972c <_vfiprintf_r+0x5c>
 800970e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009710:	07dc      	lsls	r4, r3, #31
 8009712:	d504      	bpl.n	800971e <_vfiprintf_r+0x4e>
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	b01d      	add	sp, #116	; 0x74
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	89ab      	ldrh	r3, [r5, #12]
 8009720:	0598      	lsls	r0, r3, #22
 8009722:	d4f7      	bmi.n	8009714 <_vfiprintf_r+0x44>
 8009724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009726:	f7fe fcaf 	bl	8008088 <__retarget_lock_release_recursive>
 800972a:	e7f3      	b.n	8009714 <_vfiprintf_r+0x44>
 800972c:	2300      	movs	r3, #0
 800972e:	9309      	str	r3, [sp, #36]	; 0x24
 8009730:	2320      	movs	r3, #32
 8009732:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009736:	f8cd 800c 	str.w	r8, [sp, #12]
 800973a:	2330      	movs	r3, #48	; 0x30
 800973c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80098f0 <_vfiprintf_r+0x220>
 8009740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009744:	f04f 0901 	mov.w	r9, #1
 8009748:	4623      	mov	r3, r4
 800974a:	469a      	mov	sl, r3
 800974c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009750:	b10a      	cbz	r2, 8009756 <_vfiprintf_r+0x86>
 8009752:	2a25      	cmp	r2, #37	; 0x25
 8009754:	d1f9      	bne.n	800974a <_vfiprintf_r+0x7a>
 8009756:	ebba 0b04 	subs.w	fp, sl, r4
 800975a:	d00b      	beq.n	8009774 <_vfiprintf_r+0xa4>
 800975c:	465b      	mov	r3, fp
 800975e:	4622      	mov	r2, r4
 8009760:	4629      	mov	r1, r5
 8009762:	4630      	mov	r0, r6
 8009764:	f7ff ffa1 	bl	80096aa <__sfputs_r>
 8009768:	3001      	adds	r0, #1
 800976a:	f000 80a9 	beq.w	80098c0 <_vfiprintf_r+0x1f0>
 800976e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009770:	445a      	add	r2, fp
 8009772:	9209      	str	r2, [sp, #36]	; 0x24
 8009774:	f89a 3000 	ldrb.w	r3, [sl]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 80a1 	beq.w	80098c0 <_vfiprintf_r+0x1f0>
 800977e:	2300      	movs	r3, #0
 8009780:	f04f 32ff 	mov.w	r2, #4294967295
 8009784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009788:	f10a 0a01 	add.w	sl, sl, #1
 800978c:	9304      	str	r3, [sp, #16]
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009794:	931a      	str	r3, [sp, #104]	; 0x68
 8009796:	4654      	mov	r4, sl
 8009798:	2205      	movs	r2, #5
 800979a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979e:	4854      	ldr	r0, [pc, #336]	; (80098f0 <_vfiprintf_r+0x220>)
 80097a0:	f7f6 fd16 	bl	80001d0 <memchr>
 80097a4:	9a04      	ldr	r2, [sp, #16]
 80097a6:	b9d8      	cbnz	r0, 80097e0 <_vfiprintf_r+0x110>
 80097a8:	06d1      	lsls	r1, r2, #27
 80097aa:	bf44      	itt	mi
 80097ac:	2320      	movmi	r3, #32
 80097ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b2:	0713      	lsls	r3, r2, #28
 80097b4:	bf44      	itt	mi
 80097b6:	232b      	movmi	r3, #43	; 0x2b
 80097b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097bc:	f89a 3000 	ldrb.w	r3, [sl]
 80097c0:	2b2a      	cmp	r3, #42	; 0x2a
 80097c2:	d015      	beq.n	80097f0 <_vfiprintf_r+0x120>
 80097c4:	9a07      	ldr	r2, [sp, #28]
 80097c6:	4654      	mov	r4, sl
 80097c8:	2000      	movs	r0, #0
 80097ca:	f04f 0c0a 	mov.w	ip, #10
 80097ce:	4621      	mov	r1, r4
 80097d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d4:	3b30      	subs	r3, #48	; 0x30
 80097d6:	2b09      	cmp	r3, #9
 80097d8:	d94d      	bls.n	8009876 <_vfiprintf_r+0x1a6>
 80097da:	b1b0      	cbz	r0, 800980a <_vfiprintf_r+0x13a>
 80097dc:	9207      	str	r2, [sp, #28]
 80097de:	e014      	b.n	800980a <_vfiprintf_r+0x13a>
 80097e0:	eba0 0308 	sub.w	r3, r0, r8
 80097e4:	fa09 f303 	lsl.w	r3, r9, r3
 80097e8:	4313      	orrs	r3, r2
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	46a2      	mov	sl, r4
 80097ee:	e7d2      	b.n	8009796 <_vfiprintf_r+0xc6>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	1d19      	adds	r1, r3, #4
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	9103      	str	r1, [sp, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bfbb      	ittet	lt
 80097fc:	425b      	neglt	r3, r3
 80097fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009802:	9307      	strge	r3, [sp, #28]
 8009804:	9307      	strlt	r3, [sp, #28]
 8009806:	bfb8      	it	lt
 8009808:	9204      	strlt	r2, [sp, #16]
 800980a:	7823      	ldrb	r3, [r4, #0]
 800980c:	2b2e      	cmp	r3, #46	; 0x2e
 800980e:	d10c      	bne.n	800982a <_vfiprintf_r+0x15a>
 8009810:	7863      	ldrb	r3, [r4, #1]
 8009812:	2b2a      	cmp	r3, #42	; 0x2a
 8009814:	d134      	bne.n	8009880 <_vfiprintf_r+0x1b0>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	1d1a      	adds	r2, r3, #4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	9203      	str	r2, [sp, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	bfb8      	it	lt
 8009822:	f04f 33ff 	movlt.w	r3, #4294967295
 8009826:	3402      	adds	r4, #2
 8009828:	9305      	str	r3, [sp, #20]
 800982a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009900 <_vfiprintf_r+0x230>
 800982e:	7821      	ldrb	r1, [r4, #0]
 8009830:	2203      	movs	r2, #3
 8009832:	4650      	mov	r0, sl
 8009834:	f7f6 fccc 	bl	80001d0 <memchr>
 8009838:	b138      	cbz	r0, 800984a <_vfiprintf_r+0x17a>
 800983a:	9b04      	ldr	r3, [sp, #16]
 800983c:	eba0 000a 	sub.w	r0, r0, sl
 8009840:	2240      	movs	r2, #64	; 0x40
 8009842:	4082      	lsls	r2, r0
 8009844:	4313      	orrs	r3, r2
 8009846:	3401      	adds	r4, #1
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984e:	4829      	ldr	r0, [pc, #164]	; (80098f4 <_vfiprintf_r+0x224>)
 8009850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009854:	2206      	movs	r2, #6
 8009856:	f7f6 fcbb 	bl	80001d0 <memchr>
 800985a:	2800      	cmp	r0, #0
 800985c:	d03f      	beq.n	80098de <_vfiprintf_r+0x20e>
 800985e:	4b26      	ldr	r3, [pc, #152]	; (80098f8 <_vfiprintf_r+0x228>)
 8009860:	bb1b      	cbnz	r3, 80098aa <_vfiprintf_r+0x1da>
 8009862:	9b03      	ldr	r3, [sp, #12]
 8009864:	3307      	adds	r3, #7
 8009866:	f023 0307 	bic.w	r3, r3, #7
 800986a:	3308      	adds	r3, #8
 800986c:	9303      	str	r3, [sp, #12]
 800986e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009870:	443b      	add	r3, r7
 8009872:	9309      	str	r3, [sp, #36]	; 0x24
 8009874:	e768      	b.n	8009748 <_vfiprintf_r+0x78>
 8009876:	fb0c 3202 	mla	r2, ip, r2, r3
 800987a:	460c      	mov	r4, r1
 800987c:	2001      	movs	r0, #1
 800987e:	e7a6      	b.n	80097ce <_vfiprintf_r+0xfe>
 8009880:	2300      	movs	r3, #0
 8009882:	3401      	adds	r4, #1
 8009884:	9305      	str	r3, [sp, #20]
 8009886:	4619      	mov	r1, r3
 8009888:	f04f 0c0a 	mov.w	ip, #10
 800988c:	4620      	mov	r0, r4
 800988e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009892:	3a30      	subs	r2, #48	; 0x30
 8009894:	2a09      	cmp	r2, #9
 8009896:	d903      	bls.n	80098a0 <_vfiprintf_r+0x1d0>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0c6      	beq.n	800982a <_vfiprintf_r+0x15a>
 800989c:	9105      	str	r1, [sp, #20]
 800989e:	e7c4      	b.n	800982a <_vfiprintf_r+0x15a>
 80098a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a4:	4604      	mov	r4, r0
 80098a6:	2301      	movs	r3, #1
 80098a8:	e7f0      	b.n	800988c <_vfiprintf_r+0x1bc>
 80098aa:	ab03      	add	r3, sp, #12
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4b12      	ldr	r3, [pc, #72]	; (80098fc <_vfiprintf_r+0x22c>)
 80098b2:	a904      	add	r1, sp, #16
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7fd fe8b 	bl	80075d0 <_printf_float>
 80098ba:	4607      	mov	r7, r0
 80098bc:	1c78      	adds	r0, r7, #1
 80098be:	d1d6      	bne.n	800986e <_vfiprintf_r+0x19e>
 80098c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c2:	07d9      	lsls	r1, r3, #31
 80098c4:	d405      	bmi.n	80098d2 <_vfiprintf_r+0x202>
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	059a      	lsls	r2, r3, #22
 80098ca:	d402      	bmi.n	80098d2 <_vfiprintf_r+0x202>
 80098cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ce:	f7fe fbdb 	bl	8008088 <__retarget_lock_release_recursive>
 80098d2:	89ab      	ldrh	r3, [r5, #12]
 80098d4:	065b      	lsls	r3, r3, #25
 80098d6:	f53f af1d 	bmi.w	8009714 <_vfiprintf_r+0x44>
 80098da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098dc:	e71c      	b.n	8009718 <_vfiprintf_r+0x48>
 80098de:	ab03      	add	r3, sp, #12
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	462a      	mov	r2, r5
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <_vfiprintf_r+0x22c>)
 80098e6:	a904      	add	r1, sp, #16
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7fe f915 	bl	8007b18 <_printf_i>
 80098ee:	e7e4      	b.n	80098ba <_vfiprintf_r+0x1ea>
 80098f0:	0800a79c 	.word	0x0800a79c
 80098f4:	0800a7a6 	.word	0x0800a7a6
 80098f8:	080075d1 	.word	0x080075d1
 80098fc:	080096ab 	.word	0x080096ab
 8009900:	0800a7a2 	.word	0x0800a7a2

08009904 <__sflush_r>:
 8009904:	898a      	ldrh	r2, [r1, #12]
 8009906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	4605      	mov	r5, r0
 800990c:	0710      	lsls	r0, r2, #28
 800990e:	460c      	mov	r4, r1
 8009910:	d458      	bmi.n	80099c4 <__sflush_r+0xc0>
 8009912:	684b      	ldr	r3, [r1, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	dc05      	bgt.n	8009924 <__sflush_r+0x20>
 8009918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	dc02      	bgt.n	8009924 <__sflush_r+0x20>
 800991e:	2000      	movs	r0, #0
 8009920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009926:	2e00      	cmp	r6, #0
 8009928:	d0f9      	beq.n	800991e <__sflush_r+0x1a>
 800992a:	2300      	movs	r3, #0
 800992c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009930:	682f      	ldr	r7, [r5, #0]
 8009932:	6a21      	ldr	r1, [r4, #32]
 8009934:	602b      	str	r3, [r5, #0]
 8009936:	d032      	beq.n	800999e <__sflush_r+0x9a>
 8009938:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	075a      	lsls	r2, r3, #29
 800993e:	d505      	bpl.n	800994c <__sflush_r+0x48>
 8009940:	6863      	ldr	r3, [r4, #4]
 8009942:	1ac0      	subs	r0, r0, r3
 8009944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009946:	b10b      	cbz	r3, 800994c <__sflush_r+0x48>
 8009948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800994a:	1ac0      	subs	r0, r0, r3
 800994c:	2300      	movs	r3, #0
 800994e:	4602      	mov	r2, r0
 8009950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009952:	6a21      	ldr	r1, [r4, #32]
 8009954:	4628      	mov	r0, r5
 8009956:	47b0      	blx	r6
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	d106      	bne.n	800996c <__sflush_r+0x68>
 800995e:	6829      	ldr	r1, [r5, #0]
 8009960:	291d      	cmp	r1, #29
 8009962:	d82b      	bhi.n	80099bc <__sflush_r+0xb8>
 8009964:	4a29      	ldr	r2, [pc, #164]	; (8009a0c <__sflush_r+0x108>)
 8009966:	410a      	asrs	r2, r1
 8009968:	07d6      	lsls	r6, r2, #31
 800996a:	d427      	bmi.n	80099bc <__sflush_r+0xb8>
 800996c:	2200      	movs	r2, #0
 800996e:	6062      	str	r2, [r4, #4]
 8009970:	04d9      	lsls	r1, r3, #19
 8009972:	6922      	ldr	r2, [r4, #16]
 8009974:	6022      	str	r2, [r4, #0]
 8009976:	d504      	bpl.n	8009982 <__sflush_r+0x7e>
 8009978:	1c42      	adds	r2, r0, #1
 800997a:	d101      	bne.n	8009980 <__sflush_r+0x7c>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b903      	cbnz	r3, 8009982 <__sflush_r+0x7e>
 8009980:	6560      	str	r0, [r4, #84]	; 0x54
 8009982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009984:	602f      	str	r7, [r5, #0]
 8009986:	2900      	cmp	r1, #0
 8009988:	d0c9      	beq.n	800991e <__sflush_r+0x1a>
 800998a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800998e:	4299      	cmp	r1, r3
 8009990:	d002      	beq.n	8009998 <__sflush_r+0x94>
 8009992:	4628      	mov	r0, r5
 8009994:	f7ff f9f6 	bl	8008d84 <_free_r>
 8009998:	2000      	movs	r0, #0
 800999a:	6360      	str	r0, [r4, #52]	; 0x34
 800999c:	e7c0      	b.n	8009920 <__sflush_r+0x1c>
 800999e:	2301      	movs	r3, #1
 80099a0:	4628      	mov	r0, r5
 80099a2:	47b0      	blx	r6
 80099a4:	1c41      	adds	r1, r0, #1
 80099a6:	d1c8      	bne.n	800993a <__sflush_r+0x36>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0c5      	beq.n	800993a <__sflush_r+0x36>
 80099ae:	2b1d      	cmp	r3, #29
 80099b0:	d001      	beq.n	80099b6 <__sflush_r+0xb2>
 80099b2:	2b16      	cmp	r3, #22
 80099b4:	d101      	bne.n	80099ba <__sflush_r+0xb6>
 80099b6:	602f      	str	r7, [r5, #0]
 80099b8:	e7b1      	b.n	800991e <__sflush_r+0x1a>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c0:	81a3      	strh	r3, [r4, #12]
 80099c2:	e7ad      	b.n	8009920 <__sflush_r+0x1c>
 80099c4:	690f      	ldr	r7, [r1, #16]
 80099c6:	2f00      	cmp	r7, #0
 80099c8:	d0a9      	beq.n	800991e <__sflush_r+0x1a>
 80099ca:	0793      	lsls	r3, r2, #30
 80099cc:	680e      	ldr	r6, [r1, #0]
 80099ce:	bf08      	it	eq
 80099d0:	694b      	ldreq	r3, [r1, #20]
 80099d2:	600f      	str	r7, [r1, #0]
 80099d4:	bf18      	it	ne
 80099d6:	2300      	movne	r3, #0
 80099d8:	eba6 0807 	sub.w	r8, r6, r7
 80099dc:	608b      	str	r3, [r1, #8]
 80099de:	f1b8 0f00 	cmp.w	r8, #0
 80099e2:	dd9c      	ble.n	800991e <__sflush_r+0x1a>
 80099e4:	6a21      	ldr	r1, [r4, #32]
 80099e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099e8:	4643      	mov	r3, r8
 80099ea:	463a      	mov	r2, r7
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b0      	blx	r6
 80099f0:	2800      	cmp	r0, #0
 80099f2:	dc06      	bgt.n	8009a02 <__sflush_r+0xfe>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009a00:	e78e      	b.n	8009920 <__sflush_r+0x1c>
 8009a02:	4407      	add	r7, r0
 8009a04:	eba8 0800 	sub.w	r8, r8, r0
 8009a08:	e7e9      	b.n	80099de <__sflush_r+0xda>
 8009a0a:	bf00      	nop
 8009a0c:	dfbffffe 	.word	0xdfbffffe

08009a10 <_fflush_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	690b      	ldr	r3, [r1, #16]
 8009a14:	4605      	mov	r5, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	b913      	cbnz	r3, 8009a20 <_fflush_r+0x10>
 8009a1a:	2500      	movs	r5, #0
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	b118      	cbz	r0, 8009a2a <_fflush_r+0x1a>
 8009a22:	6a03      	ldr	r3, [r0, #32]
 8009a24:	b90b      	cbnz	r3, 8009a2a <_fflush_r+0x1a>
 8009a26:	f7fe fa25 	bl	8007e74 <__sinit>
 8009a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f3      	beq.n	8009a1a <_fflush_r+0xa>
 8009a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a34:	07d0      	lsls	r0, r2, #31
 8009a36:	d404      	bmi.n	8009a42 <_fflush_r+0x32>
 8009a38:	0599      	lsls	r1, r3, #22
 8009a3a:	d402      	bmi.n	8009a42 <_fflush_r+0x32>
 8009a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a3e:	f7fe fb22 	bl	8008086 <__retarget_lock_acquire_recursive>
 8009a42:	4628      	mov	r0, r5
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7ff ff5d 	bl	8009904 <__sflush_r>
 8009a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a4c:	07da      	lsls	r2, r3, #31
 8009a4e:	4605      	mov	r5, r0
 8009a50:	d4e4      	bmi.n	8009a1c <_fflush_r+0xc>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	059b      	lsls	r3, r3, #22
 8009a56:	d4e1      	bmi.n	8009a1c <_fflush_r+0xc>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f7fe fb15 	bl	8008088 <__retarget_lock_release_recursive>
 8009a5e:	e7dd      	b.n	8009a1c <_fflush_r+0xc>

08009a60 <__swbuf_r>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	460e      	mov	r6, r1
 8009a64:	4614      	mov	r4, r2
 8009a66:	4605      	mov	r5, r0
 8009a68:	b118      	cbz	r0, 8009a72 <__swbuf_r+0x12>
 8009a6a:	6a03      	ldr	r3, [r0, #32]
 8009a6c:	b90b      	cbnz	r3, 8009a72 <__swbuf_r+0x12>
 8009a6e:	f7fe fa01 	bl	8007e74 <__sinit>
 8009a72:	69a3      	ldr	r3, [r4, #24]
 8009a74:	60a3      	str	r3, [r4, #8]
 8009a76:	89a3      	ldrh	r3, [r4, #12]
 8009a78:	071a      	lsls	r2, r3, #28
 8009a7a:	d525      	bpl.n	8009ac8 <__swbuf_r+0x68>
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	b31b      	cbz	r3, 8009ac8 <__swbuf_r+0x68>
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	6922      	ldr	r2, [r4, #16]
 8009a84:	1a98      	subs	r0, r3, r2
 8009a86:	6963      	ldr	r3, [r4, #20]
 8009a88:	b2f6      	uxtb	r6, r6
 8009a8a:	4283      	cmp	r3, r0
 8009a8c:	4637      	mov	r7, r6
 8009a8e:	dc04      	bgt.n	8009a9a <__swbuf_r+0x3a>
 8009a90:	4621      	mov	r1, r4
 8009a92:	4628      	mov	r0, r5
 8009a94:	f7ff ffbc 	bl	8009a10 <_fflush_r>
 8009a98:	b9e0      	cbnz	r0, 8009ad4 <__swbuf_r+0x74>
 8009a9a:	68a3      	ldr	r3, [r4, #8]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	60a3      	str	r3, [r4, #8]
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	6022      	str	r2, [r4, #0]
 8009aa6:	701e      	strb	r6, [r3, #0]
 8009aa8:	6962      	ldr	r2, [r4, #20]
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d004      	beq.n	8009aba <__swbuf_r+0x5a>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	07db      	lsls	r3, r3, #31
 8009ab4:	d506      	bpl.n	8009ac4 <__swbuf_r+0x64>
 8009ab6:	2e0a      	cmp	r6, #10
 8009ab8:	d104      	bne.n	8009ac4 <__swbuf_r+0x64>
 8009aba:	4621      	mov	r1, r4
 8009abc:	4628      	mov	r0, r5
 8009abe:	f7ff ffa7 	bl	8009a10 <_fflush_r>
 8009ac2:	b938      	cbnz	r0, 8009ad4 <__swbuf_r+0x74>
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4628      	mov	r0, r5
 8009acc:	f000 f806 	bl	8009adc <__swsetup_r>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d0d5      	beq.n	8009a80 <__swbuf_r+0x20>
 8009ad4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ad8:	e7f4      	b.n	8009ac4 <__swbuf_r+0x64>
	...

08009adc <__swsetup_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4b2a      	ldr	r3, [pc, #168]	; (8009b88 <__swsetup_r+0xac>)
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	6818      	ldr	r0, [r3, #0]
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	b118      	cbz	r0, 8009af0 <__swsetup_r+0x14>
 8009ae8:	6a03      	ldr	r3, [r0, #32]
 8009aea:	b90b      	cbnz	r3, 8009af0 <__swsetup_r+0x14>
 8009aec:	f7fe f9c2 	bl	8007e74 <__sinit>
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009af6:	0718      	lsls	r0, r3, #28
 8009af8:	d422      	bmi.n	8009b40 <__swsetup_r+0x64>
 8009afa:	06d9      	lsls	r1, r3, #27
 8009afc:	d407      	bmi.n	8009b0e <__swsetup_r+0x32>
 8009afe:	2309      	movs	r3, #9
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	e034      	b.n	8009b78 <__swsetup_r+0x9c>
 8009b0e:	0758      	lsls	r0, r3, #29
 8009b10:	d512      	bpl.n	8009b38 <__swsetup_r+0x5c>
 8009b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b14:	b141      	cbz	r1, 8009b28 <__swsetup_r+0x4c>
 8009b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b1a:	4299      	cmp	r1, r3
 8009b1c:	d002      	beq.n	8009b24 <__swsetup_r+0x48>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f7ff f930 	bl	8008d84 <_free_r>
 8009b24:	2300      	movs	r3, #0
 8009b26:	6363      	str	r3, [r4, #52]	; 0x34
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	2300      	movs	r3, #0
 8009b32:	6063      	str	r3, [r4, #4]
 8009b34:	6923      	ldr	r3, [r4, #16]
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	f043 0308 	orr.w	r3, r3, #8
 8009b3e:	81a3      	strh	r3, [r4, #12]
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	b94b      	cbnz	r3, 8009b58 <__swsetup_r+0x7c>
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b4e:	d003      	beq.n	8009b58 <__swsetup_r+0x7c>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 f8c4 	bl	8009ce0 <__smakebuf_r>
 8009b58:	89a0      	ldrh	r0, [r4, #12]
 8009b5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b5e:	f010 0301 	ands.w	r3, r0, #1
 8009b62:	d00a      	beq.n	8009b7a <__swsetup_r+0x9e>
 8009b64:	2300      	movs	r3, #0
 8009b66:	60a3      	str	r3, [r4, #8]
 8009b68:	6963      	ldr	r3, [r4, #20]
 8009b6a:	425b      	negs	r3, r3
 8009b6c:	61a3      	str	r3, [r4, #24]
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	b943      	cbnz	r3, 8009b84 <__swsetup_r+0xa8>
 8009b72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b76:	d1c4      	bne.n	8009b02 <__swsetup_r+0x26>
 8009b78:	bd38      	pop	{r3, r4, r5, pc}
 8009b7a:	0781      	lsls	r1, r0, #30
 8009b7c:	bf58      	it	pl
 8009b7e:	6963      	ldrpl	r3, [r4, #20]
 8009b80:	60a3      	str	r3, [r4, #8]
 8009b82:	e7f4      	b.n	8009b6e <__swsetup_r+0x92>
 8009b84:	2000      	movs	r0, #0
 8009b86:	e7f7      	b.n	8009b78 <__swsetup_r+0x9c>
 8009b88:	2000013c 	.word	0x2000013c

08009b8c <_sbrk_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4d06      	ldr	r5, [pc, #24]	; (8009ba8 <_sbrk_r+0x1c>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	f7f8 f95c 	bl	8001e54 <_sbrk>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_sbrk_r+0x1a>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_sbrk_r+0x1a>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20000550 	.word	0x20000550

08009bac <memcpy>:
 8009bac:	440a      	add	r2, r1
 8009bae:	4291      	cmp	r1, r2
 8009bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bb4:	d100      	bne.n	8009bb8 <memcpy+0xc>
 8009bb6:	4770      	bx	lr
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bc2:	4291      	cmp	r1, r2
 8009bc4:	d1f9      	bne.n	8009bba <memcpy+0xe>
 8009bc6:	bd10      	pop	{r4, pc}

08009bc8 <__assert_func>:
 8009bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bca:	4614      	mov	r4, r2
 8009bcc:	461a      	mov	r2, r3
 8009bce:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <__assert_func+0x2c>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	68d8      	ldr	r0, [r3, #12]
 8009bd6:	b14c      	cbz	r4, 8009bec <__assert_func+0x24>
 8009bd8:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <__assert_func+0x30>)
 8009bda:	9100      	str	r1, [sp, #0]
 8009bdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009be0:	4906      	ldr	r1, [pc, #24]	; (8009bfc <__assert_func+0x34>)
 8009be2:	462b      	mov	r3, r5
 8009be4:	f000 f844 	bl	8009c70 <fiprintf>
 8009be8:	f000 f8d8 	bl	8009d9c <abort>
 8009bec:	4b04      	ldr	r3, [pc, #16]	; (8009c00 <__assert_func+0x38>)
 8009bee:	461c      	mov	r4, r3
 8009bf0:	e7f3      	b.n	8009bda <__assert_func+0x12>
 8009bf2:	bf00      	nop
 8009bf4:	2000013c 	.word	0x2000013c
 8009bf8:	0800a7b7 	.word	0x0800a7b7
 8009bfc:	0800a7c4 	.word	0x0800a7c4
 8009c00:	0800a7f2 	.word	0x0800a7f2

08009c04 <_calloc_r>:
 8009c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c06:	fba1 2402 	umull	r2, r4, r1, r2
 8009c0a:	b94c      	cbnz	r4, 8009c20 <_calloc_r+0x1c>
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	9201      	str	r2, [sp, #4]
 8009c10:	f7ff f92c 	bl	8008e6c <_malloc_r>
 8009c14:	9a01      	ldr	r2, [sp, #4]
 8009c16:	4605      	mov	r5, r0
 8009c18:	b930      	cbnz	r0, 8009c28 <_calloc_r+0x24>
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	b003      	add	sp, #12
 8009c1e:	bd30      	pop	{r4, r5, pc}
 8009c20:	220c      	movs	r2, #12
 8009c22:	6002      	str	r2, [r0, #0]
 8009c24:	2500      	movs	r5, #0
 8009c26:	e7f8      	b.n	8009c1a <_calloc_r+0x16>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	f7fe f9ae 	bl	8007f8a <memset>
 8009c2e:	e7f4      	b.n	8009c1a <_calloc_r+0x16>

08009c30 <__ascii_mbtowc>:
 8009c30:	b082      	sub	sp, #8
 8009c32:	b901      	cbnz	r1, 8009c36 <__ascii_mbtowc+0x6>
 8009c34:	a901      	add	r1, sp, #4
 8009c36:	b142      	cbz	r2, 8009c4a <__ascii_mbtowc+0x1a>
 8009c38:	b14b      	cbz	r3, 8009c4e <__ascii_mbtowc+0x1e>
 8009c3a:	7813      	ldrb	r3, [r2, #0]
 8009c3c:	600b      	str	r3, [r1, #0]
 8009c3e:	7812      	ldrb	r2, [r2, #0]
 8009c40:	1e10      	subs	r0, r2, #0
 8009c42:	bf18      	it	ne
 8009c44:	2001      	movne	r0, #1
 8009c46:	b002      	add	sp, #8
 8009c48:	4770      	bx	lr
 8009c4a:	4610      	mov	r0, r2
 8009c4c:	e7fb      	b.n	8009c46 <__ascii_mbtowc+0x16>
 8009c4e:	f06f 0001 	mvn.w	r0, #1
 8009c52:	e7f8      	b.n	8009c46 <__ascii_mbtowc+0x16>

08009c54 <__ascii_wctomb>:
 8009c54:	b149      	cbz	r1, 8009c6a <__ascii_wctomb+0x16>
 8009c56:	2aff      	cmp	r2, #255	; 0xff
 8009c58:	bf85      	ittet	hi
 8009c5a:	238a      	movhi	r3, #138	; 0x8a
 8009c5c:	6003      	strhi	r3, [r0, #0]
 8009c5e:	700a      	strbls	r2, [r1, #0]
 8009c60:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c64:	bf98      	it	ls
 8009c66:	2001      	movls	r0, #1
 8009c68:	4770      	bx	lr
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	4770      	bx	lr
	...

08009c70 <fiprintf>:
 8009c70:	b40e      	push	{r1, r2, r3}
 8009c72:	b503      	push	{r0, r1, lr}
 8009c74:	4601      	mov	r1, r0
 8009c76:	ab03      	add	r3, sp, #12
 8009c78:	4805      	ldr	r0, [pc, #20]	; (8009c90 <fiprintf+0x20>)
 8009c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c7e:	6800      	ldr	r0, [r0, #0]
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	f7ff fd25 	bl	80096d0 <_vfiprintf_r>
 8009c86:	b002      	add	sp, #8
 8009c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c8c:	b003      	add	sp, #12
 8009c8e:	4770      	bx	lr
 8009c90:	2000013c 	.word	0x2000013c

08009c94 <__swhatbuf_r>:
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	460c      	mov	r4, r1
 8009c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	b096      	sub	sp, #88	; 0x58
 8009ca0:	4615      	mov	r5, r2
 8009ca2:	461e      	mov	r6, r3
 8009ca4:	da0d      	bge.n	8009cc2 <__swhatbuf_r+0x2e>
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009cac:	f04f 0100 	mov.w	r1, #0
 8009cb0:	bf0c      	ite	eq
 8009cb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009cb6:	2340      	movne	r3, #64	; 0x40
 8009cb8:	2000      	movs	r0, #0
 8009cba:	6031      	str	r1, [r6, #0]
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	b016      	add	sp, #88	; 0x58
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	466a      	mov	r2, sp
 8009cc4:	f000 f848 	bl	8009d58 <_fstat_r>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	dbec      	blt.n	8009ca6 <__swhatbuf_r+0x12>
 8009ccc:	9901      	ldr	r1, [sp, #4]
 8009cce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009cd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009cd6:	4259      	negs	r1, r3
 8009cd8:	4159      	adcs	r1, r3
 8009cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cde:	e7eb      	b.n	8009cb8 <__swhatbuf_r+0x24>

08009ce0 <__smakebuf_r>:
 8009ce0:	898b      	ldrh	r3, [r1, #12]
 8009ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ce4:	079d      	lsls	r5, r3, #30
 8009ce6:	4606      	mov	r6, r0
 8009ce8:	460c      	mov	r4, r1
 8009cea:	d507      	bpl.n	8009cfc <__smakebuf_r+0x1c>
 8009cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	6123      	str	r3, [r4, #16]
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	6163      	str	r3, [r4, #20]
 8009cf8:	b002      	add	sp, #8
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}
 8009cfc:	ab01      	add	r3, sp, #4
 8009cfe:	466a      	mov	r2, sp
 8009d00:	f7ff ffc8 	bl	8009c94 <__swhatbuf_r>
 8009d04:	9900      	ldr	r1, [sp, #0]
 8009d06:	4605      	mov	r5, r0
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f7ff f8af 	bl	8008e6c <_malloc_r>
 8009d0e:	b948      	cbnz	r0, 8009d24 <__smakebuf_r+0x44>
 8009d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d14:	059a      	lsls	r2, r3, #22
 8009d16:	d4ef      	bmi.n	8009cf8 <__smakebuf_r+0x18>
 8009d18:	f023 0303 	bic.w	r3, r3, #3
 8009d1c:	f043 0302 	orr.w	r3, r3, #2
 8009d20:	81a3      	strh	r3, [r4, #12]
 8009d22:	e7e3      	b.n	8009cec <__smakebuf_r+0xc>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	6020      	str	r0, [r4, #0]
 8009d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2c:	81a3      	strh	r3, [r4, #12]
 8009d2e:	9b00      	ldr	r3, [sp, #0]
 8009d30:	6163      	str	r3, [r4, #20]
 8009d32:	9b01      	ldr	r3, [sp, #4]
 8009d34:	6120      	str	r0, [r4, #16]
 8009d36:	b15b      	cbz	r3, 8009d50 <__smakebuf_r+0x70>
 8009d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f000 f81d 	bl	8009d7c <_isatty_r>
 8009d42:	b128      	cbz	r0, 8009d50 <__smakebuf_r+0x70>
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	f043 0301 	orr.w	r3, r3, #1
 8009d4e:	81a3      	strh	r3, [r4, #12]
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	431d      	orrs	r5, r3
 8009d54:	81a5      	strh	r5, [r4, #12]
 8009d56:	e7cf      	b.n	8009cf8 <__smakebuf_r+0x18>

08009d58 <_fstat_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d07      	ldr	r5, [pc, #28]	; (8009d78 <_fstat_r+0x20>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	4611      	mov	r1, r2
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	f7f8 f84c 	bl	8001e02 <_fstat>
 8009d6a:	1c43      	adds	r3, r0, #1
 8009d6c:	d102      	bne.n	8009d74 <_fstat_r+0x1c>
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	b103      	cbz	r3, 8009d74 <_fstat_r+0x1c>
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	bd38      	pop	{r3, r4, r5, pc}
 8009d76:	bf00      	nop
 8009d78:	20000550 	.word	0x20000550

08009d7c <_isatty_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d06      	ldr	r5, [pc, #24]	; (8009d98 <_isatty_r+0x1c>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f8 f84b 	bl	8001e22 <_isatty>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_isatty_r+0x1a>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_isatty_r+0x1a>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	20000550 	.word	0x20000550

08009d9c <abort>:
 8009d9c:	b508      	push	{r3, lr}
 8009d9e:	2006      	movs	r0, #6
 8009da0:	f000 f82c 	bl	8009dfc <raise>
 8009da4:	2001      	movs	r0, #1
 8009da6:	f7f7 ffdd 	bl	8001d64 <_exit>

08009daa <_raise_r>:
 8009daa:	291f      	cmp	r1, #31
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	d904      	bls.n	8009dbe <_raise_r+0x14>
 8009db4:	2316      	movs	r3, #22
 8009db6:	6003      	str	r3, [r0, #0]
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbc:	bd38      	pop	{r3, r4, r5, pc}
 8009dbe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009dc0:	b112      	cbz	r2, 8009dc8 <_raise_r+0x1e>
 8009dc2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dc6:	b94b      	cbnz	r3, 8009ddc <_raise_r+0x32>
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 f831 	bl	8009e30 <_getpid_r>
 8009dce:	462a      	mov	r2, r5
 8009dd0:	4601      	mov	r1, r0
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd8:	f000 b818 	b.w	8009e0c <_kill_r>
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d00a      	beq.n	8009df6 <_raise_r+0x4c>
 8009de0:	1c59      	adds	r1, r3, #1
 8009de2:	d103      	bne.n	8009dec <_raise_r+0x42>
 8009de4:	2316      	movs	r3, #22
 8009de6:	6003      	str	r3, [r0, #0]
 8009de8:	2001      	movs	r0, #1
 8009dea:	e7e7      	b.n	8009dbc <_raise_r+0x12>
 8009dec:	2400      	movs	r4, #0
 8009dee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009df2:	4628      	mov	r0, r5
 8009df4:	4798      	blx	r3
 8009df6:	2000      	movs	r0, #0
 8009df8:	e7e0      	b.n	8009dbc <_raise_r+0x12>
	...

08009dfc <raise>:
 8009dfc:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <raise+0xc>)
 8009dfe:	4601      	mov	r1, r0
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	f7ff bfd2 	b.w	8009daa <_raise_r>
 8009e06:	bf00      	nop
 8009e08:	2000013c 	.word	0x2000013c

08009e0c <_kill_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d07      	ldr	r5, [pc, #28]	; (8009e2c <_kill_r+0x20>)
 8009e10:	2300      	movs	r3, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	4611      	mov	r1, r2
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	f7f7 ff93 	bl	8001d44 <_kill>
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	d102      	bne.n	8009e28 <_kill_r+0x1c>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	b103      	cbz	r3, 8009e28 <_kill_r+0x1c>
 8009e26:	6023      	str	r3, [r4, #0]
 8009e28:	bd38      	pop	{r3, r4, r5, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000550 	.word	0x20000550

08009e30 <_getpid_r>:
 8009e30:	f7f7 bf80 	b.w	8001d34 <_getpid>

08009e34 <atan2>:
 8009e34:	f000 b908 	b.w	800a048 <__ieee754_atan2>

08009e38 <sqrt>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	ed2d 8b02 	vpush	{d8}
 8009e3e:	ec55 4b10 	vmov	r4, r5, d0
 8009e42:	f000 f825 	bl	8009e90 <__ieee754_sqrt>
 8009e46:	4622      	mov	r2, r4
 8009e48:	462b      	mov	r3, r5
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	eeb0 8a40 	vmov.f32	s16, s0
 8009e52:	eef0 8a60 	vmov.f32	s17, s1
 8009e56:	f7f6 fe69 	bl	8000b2c <__aeabi_dcmpun>
 8009e5a:	b990      	cbnz	r0, 8009e82 <sqrt+0x4a>
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4620      	mov	r0, r4
 8009e62:	4629      	mov	r1, r5
 8009e64:	f7f6 fe3a 	bl	8000adc <__aeabi_dcmplt>
 8009e68:	b158      	cbz	r0, 8009e82 <sqrt+0x4a>
 8009e6a:	f7fe f8e1 	bl	8008030 <__errno>
 8009e6e:	2321      	movs	r3, #33	; 0x21
 8009e70:	6003      	str	r3, [r0, #0]
 8009e72:	2200      	movs	r2, #0
 8009e74:	2300      	movs	r3, #0
 8009e76:	4610      	mov	r0, r2
 8009e78:	4619      	mov	r1, r3
 8009e7a:	f7f6 fce7 	bl	800084c <__aeabi_ddiv>
 8009e7e:	ec41 0b18 	vmov	d8, r0, r1
 8009e82:	eeb0 0a48 	vmov.f32	s0, s16
 8009e86:	eef0 0a68 	vmov.f32	s1, s17
 8009e8a:	ecbd 8b02 	vpop	{d8}
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}

08009e90 <__ieee754_sqrt>:
 8009e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	ec55 4b10 	vmov	r4, r5, d0
 8009e98:	4e67      	ldr	r6, [pc, #412]	; (800a038 <__ieee754_sqrt+0x1a8>)
 8009e9a:	43ae      	bics	r6, r5
 8009e9c:	ee10 0a10 	vmov	r0, s0
 8009ea0:	ee10 2a10 	vmov	r2, s0
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	462b      	mov	r3, r5
 8009ea8:	d10d      	bne.n	8009ec6 <__ieee754_sqrt+0x36>
 8009eaa:	f7f6 fba5 	bl	80005f8 <__aeabi_dmul>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	f7f6 f9e9 	bl	800028c <__adddf3>
 8009eba:	4604      	mov	r4, r0
 8009ebc:	460d      	mov	r5, r1
 8009ebe:	ec45 4b10 	vmov	d0, r4, r5
 8009ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	dc0b      	bgt.n	8009ee2 <__ieee754_sqrt+0x52>
 8009eca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ece:	4326      	orrs	r6, r4
 8009ed0:	d0f5      	beq.n	8009ebe <__ieee754_sqrt+0x2e>
 8009ed2:	b135      	cbz	r5, 8009ee2 <__ieee754_sqrt+0x52>
 8009ed4:	f7f6 f9d8 	bl	8000288 <__aeabi_dsub>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	f7f6 fcb6 	bl	800084c <__aeabi_ddiv>
 8009ee0:	e7eb      	b.n	8009eba <__ieee754_sqrt+0x2a>
 8009ee2:	1509      	asrs	r1, r1, #20
 8009ee4:	f000 808d 	beq.w	800a002 <__ieee754_sqrt+0x172>
 8009ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eec:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ef4:	07c9      	lsls	r1, r1, #31
 8009ef6:	bf5c      	itt	pl
 8009ef8:	005b      	lslpl	r3, r3, #1
 8009efa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009efe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f02:	bf58      	it	pl
 8009f04:	0052      	lslpl	r2, r2, #1
 8009f06:	2500      	movs	r5, #0
 8009f08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009f0c:	1076      	asrs	r6, r6, #1
 8009f0e:	0052      	lsls	r2, r2, #1
 8009f10:	f04f 0e16 	mov.w	lr, #22
 8009f14:	46ac      	mov	ip, r5
 8009f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f1a:	eb0c 0001 	add.w	r0, ip, r1
 8009f1e:	4298      	cmp	r0, r3
 8009f20:	bfde      	ittt	le
 8009f22:	1a1b      	suble	r3, r3, r0
 8009f24:	eb00 0c01 	addle.w	ip, r0, r1
 8009f28:	186d      	addle	r5, r5, r1
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	f1be 0e01 	subs.w	lr, lr, #1
 8009f30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009f34:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009f38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009f3c:	d1ed      	bne.n	8009f1a <__ieee754_sqrt+0x8a>
 8009f3e:	4674      	mov	r4, lr
 8009f40:	2720      	movs	r7, #32
 8009f42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009f46:	4563      	cmp	r3, ip
 8009f48:	eb01 000e 	add.w	r0, r1, lr
 8009f4c:	dc02      	bgt.n	8009f54 <__ieee754_sqrt+0xc4>
 8009f4e:	d113      	bne.n	8009f78 <__ieee754_sqrt+0xe8>
 8009f50:	4290      	cmp	r0, r2
 8009f52:	d811      	bhi.n	8009f78 <__ieee754_sqrt+0xe8>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	eb00 0e01 	add.w	lr, r0, r1
 8009f5a:	da57      	bge.n	800a00c <__ieee754_sqrt+0x17c>
 8009f5c:	f1be 0f00 	cmp.w	lr, #0
 8009f60:	db54      	blt.n	800a00c <__ieee754_sqrt+0x17c>
 8009f62:	f10c 0801 	add.w	r8, ip, #1
 8009f66:	eba3 030c 	sub.w	r3, r3, ip
 8009f6a:	4290      	cmp	r0, r2
 8009f6c:	bf88      	it	hi
 8009f6e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009f72:	1a12      	subs	r2, r2, r0
 8009f74:	440c      	add	r4, r1
 8009f76:	46c4      	mov	ip, r8
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	3f01      	subs	r7, #1
 8009f7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009f80:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009f84:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009f88:	d1dd      	bne.n	8009f46 <__ieee754_sqrt+0xb6>
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	d01b      	beq.n	8009fc6 <__ieee754_sqrt+0x136>
 8009f8e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a03c <__ieee754_sqrt+0x1ac>
 8009f92:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a040 <__ieee754_sqrt+0x1b0>
 8009f96:	e9da 0100 	ldrd	r0, r1, [sl]
 8009f9a:	e9db 2300 	ldrd	r2, r3, [fp]
 8009f9e:	f7f6 f973 	bl	8000288 <__aeabi_dsub>
 8009fa2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4640      	mov	r0, r8
 8009fac:	4649      	mov	r1, r9
 8009fae:	f7f6 fd9f 	bl	8000af0 <__aeabi_dcmple>
 8009fb2:	b140      	cbz	r0, 8009fc6 <__ieee754_sqrt+0x136>
 8009fb4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009fb8:	e9da 0100 	ldrd	r0, r1, [sl]
 8009fbc:	e9db 2300 	ldrd	r2, r3, [fp]
 8009fc0:	d126      	bne.n	800a010 <__ieee754_sqrt+0x180>
 8009fc2:	3501      	adds	r5, #1
 8009fc4:	463c      	mov	r4, r7
 8009fc6:	106a      	asrs	r2, r5, #1
 8009fc8:	0863      	lsrs	r3, r4, #1
 8009fca:	07e9      	lsls	r1, r5, #31
 8009fcc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009fd0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009fd4:	bf48      	it	mi
 8009fd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009fda:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009fde:	461c      	mov	r4, r3
 8009fe0:	e76d      	b.n	8009ebe <__ieee754_sqrt+0x2e>
 8009fe2:	0ad3      	lsrs	r3, r2, #11
 8009fe4:	3815      	subs	r0, #21
 8009fe6:	0552      	lsls	r2, r2, #21
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0fa      	beq.n	8009fe2 <__ieee754_sqrt+0x152>
 8009fec:	02dc      	lsls	r4, r3, #11
 8009fee:	d50a      	bpl.n	800a006 <__ieee754_sqrt+0x176>
 8009ff0:	f1c1 0420 	rsb	r4, r1, #32
 8009ff4:	fa22 f404 	lsr.w	r4, r2, r4
 8009ff8:	1e4d      	subs	r5, r1, #1
 8009ffa:	408a      	lsls	r2, r1
 8009ffc:	4323      	orrs	r3, r4
 8009ffe:	1b41      	subs	r1, r0, r5
 800a000:	e772      	b.n	8009ee8 <__ieee754_sqrt+0x58>
 800a002:	4608      	mov	r0, r1
 800a004:	e7f0      	b.n	8009fe8 <__ieee754_sqrt+0x158>
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	3101      	adds	r1, #1
 800a00a:	e7ef      	b.n	8009fec <__ieee754_sqrt+0x15c>
 800a00c:	46e0      	mov	r8, ip
 800a00e:	e7aa      	b.n	8009f66 <__ieee754_sqrt+0xd6>
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	e9da 8900 	ldrd	r8, r9, [sl]
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4640      	mov	r0, r8
 800a01e:	4649      	mov	r1, r9
 800a020:	f7f6 fd5c 	bl	8000adc <__aeabi_dcmplt>
 800a024:	b120      	cbz	r0, 800a030 <__ieee754_sqrt+0x1a0>
 800a026:	1ca0      	adds	r0, r4, #2
 800a028:	bf08      	it	eq
 800a02a:	3501      	addeq	r5, #1
 800a02c:	3402      	adds	r4, #2
 800a02e:	e7ca      	b.n	8009fc6 <__ieee754_sqrt+0x136>
 800a030:	3401      	adds	r4, #1
 800a032:	f024 0401 	bic.w	r4, r4, #1
 800a036:	e7c6      	b.n	8009fc6 <__ieee754_sqrt+0x136>
 800a038:	7ff00000 	.word	0x7ff00000
 800a03c:	200002b0 	.word	0x200002b0
 800a040:	200002b8 	.word	0x200002b8
 800a044:	00000000 	.word	0x00000000

0800a048 <__ieee754_atan2>:
 800a048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a04c:	ec57 6b11 	vmov	r6, r7, d1
 800a050:	4273      	negs	r3, r6
 800a052:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800a1d0 <__ieee754_atan2+0x188>
 800a056:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a05a:	4333      	orrs	r3, r6
 800a05c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a060:	4543      	cmp	r3, r8
 800a062:	ec51 0b10 	vmov	r0, r1, d0
 800a066:	ee11 5a10 	vmov	r5, s2
 800a06a:	d80a      	bhi.n	800a082 <__ieee754_atan2+0x3a>
 800a06c:	4244      	negs	r4, r0
 800a06e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a072:	4304      	orrs	r4, r0
 800a074:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a078:	4544      	cmp	r4, r8
 800a07a:	ee10 9a10 	vmov	r9, s0
 800a07e:	468e      	mov	lr, r1
 800a080:	d907      	bls.n	800a092 <__ieee754_atan2+0x4a>
 800a082:	4632      	mov	r2, r6
 800a084:	463b      	mov	r3, r7
 800a086:	f7f6 f901 	bl	800028c <__adddf3>
 800a08a:	ec41 0b10 	vmov	d0, r0, r1
 800a08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a092:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a096:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a09a:	4334      	orrs	r4, r6
 800a09c:	d103      	bne.n	800a0a6 <__ieee754_atan2+0x5e>
 800a09e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a2:	f000 b899 	b.w	800a1d8 <atan>
 800a0a6:	17bc      	asrs	r4, r7, #30
 800a0a8:	f004 0402 	and.w	r4, r4, #2
 800a0ac:	ea53 0909 	orrs.w	r9, r3, r9
 800a0b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a0b4:	d107      	bne.n	800a0c6 <__ieee754_atan2+0x7e>
 800a0b6:	2c02      	cmp	r4, #2
 800a0b8:	d05f      	beq.n	800a17a <__ieee754_atan2+0x132>
 800a0ba:	2c03      	cmp	r4, #3
 800a0bc:	d1e5      	bne.n	800a08a <__ieee754_atan2+0x42>
 800a0be:	a140      	add	r1, pc, #256	; (adr r1, 800a1c0 <__ieee754_atan2+0x178>)
 800a0c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0c4:	e7e1      	b.n	800a08a <__ieee754_atan2+0x42>
 800a0c6:	4315      	orrs	r5, r2
 800a0c8:	d106      	bne.n	800a0d8 <__ieee754_atan2+0x90>
 800a0ca:	f1be 0f00 	cmp.w	lr, #0
 800a0ce:	da5f      	bge.n	800a190 <__ieee754_atan2+0x148>
 800a0d0:	a13d      	add	r1, pc, #244	; (adr r1, 800a1c8 <__ieee754_atan2+0x180>)
 800a0d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d6:	e7d8      	b.n	800a08a <__ieee754_atan2+0x42>
 800a0d8:	4542      	cmp	r2, r8
 800a0da:	d10f      	bne.n	800a0fc <__ieee754_atan2+0xb4>
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	f104 34ff 	add.w	r4, r4, #4294967295
 800a0e2:	d107      	bne.n	800a0f4 <__ieee754_atan2+0xac>
 800a0e4:	2c02      	cmp	r4, #2
 800a0e6:	d84c      	bhi.n	800a182 <__ieee754_atan2+0x13a>
 800a0e8:	4b33      	ldr	r3, [pc, #204]	; (800a1b8 <__ieee754_atan2+0x170>)
 800a0ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0f2:	e7ca      	b.n	800a08a <__ieee754_atan2+0x42>
 800a0f4:	2c02      	cmp	r4, #2
 800a0f6:	d848      	bhi.n	800a18a <__ieee754_atan2+0x142>
 800a0f8:	4b30      	ldr	r3, [pc, #192]	; (800a1bc <__ieee754_atan2+0x174>)
 800a0fa:	e7f6      	b.n	800a0ea <__ieee754_atan2+0xa2>
 800a0fc:	4543      	cmp	r3, r8
 800a0fe:	d0e4      	beq.n	800a0ca <__ieee754_atan2+0x82>
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a106:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a10a:	da1e      	bge.n	800a14a <__ieee754_atan2+0x102>
 800a10c:	2f00      	cmp	r7, #0
 800a10e:	da01      	bge.n	800a114 <__ieee754_atan2+0xcc>
 800a110:	323c      	adds	r2, #60	; 0x3c
 800a112:	db1e      	blt.n	800a152 <__ieee754_atan2+0x10a>
 800a114:	4632      	mov	r2, r6
 800a116:	463b      	mov	r3, r7
 800a118:	f7f6 fb98 	bl	800084c <__aeabi_ddiv>
 800a11c:	ec41 0b10 	vmov	d0, r0, r1
 800a120:	f000 f9fa 	bl	800a518 <fabs>
 800a124:	f000 f858 	bl	800a1d8 <atan>
 800a128:	ec51 0b10 	vmov	r0, r1, d0
 800a12c:	2c01      	cmp	r4, #1
 800a12e:	d013      	beq.n	800a158 <__ieee754_atan2+0x110>
 800a130:	2c02      	cmp	r4, #2
 800a132:	d015      	beq.n	800a160 <__ieee754_atan2+0x118>
 800a134:	2c00      	cmp	r4, #0
 800a136:	d0a8      	beq.n	800a08a <__ieee754_atan2+0x42>
 800a138:	a317      	add	r3, pc, #92	; (adr r3, 800a198 <__ieee754_atan2+0x150>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f7f6 f8a3 	bl	8000288 <__aeabi_dsub>
 800a142:	a317      	add	r3, pc, #92	; (adr r3, 800a1a0 <__ieee754_atan2+0x158>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	e014      	b.n	800a174 <__ieee754_atan2+0x12c>
 800a14a:	a117      	add	r1, pc, #92	; (adr r1, 800a1a8 <__ieee754_atan2+0x160>)
 800a14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a150:	e7ec      	b.n	800a12c <__ieee754_atan2+0xe4>
 800a152:	2000      	movs	r0, #0
 800a154:	2100      	movs	r1, #0
 800a156:	e7e9      	b.n	800a12c <__ieee754_atan2+0xe4>
 800a158:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a15c:	4619      	mov	r1, r3
 800a15e:	e794      	b.n	800a08a <__ieee754_atan2+0x42>
 800a160:	a30d      	add	r3, pc, #52	; (adr r3, 800a198 <__ieee754_atan2+0x150>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 f88f 	bl	8000288 <__aeabi_dsub>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	a10c      	add	r1, pc, #48	; (adr r1, 800a1a0 <__ieee754_atan2+0x158>)
 800a170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a174:	f7f6 f888 	bl	8000288 <__aeabi_dsub>
 800a178:	e787      	b.n	800a08a <__ieee754_atan2+0x42>
 800a17a:	a109      	add	r1, pc, #36	; (adr r1, 800a1a0 <__ieee754_atan2+0x158>)
 800a17c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a180:	e783      	b.n	800a08a <__ieee754_atan2+0x42>
 800a182:	a10b      	add	r1, pc, #44	; (adr r1, 800a1b0 <__ieee754_atan2+0x168>)
 800a184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a188:	e77f      	b.n	800a08a <__ieee754_atan2+0x42>
 800a18a:	2000      	movs	r0, #0
 800a18c:	2100      	movs	r1, #0
 800a18e:	e77c      	b.n	800a08a <__ieee754_atan2+0x42>
 800a190:	a105      	add	r1, pc, #20	; (adr r1, 800a1a8 <__ieee754_atan2+0x160>)
 800a192:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a196:	e778      	b.n	800a08a <__ieee754_atan2+0x42>
 800a198:	33145c07 	.word	0x33145c07
 800a19c:	3ca1a626 	.word	0x3ca1a626
 800a1a0:	54442d18 	.word	0x54442d18
 800a1a4:	400921fb 	.word	0x400921fb
 800a1a8:	54442d18 	.word	0x54442d18
 800a1ac:	3ff921fb 	.word	0x3ff921fb
 800a1b0:	54442d18 	.word	0x54442d18
 800a1b4:	3fe921fb 	.word	0x3fe921fb
 800a1b8:	0800a8f8 	.word	0x0800a8f8
 800a1bc:	0800a910 	.word	0x0800a910
 800a1c0:	54442d18 	.word	0x54442d18
 800a1c4:	c00921fb 	.word	0xc00921fb
 800a1c8:	54442d18 	.word	0x54442d18
 800a1cc:	bff921fb 	.word	0xbff921fb
 800a1d0:	7ff00000 	.word	0x7ff00000
 800a1d4:	00000000 	.word	0x00000000

0800a1d8 <atan>:
 800a1d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	ec55 4b10 	vmov	r4, r5, d0
 800a1e0:	4bc3      	ldr	r3, [pc, #780]	; (800a4f0 <atan+0x318>)
 800a1e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a1e6:	429e      	cmp	r6, r3
 800a1e8:	46ab      	mov	fp, r5
 800a1ea:	dd18      	ble.n	800a21e <atan+0x46>
 800a1ec:	4bc1      	ldr	r3, [pc, #772]	; (800a4f4 <atan+0x31c>)
 800a1ee:	429e      	cmp	r6, r3
 800a1f0:	dc01      	bgt.n	800a1f6 <atan+0x1e>
 800a1f2:	d109      	bne.n	800a208 <atan+0x30>
 800a1f4:	b144      	cbz	r4, 800a208 <atan+0x30>
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	462b      	mov	r3, r5
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	f7f6 f845 	bl	800028c <__adddf3>
 800a202:	4604      	mov	r4, r0
 800a204:	460d      	mov	r5, r1
 800a206:	e006      	b.n	800a216 <atan+0x3e>
 800a208:	f1bb 0f00 	cmp.w	fp, #0
 800a20c:	f300 8131 	bgt.w	800a472 <atan+0x29a>
 800a210:	a59b      	add	r5, pc, #620	; (adr r5, 800a480 <atan+0x2a8>)
 800a212:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a216:	ec45 4b10 	vmov	d0, r4, r5
 800a21a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	4bb6      	ldr	r3, [pc, #728]	; (800a4f8 <atan+0x320>)
 800a220:	429e      	cmp	r6, r3
 800a222:	dc14      	bgt.n	800a24e <atan+0x76>
 800a224:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a228:	429e      	cmp	r6, r3
 800a22a:	dc0d      	bgt.n	800a248 <atan+0x70>
 800a22c:	a396      	add	r3, pc, #600	; (adr r3, 800a488 <atan+0x2b0>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	ee10 0a10 	vmov	r0, s0
 800a236:	4629      	mov	r1, r5
 800a238:	f7f6 f828 	bl	800028c <__adddf3>
 800a23c:	4baf      	ldr	r3, [pc, #700]	; (800a4fc <atan+0x324>)
 800a23e:	2200      	movs	r2, #0
 800a240:	f7f6 fc6a 	bl	8000b18 <__aeabi_dcmpgt>
 800a244:	2800      	cmp	r0, #0
 800a246:	d1e6      	bne.n	800a216 <atan+0x3e>
 800a248:	f04f 3aff 	mov.w	sl, #4294967295
 800a24c:	e02b      	b.n	800a2a6 <atan+0xce>
 800a24e:	f000 f963 	bl	800a518 <fabs>
 800a252:	4bab      	ldr	r3, [pc, #684]	; (800a500 <atan+0x328>)
 800a254:	429e      	cmp	r6, r3
 800a256:	ec55 4b10 	vmov	r4, r5, d0
 800a25a:	f300 80bf 	bgt.w	800a3dc <atan+0x204>
 800a25e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a262:	429e      	cmp	r6, r3
 800a264:	f300 80a0 	bgt.w	800a3a8 <atan+0x1d0>
 800a268:	ee10 2a10 	vmov	r2, s0
 800a26c:	ee10 0a10 	vmov	r0, s0
 800a270:	462b      	mov	r3, r5
 800a272:	4629      	mov	r1, r5
 800a274:	f7f6 f80a 	bl	800028c <__adddf3>
 800a278:	4ba0      	ldr	r3, [pc, #640]	; (800a4fc <atan+0x324>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	f7f6 f804 	bl	8000288 <__aeabi_dsub>
 800a280:	2200      	movs	r2, #0
 800a282:	4606      	mov	r6, r0
 800a284:	460f      	mov	r7, r1
 800a286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a28a:	4620      	mov	r0, r4
 800a28c:	4629      	mov	r1, r5
 800a28e:	f7f5 fffd 	bl	800028c <__adddf3>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 fad7 	bl	800084c <__aeabi_ddiv>
 800a29e:	f04f 0a00 	mov.w	sl, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	4622      	mov	r2, r4
 800a2a8:	462b      	mov	r3, r5
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	f7f6 f9a3 	bl	80005f8 <__aeabi_dmul>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	4689      	mov	r9, r1
 800a2ba:	f7f6 f99d 	bl	80005f8 <__aeabi_dmul>
 800a2be:	a374      	add	r3, pc, #464	; (adr r3, 800a490 <atan+0x2b8>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	460f      	mov	r7, r1
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	a372      	add	r3, pc, #456	; (adr r3, 800a498 <atan+0x2c0>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f5 ffdb 	bl	800028c <__adddf3>
 800a2d6:	4632      	mov	r2, r6
 800a2d8:	463b      	mov	r3, r7
 800a2da:	f7f6 f98d 	bl	80005f8 <__aeabi_dmul>
 800a2de:	a370      	add	r3, pc, #448	; (adr r3, 800a4a0 <atan+0x2c8>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f5 ffd2 	bl	800028c <__adddf3>
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	f7f6 f984 	bl	80005f8 <__aeabi_dmul>
 800a2f0:	a36d      	add	r3, pc, #436	; (adr r3, 800a4a8 <atan+0x2d0>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	f7f5 ffc9 	bl	800028c <__adddf3>
 800a2fa:	4632      	mov	r2, r6
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	f7f6 f97b 	bl	80005f8 <__aeabi_dmul>
 800a302:	a36b      	add	r3, pc, #428	; (adr r3, 800a4b0 <atan+0x2d8>)
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f7f5 ffc0 	bl	800028c <__adddf3>
 800a30c:	4632      	mov	r2, r6
 800a30e:	463b      	mov	r3, r7
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	a368      	add	r3, pc, #416	; (adr r3, 800a4b8 <atan+0x2e0>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	f7f5 ffb7 	bl	800028c <__adddf3>
 800a31e:	4642      	mov	r2, r8
 800a320:	464b      	mov	r3, r9
 800a322:	f7f6 f969 	bl	80005f8 <__aeabi_dmul>
 800a326:	a366      	add	r3, pc, #408	; (adr r3, 800a4c0 <atan+0x2e8>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	4680      	mov	r8, r0
 800a32e:	4689      	mov	r9, r1
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f6 f960 	bl	80005f8 <__aeabi_dmul>
 800a338:	a363      	add	r3, pc, #396	; (adr r3, 800a4c8 <atan+0x2f0>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f5 ffa3 	bl	8000288 <__aeabi_dsub>
 800a342:	4632      	mov	r2, r6
 800a344:	463b      	mov	r3, r7
 800a346:	f7f6 f957 	bl	80005f8 <__aeabi_dmul>
 800a34a:	a361      	add	r3, pc, #388	; (adr r3, 800a4d0 <atan+0x2f8>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ff9a 	bl	8000288 <__aeabi_dsub>
 800a354:	4632      	mov	r2, r6
 800a356:	463b      	mov	r3, r7
 800a358:	f7f6 f94e 	bl	80005f8 <__aeabi_dmul>
 800a35c:	a35e      	add	r3, pc, #376	; (adr r3, 800a4d8 <atan+0x300>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff91 	bl	8000288 <__aeabi_dsub>
 800a366:	4632      	mov	r2, r6
 800a368:	463b      	mov	r3, r7
 800a36a:	f7f6 f945 	bl	80005f8 <__aeabi_dmul>
 800a36e:	a35c      	add	r3, pc, #368	; (adr r3, 800a4e0 <atan+0x308>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ff88 	bl	8000288 <__aeabi_dsub>
 800a378:	4632      	mov	r2, r6
 800a37a:	463b      	mov	r3, r7
 800a37c:	f7f6 f93c 	bl	80005f8 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4640      	mov	r0, r8
 800a386:	4649      	mov	r1, r9
 800a388:	f7f5 ff80 	bl	800028c <__adddf3>
 800a38c:	4622      	mov	r2, r4
 800a38e:	462b      	mov	r3, r5
 800a390:	f7f6 f932 	bl	80005f8 <__aeabi_dmul>
 800a394:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	d14b      	bne.n	800a436 <atan+0x25e>
 800a39e:	4620      	mov	r0, r4
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	f7f5 ff71 	bl	8000288 <__aeabi_dsub>
 800a3a6:	e72c      	b.n	800a202 <atan+0x2a>
 800a3a8:	ee10 0a10 	vmov	r0, s0
 800a3ac:	4b53      	ldr	r3, [pc, #332]	; (800a4fc <atan+0x324>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f5 ff69 	bl	8000288 <__aeabi_dsub>
 800a3b6:	4b51      	ldr	r3, [pc, #324]	; (800a4fc <atan+0x324>)
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	460f      	mov	r7, r1
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4620      	mov	r0, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7f5 ff63 	bl	800028c <__adddf3>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	f7f6 fa3d 	bl	800084c <__aeabi_ddiv>
 800a3d2:	f04f 0a01 	mov.w	sl, #1
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	460d      	mov	r5, r1
 800a3da:	e764      	b.n	800a2a6 <atan+0xce>
 800a3dc:	4b49      	ldr	r3, [pc, #292]	; (800a504 <atan+0x32c>)
 800a3de:	429e      	cmp	r6, r3
 800a3e0:	da1d      	bge.n	800a41e <atan+0x246>
 800a3e2:	ee10 0a10 	vmov	r0, s0
 800a3e6:	4b48      	ldr	r3, [pc, #288]	; (800a508 <atan+0x330>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7f5 ff4c 	bl	8000288 <__aeabi_dsub>
 800a3f0:	4b45      	ldr	r3, [pc, #276]	; (800a508 <atan+0x330>)
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	f7f6 f8fc 	bl	80005f8 <__aeabi_dmul>
 800a400:	4b3e      	ldr	r3, [pc, #248]	; (800a4fc <atan+0x324>)
 800a402:	2200      	movs	r2, #0
 800a404:	f7f5 ff42 	bl	800028c <__adddf3>
 800a408:	4602      	mov	r2, r0
 800a40a:	460b      	mov	r3, r1
 800a40c:	4630      	mov	r0, r6
 800a40e:	4639      	mov	r1, r7
 800a410:	f7f6 fa1c 	bl	800084c <__aeabi_ddiv>
 800a414:	f04f 0a02 	mov.w	sl, #2
 800a418:	4604      	mov	r4, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	e743      	b.n	800a2a6 <atan+0xce>
 800a41e:	462b      	mov	r3, r5
 800a420:	ee10 2a10 	vmov	r2, s0
 800a424:	4939      	ldr	r1, [pc, #228]	; (800a50c <atan+0x334>)
 800a426:	2000      	movs	r0, #0
 800a428:	f7f6 fa10 	bl	800084c <__aeabi_ddiv>
 800a42c:	f04f 0a03 	mov.w	sl, #3
 800a430:	4604      	mov	r4, r0
 800a432:	460d      	mov	r5, r1
 800a434:	e737      	b.n	800a2a6 <atan+0xce>
 800a436:	4b36      	ldr	r3, [pc, #216]	; (800a510 <atan+0x338>)
 800a438:	4e36      	ldr	r6, [pc, #216]	; (800a514 <atan+0x33c>)
 800a43a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	f7f5 ff21 	bl	8000288 <__aeabi_dsub>
 800a446:	4622      	mov	r2, r4
 800a448:	462b      	mov	r3, r5
 800a44a:	f7f5 ff1d 	bl	8000288 <__aeabi_dsub>
 800a44e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a45a:	f7f5 ff15 	bl	8000288 <__aeabi_dsub>
 800a45e:	f1bb 0f00 	cmp.w	fp, #0
 800a462:	4604      	mov	r4, r0
 800a464:	460d      	mov	r5, r1
 800a466:	f6bf aed6 	bge.w	800a216 <atan+0x3e>
 800a46a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a46e:	461d      	mov	r5, r3
 800a470:	e6d1      	b.n	800a216 <atan+0x3e>
 800a472:	a51d      	add	r5, pc, #116	; (adr r5, 800a4e8 <atan+0x310>)
 800a474:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a478:	e6cd      	b.n	800a216 <atan+0x3e>
 800a47a:	bf00      	nop
 800a47c:	f3af 8000 	nop.w
 800a480:	54442d18 	.word	0x54442d18
 800a484:	bff921fb 	.word	0xbff921fb
 800a488:	8800759c 	.word	0x8800759c
 800a48c:	7e37e43c 	.word	0x7e37e43c
 800a490:	e322da11 	.word	0xe322da11
 800a494:	3f90ad3a 	.word	0x3f90ad3a
 800a498:	24760deb 	.word	0x24760deb
 800a49c:	3fa97b4b 	.word	0x3fa97b4b
 800a4a0:	a0d03d51 	.word	0xa0d03d51
 800a4a4:	3fb10d66 	.word	0x3fb10d66
 800a4a8:	c54c206e 	.word	0xc54c206e
 800a4ac:	3fb745cd 	.word	0x3fb745cd
 800a4b0:	920083ff 	.word	0x920083ff
 800a4b4:	3fc24924 	.word	0x3fc24924
 800a4b8:	5555550d 	.word	0x5555550d
 800a4bc:	3fd55555 	.word	0x3fd55555
 800a4c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a4c4:	bfa2b444 	.word	0xbfa2b444
 800a4c8:	52defd9a 	.word	0x52defd9a
 800a4cc:	3fadde2d 	.word	0x3fadde2d
 800a4d0:	af749a6d 	.word	0xaf749a6d
 800a4d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a4d8:	fe231671 	.word	0xfe231671
 800a4dc:	3fbc71c6 	.word	0x3fbc71c6
 800a4e0:	9998ebc4 	.word	0x9998ebc4
 800a4e4:	3fc99999 	.word	0x3fc99999
 800a4e8:	54442d18 	.word	0x54442d18
 800a4ec:	3ff921fb 	.word	0x3ff921fb
 800a4f0:	440fffff 	.word	0x440fffff
 800a4f4:	7ff00000 	.word	0x7ff00000
 800a4f8:	3fdbffff 	.word	0x3fdbffff
 800a4fc:	3ff00000 	.word	0x3ff00000
 800a500:	3ff2ffff 	.word	0x3ff2ffff
 800a504:	40038000 	.word	0x40038000
 800a508:	3ff80000 	.word	0x3ff80000
 800a50c:	bff00000 	.word	0xbff00000
 800a510:	0800a948 	.word	0x0800a948
 800a514:	0800a928 	.word	0x0800a928

0800a518 <fabs>:
 800a518:	ec51 0b10 	vmov	r0, r1, d0
 800a51c:	ee10 2a10 	vmov	r2, s0
 800a520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a524:	ec43 2b10 	vmov	d0, r2, r3
 800a528:	4770      	bx	lr
	...

0800a52c <_init>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	bf00      	nop
 800a530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a532:	bc08      	pop	{r3}
 800a534:	469e      	mov	lr, r3
 800a536:	4770      	bx	lr

0800a538 <_fini>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	bf00      	nop
 800a53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53e:	bc08      	pop	{r3}
 800a540:	469e      	mov	lr, r3
 800a542:	4770      	bx	lr
